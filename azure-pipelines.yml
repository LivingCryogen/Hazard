# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger:
- main

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release_SelfContained'
  publishPath: '$(Build.ArtifactStagingDirectory)\publish'
  storageAccount: 'jm84storage'
  containerName: 'hazard'
  blobPath: 'self-contained'

steps:
#- task: UseDotNet@2
#  inputs:
#    packageType: 'sdk'
#    version: '8.0.x'
#    includePreviewVersions: false

#- task: NuGetToolInstaller@1

#- task: DotNetCoreCLI@2
#  inputs:
#    command: 'restore'
#    projects: '**/*.csproj'
#    feedsToUse: 'select'
#    arguments: '--runtime win-x64'
#- task: NuGetCommand@2
#  inputs:
#    restoreSolution: '$(solution)'

#- task: VSBuild@1
#  inputs:
#    solution: '$(solution)'
#    platform: '$(buildPlatform)'
#    configuration: '$(buildConfiguration)'
#    msbuildArgs: '/t:restore;publish 
#      /p:PublishProfile=ClickOnce_SelfContained 
#      /p:Configuration=Release_SelfContained 
#      /p:PublishDir="$(publishPath)" 
#      /p:RuntimeIdentifier=win-x64 
#      /p:PublishProtocol=ClickOnce 
#      /p:GenerateManifests=true'

# Azure CLI task to ensure credentials are available
- task: AzureCLI@2
  inputs:
    azureSubscription: 'JoshMcKnight Azure TopLevel'
    addSpnToEnvironment: true # Automatically sets service principal details as environment variables
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      # Print the environment variables to verify they are set
      echo "Client ID (from environment): $servicePrincipalId"
      echo "Tenant ID (from environment): $tenantId"
      echo "Client Secret (from environment): $servicePrincipalSecret"
      
      # Explicit login using the automatically set environment variables
      az login --service-principal -u "$servicePrincipalId" -p "$servicePrincipalSecret" -t "$tenantId"
      
      # Set subscription
      az account set --subscription "e60fbeed-a1d7-4d83-828e-59d421eae26d"
      
      # Force token refresh
      az account get-access-token --resource https://management.azure.com/
      
      # Verify login state
      az account show

# Delay to ensure credentials propagation
- script: sleep 10
  displayName: 'Add delay to ensure credentials propagation'

# TrustedSigning task using the credentials set by the Azure CLI task
- task: TrustedSigning@0
  displayName: Sign with Trusted Signing
  inputs:
    AzureTenantID: '$(AZURE_TENANT_ID)'
    AzureClientID: '$(AZURE_CLIENT_ID)'
    AzureClientSecret: '$(AZURE_CLIENT_SECRET)'
    Endpoint: 'https://eus.codesigning.azure.net/'
    TrustedSigningAccountName: 'my-codesigning-account'
    CertificateProfileName: 'my-certificate-profile'
    FilesFolder: '$(Build.SourcesDirectory)/MauiApp1/MauiApp1/bin/Release/net8.0-windows10.0.19041.0/win10-x64/AppPackages/'
    FilesFolderFilter: 'msix'
    FilesFolderRecurse: true
    FilesFolderDepth: 1
    FileDigest: 'SHA256'
    TimestampRfc3161: 'http://timestamp.acs.microsoft.com'
    TimestampDigest:
    # Focus on Azure CLI authentication
    ExcludeEnvironmentCredential: true
    ExcludeWorkloadIdentityCredential: true
    ExcludeManagedIdentityCredential: true
    ExcludeSharedTokenCacheCredential: true
    ExcludeVisualStudioCredential: true
    ExcludeVisualStudioCodeCredential: true
    ExcludeAzureCliCredential: false
    ExcludeAzurePowershellCredential: true
    ExcludeAzureDeveloperCliCredential: true
    ExcludeInteractiveBrowserCredential: true
