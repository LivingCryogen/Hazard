### YamlMime:ManagedReference
items:
- uid: Shared.Services.Registry.ITypeRelations
  commentId: T:Shared.Services.Registry.ITypeRelations
  id: ITypeRelations
  parent: Shared.Services.Registry
  children:
  - Shared.Services.Registry.ITypeRelations.Add(System.Object,Shared.Services.Registry.RegistryRelation)
  - Shared.Services.Registry.ITypeRelations.IsEmpty
  - Shared.Services.Registry.ITypeRelations.Item(Shared.Services.Registry.RegistryRelation)
  - Shared.Services.Registry.ITypeRelations.Remove(Shared.Services.Registry.RegistryRelation)
  langs:
  - csharp
  - vb
  name: ITypeRelations
  nameWithType: ITypeRelations
  fullName: Shared.Services.Registry.ITypeRelations
  type: Interface
  source:
    remote:
      path: Shared/Services/Registry/ITypeRelations.cs
      branch: main
      repo: https://github.com/LivingCryogen/Hazard.git
    id: ITypeRelations
    path: ../Shared/Services/Registry/ITypeRelations.cs
    startLine: 5
  assemblies:
  - Model
  namespace: Shared.Services.Registry
  summary: Encapsulates objects under specific relations as values for a <xref href="Shared.Services.Registry.TypeRegister" data-throw-if-not-resolved="false"></xref> entry.
  example: []
  syntax:
    content: public interface ITypeRelations
    content.vb: Public Interface ITypeRelations
- uid: Shared.Services.Registry.ITypeRelations.IsEmpty
  commentId: P:Shared.Services.Registry.ITypeRelations.IsEmpty
  id: IsEmpty
  parent: Shared.Services.Registry.ITypeRelations
  langs:
  - csharp
  - vb
  name: IsEmpty
  nameWithType: ITypeRelations.IsEmpty
  fullName: Shared.Services.Registry.ITypeRelations.IsEmpty
  type: Property
  source:
    remote:
      path: Shared/Services/Registry/ITypeRelations.cs
      branch: main
      repo: https://github.com/LivingCryogen/Hazard.git
    id: IsEmpty
    path: ../Shared/Services/Registry/ITypeRelations.cs
    startLine: 13
  assemblies:
  - Model
  namespace: Shared.Services.Registry
  summary: Indicates whether the instance is internally empty.
  example: []
  syntax:
    content: bool IsEmpty { get; }
    parameters: []
    return:
      type: System.Boolean
      description: True if the set of object-relation values is empty; otherwise, false.
    content.vb: ReadOnly Property IsEmpty As Boolean
  overload: Shared.Services.Registry.ITypeRelations.IsEmpty*
- uid: Shared.Services.Registry.ITypeRelations.Item(Shared.Services.Registry.RegistryRelation)
  commentId: P:Shared.Services.Registry.ITypeRelations.Item(Shared.Services.Registry.RegistryRelation)
  id: Item(Shared.Services.Registry.RegistryRelation)
  parent: Shared.Services.Registry.ITypeRelations
  langs:
  - csharp
  - vb
  name: this[RegistryRelation]
  nameWithType: ITypeRelations.this[RegistryRelation]
  fullName: Shared.Services.Registry.ITypeRelations.this[Shared.Services.Registry.RegistryRelation]
  type: Property
  source:
    remote:
      path: Shared/Services/Registry/ITypeRelations.cs
      branch: main
      repo: https://github.com/LivingCryogen/Hazard.git
    id: this[]
    path: ../Shared/Services/Registry/ITypeRelations.cs
    startLine: 19
  assemblies:
  - Model
  namespace: Shared.Services.Registry
  summary: Retrieves the <xref href="System.Object" data-throw-if-not-resolved="false"></xref> in a <xref href="Shared.Services.Registry.TypeRegister" data-throw-if-not-resolved="false"></xref> entry given its relation type.
  example: []
  syntax:
    content: object? this[RegistryRelation relation] { get; }
    parameters:
    - id: relation
      type: Shared.Services.Registry.RegistryRelation
      description: The relation under which the <xref href="System.Object" data-throw-if-not-resolved="false"></xref> was registered.
    return:
      type: System.Object
      description: The related <xref href="System.Object" data-throw-if-not-resolved="false"></xref> or, if none, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
    content.vb: ReadOnly Default Property this[](relation As RegistryRelation) As Object
  overload: Shared.Services.Registry.ITypeRelations.Item*
  nameWithType.vb: ITypeRelations.this[](RegistryRelation)
  fullName.vb: Shared.Services.Registry.ITypeRelations.this[](Shared.Services.Registry.RegistryRelation)
  name.vb: this[](RegistryRelation)
- uid: Shared.Services.Registry.ITypeRelations.Add(System.Object,Shared.Services.Registry.RegistryRelation)
  commentId: M:Shared.Services.Registry.ITypeRelations.Add(System.Object,Shared.Services.Registry.RegistryRelation)
  id: Add(System.Object,Shared.Services.Registry.RegistryRelation)
  parent: Shared.Services.Registry.ITypeRelations
  langs:
  - csharp
  - vb
  name: Add(object, RegistryRelation)
  nameWithType: ITypeRelations.Add(object, RegistryRelation)
  fullName: Shared.Services.Registry.ITypeRelations.Add(object, Shared.Services.Registry.RegistryRelation)
  type: Method
  source:
    remote:
      path: Shared/Services/Registry/ITypeRelations.cs
      branch: main
      repo: https://github.com/LivingCryogen/Hazard.git
    id: Add
    path: ../Shared/Services/Registry/ITypeRelations.cs
    startLine: 25
  assemblies:
  - Model
  namespace: Shared.Services.Registry
  summary: Adds an object under a specific relation.
  example: []
  syntax:
    content: void Add(object obj, RegistryRelation relation)
    parameters:
    - id: obj
      type: System.Object
      description: The <xref href="System.Object" data-throw-if-not-resolved="false"></xref> to be registered as related.
    - id: relation
      type: Shared.Services.Registry.RegistryRelation
      description: The relation type.
    content.vb: Sub Add(obj As Object, relation As RegistryRelation)
  overload: Shared.Services.Registry.ITypeRelations.Add*
  nameWithType.vb: ITypeRelations.Add(Object, RegistryRelation)
  fullName.vb: Shared.Services.Registry.ITypeRelations.Add(Object, Shared.Services.Registry.RegistryRelation)
  name.vb: Add(Object, RegistryRelation)
- uid: Shared.Services.Registry.ITypeRelations.Remove(Shared.Services.Registry.RegistryRelation)
  commentId: M:Shared.Services.Registry.ITypeRelations.Remove(Shared.Services.Registry.RegistryRelation)
  id: Remove(Shared.Services.Registry.RegistryRelation)
  parent: Shared.Services.Registry.ITypeRelations
  langs:
  - csharp
  - vb
  name: Remove(RegistryRelation)
  nameWithType: ITypeRelations.Remove(RegistryRelation)
  fullName: Shared.Services.Registry.ITypeRelations.Remove(Shared.Services.Registry.RegistryRelation)
  type: Method
  source:
    remote:
      path: Shared/Services/Registry/ITypeRelations.cs
      branch: main
      repo: https://github.com/LivingCryogen/Hazard.git
    id: Remove
    path: ../Shared/Services/Registry/ITypeRelations.cs
    startLine: 30
  assemblies:
  - Model
  namespace: Shared.Services.Registry
  summary: Removes an object/relation pair.
  example: []
  syntax:
    content: void Remove(RegistryRelation relation)
    parameters:
    - id: relation
      type: Shared.Services.Registry.RegistryRelation
      description: The relation with which the value was registered.
    content.vb: Sub Remove(relation As RegistryRelation)
  overload: Shared.Services.Registry.ITypeRelations.Remove*
references:
- uid: Shared.Services.Registry.TypeRegister
  commentId: T:Shared.Services.Registry.TypeRegister
  href: Shared.Services.Registry.TypeRegister.html
  name: TypeRegister
  nameWithType: TypeRegister
  fullName: Shared.Services.Registry.TypeRegister
- uid: Shared.Services.Registry
  commentId: N:Shared.Services.Registry
  href: Shared.html
  name: Shared.Services.Registry
  nameWithType: Shared.Services.Registry
  fullName: Shared.Services.Registry
  spec.csharp:
  - uid: Shared
    name: Shared
    href: Shared.html
  - name: .
  - uid: Shared.Services
    name: Services
    href: Shared.Services.html
  - name: .
  - uid: Shared.Services.Registry
    name: Registry
    href: Shared.Services.Registry.html
  spec.vb:
  - uid: Shared
    name: Shared
    href: Shared.html
  - name: .
  - uid: Shared.Services
    name: Services
    href: Shared.Services.html
  - name: .
  - uid: Shared.Services.Registry
    name: Registry
    href: Shared.Services.Registry.html
- uid: Shared.Services.Registry.ITypeRelations.IsEmpty*
  commentId: Overload:Shared.Services.Registry.ITypeRelations.IsEmpty
  href: Shared.Services.Registry.ITypeRelations.html#Shared_Services_Registry_ITypeRelations_IsEmpty
  name: IsEmpty
  nameWithType: ITypeRelations.IsEmpty
  fullName: Shared.Services.Registry.ITypeRelations.IsEmpty
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: Shared.Services.Registry.ITypeRelations.Item*
  commentId: Overload:Shared.Services.Registry.ITypeRelations.Item
  href: Shared.Services.Registry.ITypeRelations.html#Shared_Services_Registry_ITypeRelations_Item_Shared_Services_Registry_RegistryRelation_
  name: this
  nameWithType: ITypeRelations.this
  fullName: Shared.Services.Registry.ITypeRelations.this
  nameWithType.vb: ITypeRelations.this[]
  fullName.vb: Shared.Services.Registry.ITypeRelations.this[]
  name.vb: this[]
- uid: Shared.Services.Registry.RegistryRelation
  commentId: T:Shared.Services.Registry.RegistryRelation
  parent: Shared.Services.Registry
  href: Shared.Services.Registry.RegistryRelation.html
  name: RegistryRelation
  nameWithType: RegistryRelation
  fullName: Shared.Services.Registry.RegistryRelation
- uid: Shared.Services.Registry.ITypeRelations.Add*
  commentId: Overload:Shared.Services.Registry.ITypeRelations.Add
  href: Shared.Services.Registry.ITypeRelations.html#Shared_Services_Registry_ITypeRelations_Add_System_Object_Shared_Services_Registry_RegistryRelation_
  name: Add
  nameWithType: ITypeRelations.Add
  fullName: Shared.Services.Registry.ITypeRelations.Add
- uid: Shared.Services.Registry.ITypeRelations.Remove*
  commentId: Overload:Shared.Services.Registry.ITypeRelations.Remove
  href: Shared.Services.Registry.ITypeRelations.html#Shared_Services_Registry_ITypeRelations_Remove_Shared_Services_Registry_RegistryRelation_
  name: Remove
  nameWithType: ITypeRelations.Remove
  fullName: Shared.Services.Registry.ITypeRelations.Remove
