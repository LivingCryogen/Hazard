### YamlMime:ManagedReference
items:
- uid: Shared.Interfaces.Model.ICardSet
  commentId: T:Shared.Interfaces.Model.ICardSet
  id: ICardSet
  parent: Shared.Interfaces.Model
  children:
  - Shared.Interfaces.Model.ICardSet.Cards
  - Shared.Interfaces.Model.ICardSet.FindTradeSets(Shared.Interfaces.Model.ICard[])
  - Shared.Interfaces.Model.ICardSet.ForcesTrade
  - Shared.Interfaces.Model.ICardSet.IsParent(Shared.Interfaces.Model.ICard)
  - Shared.Interfaces.Model.ICardSet.IsValidTrade(Shared.Interfaces.Model.ICard[])
  - Shared.Interfaces.Model.ICardSet.JData
  - Shared.Interfaces.Model.ICardSet.MemberTypeName
  - Shared.Interfaces.Model.ICardSet.TypeName
  langs:
  - csharp
  - vb
  name: ICardSet
  nameWithType: ICardSet
  fullName: Shared.Interfaces.Model.ICardSet
  type: Interface
  source:
    remote:
      path: Shared/Interfaces/Model/ICardSet.cs
      branch: main
      repo: https://github.com/LivingCryogen/Hazard.git
    id: ICardSet
    path: ../Shared/Interfaces/Model/ICardSet.cs
    startLine: 15
  assemblies:
  - Model
  namespace: Shared.Interfaces.Model
  summary: Data and methods for a collection of Cards.
  remarks: >-
    <xref href="Shared.Interfaces.Model.ICardSet" data-throw-if-not-resolved="false"></xref> is initialized in two steps: <br />

    (1) By <xref href="Model.DataAccess.Cards.ICardSetDataJConverter" data-throw-if-not-resolved="false"></xref>. See also <xref href="Shared.Interfaces.Model.ICardSetData" data-throw-if-not-resolved="false"></xref> and <xref href="Shared.Interfaces.Model.IDataProvider" data-throw-if-not-resolved="false"></xref>.

    (2) By <xref href="Model.DataAccess.AssetFactory.BuildTroopCards(Shared.Interfaces.Model.ICardSet)" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public interface ICardSet
    content.vb: Public Interface ICardSet
- uid: Shared.Interfaces.Model.ICardSet.TypeName
  commentId: P:Shared.Interfaces.Model.ICardSet.TypeName
  id: TypeName
  parent: Shared.Interfaces.Model.ICardSet
  langs:
  - csharp
  - vb
  name: TypeName
  nameWithType: ICardSet.TypeName
  fullName: Shared.Interfaces.Model.ICardSet.TypeName
  type: Property
  source:
    remote:
      path: Shared/Interfaces/Model/ICardSet.cs
      branch: main
      repo: https://github.com/LivingCryogen/Hazard.git
    id: TypeName
    path: ../Shared/Interfaces/Model/ICardSet.cs
    startLine: 23
  assemblies:
  - Model
  namespace: Shared.Interfaces.Model
  summary: Gets the name of this card set's type.
  remarks: 'A cached value to help avoid multiple reflection method calls (e.g.: .GetType()).'
  example: []
  syntax:
    content: string TypeName { get; }
    parameters: []
    return:
      type: System.String
    content.vb: ReadOnly Property TypeName As String
  overload: Shared.Interfaces.Model.ICardSet.TypeName*
- uid: Shared.Interfaces.Model.ICardSet.JData
  commentId: P:Shared.Interfaces.Model.ICardSet.JData
  id: JData
  parent: Shared.Interfaces.Model.ICardSet
  langs:
  - csharp
  - vb
  name: JData
  nameWithType: ICardSet.JData
  fullName: Shared.Interfaces.Model.ICardSet.JData
  type: Property
  source:
    remote:
      path: Shared/Interfaces/Model/ICardSet.cs
      branch: main
      repo: https://github.com/LivingCryogen/Hazard.git
    id: JData
    path: ../Shared/Interfaces/Model/ICardSet.cs
    startLine: 33
  assemblies:
  - Model
  namespace: Shared.Interfaces.Model
  summary: Gets the '.json' data object for this card set.
  remarks: This is provided by the DAL in new games, but will remain <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a> when loading from a save file.
  example: []
  syntax:
    content: ICardSetData? JData { get; }
    parameters: []
    return:
      type: Shared.Interfaces.Model.ICardSetData
      description: A card set if it has been loaded by the DAL; otherwise, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
    content.vb: ReadOnly Property JData As ICardSetData
  overload: Shared.Interfaces.Model.ICardSet.JData*
- uid: Shared.Interfaces.Model.ICardSet.MemberTypeName
  commentId: P:Shared.Interfaces.Model.ICardSet.MemberTypeName
  id: MemberTypeName
  parent: Shared.Interfaces.Model.ICardSet
  langs:
  - csharp
  - vb
  name: MemberTypeName
  nameWithType: ICardSet.MemberTypeName
  fullName: Shared.Interfaces.Model.ICardSet.MemberTypeName
  type: Property
  source:
    remote:
      path: Shared/Interfaces/Model/ICardSet.cs
      branch: main
      repo: https://github.com/LivingCryogen/Hazard.git
    id: MemberTypeName
    path: ../Shared/Interfaces/Model/ICardSet.cs
    startLine: 41
  assemblies:
  - Model
  namespace: Shared.Interfaces.Model
  summary: >-
    Gets the name of the type which is the intended member of this collection.

    <br /> E.g. "TroopCard", see <xref href="Model.Entities.Cards.TroopCard" data-throw-if-not-resolved="false"></xref>.
  remarks: Relationships between <xref href="Shared.Interfaces.Model.ICard" data-throw-if-not-resolved="false"></xref>s, <xref href="Shared.Interfaces.Model.ICardSet" data-throw-if-not-resolved="false"></xref>, and <xref href="Shared.Interfaces.Model.ICardSetData" data-throw-if-not-resolved="false"></xref> are established by <xref href="Shared.Services.Registry.ITypeRegister%601" data-throw-if-not-resolved="false"></xref>, which gets initial values from <xref href="Shared.Services.Registry.RegistryInitializer" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: string MemberTypeName { get; }
    parameters: []
    return:
      type: System.String
    content.vb: ReadOnly Property MemberTypeName As String
  overload: Shared.Interfaces.Model.ICardSet.MemberTypeName*
- uid: Shared.Interfaces.Model.ICardSet.Cards
  commentId: P:Shared.Interfaces.Model.ICardSet.Cards
  id: Cards
  parent: Shared.Interfaces.Model.ICardSet
  langs:
  - csharp
  - vb
  name: Cards
  nameWithType: ICardSet.Cards
  fullName: Shared.Interfaces.Model.ICardSet.Cards
  type: Property
  source:
    remote:
      path: Shared/Interfaces/Model/ICardSet.cs
      branch: main
      repo: https://github.com/LivingCryogen/Hazard.git
    id: Cards
    path: ../Shared/Interfaces/Model/ICardSet.cs
    startLine: 45
  assemblies:
  - Model
  namespace: Shared.Interfaces.Model
  summary: Gets or sets a list of cards in this card set.
  example: []
  syntax:
    content: List<ICard> Cards { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{Shared.Interfaces.Model.ICard}
    content.vb: Property Cards As List(Of ICard)
  overload: Shared.Interfaces.Model.ICardSet.Cards*
- uid: Shared.Interfaces.Model.ICardSet.ForcesTrade
  commentId: P:Shared.Interfaces.Model.ICardSet.ForcesTrade
  id: ForcesTrade
  parent: Shared.Interfaces.Model.ICardSet
  langs:
  - csharp
  - vb
  name: ForcesTrade
  nameWithType: ICardSet.ForcesTrade
  fullName: Shared.Interfaces.Model.ICardSet.ForcesTrade
  type: Property
  source:
    remote:
      path: Shared/Interfaces/Model/ICardSet.cs
      branch: main
      repo: https://github.com/LivingCryogen/Hazard.git
    id: ForcesTrade
    path: ../Shared/Interfaces/Model/ICardSet.cs
    startLine: 53
  assemblies:
  - Model
  namespace: Shared.Interfaces.Model
  summary: Gets a flag indicating if a trade should be forced when a matching set of <xref href="Shared.Interfaces.Model.ICard" data-throw-if-not-resolved="false"></xref>s from this set are obtained.
  example: []
  syntax:
    content: bool ForcesTrade { get; }
    parameters: []
    return:
      type: System.Boolean
      description: >-
        <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if obtaining matching cards (satisfying <xref href="Shared.Interfaces.Model.ICardSet.IsValidTrade(Shared.Interfaces.Model.ICard%5b%5d)" data-throw-if-not-resolved="false"></xref>) should force an <xref href="Shared.Interfaces.Model.IPlayer" data-throw-if-not-resolved="false"></xref> to trade (via <xref href="Shared.Interfaces.Model.IRegulator.TradeInCards(System.Int32%2cSystem.Int32%5b%5d)" data-throw-if-not-resolved="false"></xref>).

        <br /> Otherwise, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>.
    content.vb: ReadOnly Property ForcesTrade As Boolean
  overload: Shared.Interfaces.Model.ICardSet.ForcesTrade*
- uid: Shared.Interfaces.Model.ICardSet.FindTradeSets(Shared.Interfaces.Model.ICard[])
  commentId: M:Shared.Interfaces.Model.ICardSet.FindTradeSets(Shared.Interfaces.Model.ICard[])
  id: FindTradeSets(Shared.Interfaces.Model.ICard[])
  parent: Shared.Interfaces.Model.ICardSet
  langs:
  - csharp
  - vb
  name: FindTradeSets(ICard[])
  nameWithType: ICardSet.FindTradeSets(ICard[])
  fullName: Shared.Interfaces.Model.ICardSet.FindTradeSets(Shared.Interfaces.Model.ICard[])
  type: Method
  source:
    remote:
      path: Shared/Interfaces/Model/ICardSet.cs
      branch: main
      repo: https://github.com/LivingCryogen/Hazard.git
    id: FindTradeSets
    path: ../Shared/Interfaces/Model/ICardSet.cs
    startLine: 59
  assemblies:
  - Model
  namespace: Shared.Interfaces.Model
  summary: Identifies any number of matching trade sets present in any <xref href="Shared.Interfaces.Model.ICard" data-throw-if-not-resolved="false"></xref>s.
  example: []
  syntax:
    content: ICard[][]? FindTradeSets(ICard[] cards)
    parameters:
    - id: cards
      type: Shared.Interfaces.Model.ICard[]
      description: An array of cards in which to search for matching trade-sets.
    return:
      type: Shared.Interfaces.Model.ICard[][]
      description: A staggered array of cards containing each valid trade-set found within <code class="paramref">cards</code>.
    content.vb: Function FindTradeSets(cards As ICard()) As ICard()()
  overload: Shared.Interfaces.Model.ICardSet.FindTradeSets*
  nameWithType.vb: ICardSet.FindTradeSets(ICard())
  fullName.vb: Shared.Interfaces.Model.ICardSet.FindTradeSets(Shared.Interfaces.Model.ICard())
  name.vb: FindTradeSets(ICard())
- uid: Shared.Interfaces.Model.ICardSet.IsValidTrade(Shared.Interfaces.Model.ICard[])
  commentId: M:Shared.Interfaces.Model.ICardSet.IsValidTrade(Shared.Interfaces.Model.ICard[])
  id: IsValidTrade(Shared.Interfaces.Model.ICard[])
  parent: Shared.Interfaces.Model.ICardSet
  langs:
  - csharp
  - vb
  name: IsValidTrade(ICard[])
  nameWithType: ICardSet.IsValidTrade(ICard[])
  fullName: Shared.Interfaces.Model.ICardSet.IsValidTrade(Shared.Interfaces.Model.ICard[])
  type: Method
  source:
    remote:
      path: Shared/Interfaces/Model/ICardSet.cs
      branch: main
      repo: https://github.com/LivingCryogen/Hazard.git
    id: IsValidTrade
    path: ../Shared/Interfaces/Model/ICardSet.cs
    startLine: 65
  assemblies:
  - Model
  namespace: Shared.Interfaces.Model
  summary: Determines whether a group of cards is a valid set for trade-in.
  example: []
  syntax:
    content: bool IsValidTrade(ICard[] cards)
    parameters:
    - id: cards
      type: Shared.Interfaces.Model.ICard[]
      description: An array of cards to test.
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if the collection <code class="paramref">cards</code> qualifies exactly as a valid trade-set. Otherwise, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>.
    content.vb: Function IsValidTrade(cards As ICard()) As Boolean
  overload: Shared.Interfaces.Model.ICardSet.IsValidTrade*
  nameWithType.vb: ICardSet.IsValidTrade(ICard())
  fullName.vb: Shared.Interfaces.Model.ICardSet.IsValidTrade(Shared.Interfaces.Model.ICard())
  name.vb: IsValidTrade(ICard())
- uid: Shared.Interfaces.Model.ICardSet.IsParent(Shared.Interfaces.Model.ICard)
  commentId: M:Shared.Interfaces.Model.ICardSet.IsParent(Shared.Interfaces.Model.ICard)
  id: IsParent(Shared.Interfaces.Model.ICard)
  parent: Shared.Interfaces.Model.ICardSet
  langs:
  - csharp
  - vb
  name: IsParent(ICard)
  nameWithType: ICardSet.IsParent(ICard)
  fullName: Shared.Interfaces.Model.ICardSet.IsParent(Shared.Interfaces.Model.ICard)
  type: Method
  source:
    remote:
      path: Shared/Interfaces/Model/ICardSet.cs
      branch: main
      repo: https://github.com/LivingCryogen/Hazard.git
    id: IsParent
    path: ../Shared/Interfaces/Model/ICardSet.cs
    startLine: 71
  assemblies:
  - Model
  namespace: Shared.Interfaces.Model
  summary: Validates a card as a member of this set.
  example: []
  syntax:
    content: bool IsParent(ICard card)
    parameters:
    - id: card
      type: Shared.Interfaces.Model.ICard
      description: The card that may be a member of this card set.
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if <code class="paramref">card</code>'s relevant properties verify it belongs to this set; otherwise, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>.
    content.vb: Function IsParent(card As ICard) As Boolean
  overload: Shared.Interfaces.Model.ICardSet.IsParent*
references:
- uid: Shared.Interfaces.Model.ICardSet
  commentId: T:Shared.Interfaces.Model.ICardSet
  parent: Shared.Interfaces.Model
  href: Shared.Interfaces.Model.ICardSet.html
  name: ICardSet
  nameWithType: ICardSet
  fullName: Shared.Interfaces.Model.ICardSet
- uid: Model.DataAccess.Cards.ICardSetDataJConverter
  commentId: T:Model.DataAccess.Cards.ICardSetDataJConverter
  parent: Model.DataAccess.Cards
  href: Model.DataAccess.Cards.ICardSetDataJConverter.html
  name: ICardSetDataJConverter
  nameWithType: ICardSetDataJConverter
  fullName: Model.DataAccess.Cards.ICardSetDataJConverter
- uid: Shared.Interfaces.Model.ICardSetData
  commentId: T:Shared.Interfaces.Model.ICardSetData
  parent: Shared.Interfaces.Model
  href: Shared.Interfaces.Model.ICardSetData.html
  name: ICardSetData
  nameWithType: ICardSetData
  fullName: Shared.Interfaces.Model.ICardSetData
- uid: Shared.Interfaces.Model.IDataProvider
  commentId: T:Shared.Interfaces.Model.IDataProvider
  parent: Shared.Interfaces.Model
  href: Shared.Interfaces.Model.IDataProvider.html
  name: IDataProvider
  nameWithType: IDataProvider
  fullName: Shared.Interfaces.Model.IDataProvider
- uid: Model.DataAccess.AssetFactory.BuildTroopCards(Shared.Interfaces.Model.ICardSet)
  commentId: M:Model.DataAccess.AssetFactory.BuildTroopCards(Shared.Interfaces.Model.ICardSet)
  href: Model.DataAccess.AssetFactory.html#Model_DataAccess_AssetFactory_BuildTroopCards_Shared_Interfaces_Model_ICardSet_
  name: BuildTroopCards(ICardSet)
  nameWithType: AssetFactory.BuildTroopCards(ICardSet)
  fullName: Model.DataAccess.AssetFactory.BuildTroopCards(Shared.Interfaces.Model.ICardSet)
  spec.csharp:
  - uid: Model.DataAccess.AssetFactory.BuildTroopCards(Shared.Interfaces.Model.ICardSet)
    name: BuildTroopCards
    href: Model.DataAccess.AssetFactory.html#Model_DataAccess_AssetFactory_BuildTroopCards_Shared_Interfaces_Model_ICardSet_
  - name: (
  - uid: Shared.Interfaces.Model.ICardSet
    name: ICardSet
    href: Shared.Interfaces.Model.ICardSet.html
  - name: )
  spec.vb:
  - uid: Model.DataAccess.AssetFactory.BuildTroopCards(Shared.Interfaces.Model.ICardSet)
    name: BuildTroopCards
    href: Model.DataAccess.AssetFactory.html#Model_DataAccess_AssetFactory_BuildTroopCards_Shared_Interfaces_Model_ICardSet_
  - name: (
  - uid: Shared.Interfaces.Model.ICardSet
    name: ICardSet
    href: Shared.Interfaces.Model.ICardSet.html
  - name: )
- uid: Shared.Interfaces.Model
  commentId: N:Shared.Interfaces.Model
  href: Shared.html
  name: Shared.Interfaces.Model
  nameWithType: Shared.Interfaces.Model
  fullName: Shared.Interfaces.Model
  spec.csharp:
  - uid: Shared
    name: Shared
    href: Shared.html
  - name: .
  - uid: Shared.Interfaces
    name: Interfaces
    href: Shared.Interfaces.html
  - name: .
  - uid: Shared.Interfaces.Model
    name: Model
    href: Shared.Interfaces.Model.html
  spec.vb:
  - uid: Shared
    name: Shared
    href: Shared.html
  - name: .
  - uid: Shared.Interfaces
    name: Interfaces
    href: Shared.Interfaces.html
  - name: .
  - uid: Shared.Interfaces.Model
    name: Model
    href: Shared.Interfaces.Model.html
- uid: Model.DataAccess.Cards
  commentId: N:Model.DataAccess.Cards
  href: Model.html
  name: Model.DataAccess.Cards
  nameWithType: Model.DataAccess.Cards
  fullName: Model.DataAccess.Cards
  spec.csharp:
  - uid: Model
    name: Model
    href: Model.html
  - name: .
  - uid: Model.DataAccess
    name: DataAccess
    href: Model.DataAccess.html
  - name: .
  - uid: Model.DataAccess.Cards
    name: Cards
    href: Model.DataAccess.Cards.html
  spec.vb:
  - uid: Model
    name: Model
    href: Model.html
  - name: .
  - uid: Model.DataAccess
    name: DataAccess
    href: Model.DataAccess.html
  - name: .
  - uid: Model.DataAccess.Cards
    name: Cards
    href: Model.DataAccess.Cards.html
- uid: Shared.Interfaces.Model.ICardSet.TypeName*
  commentId: Overload:Shared.Interfaces.Model.ICardSet.TypeName
  href: Shared.Interfaces.Model.ICardSet.html#Shared_Interfaces_Model_ICardSet_TypeName
  name: TypeName
  nameWithType: ICardSet.TypeName
  fullName: Shared.Interfaces.Model.ICardSet.TypeName
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Shared.Interfaces.Model.ICardSet.JData*
  commentId: Overload:Shared.Interfaces.Model.ICardSet.JData
  href: Shared.Interfaces.Model.ICardSet.html#Shared_Interfaces_Model_ICardSet_JData
  name: JData
  nameWithType: ICardSet.JData
  fullName: Shared.Interfaces.Model.ICardSet.JData
- uid: Model.Entities.Cards.TroopCard
  commentId: T:Model.Entities.Cards.TroopCard
  href: Model.Entities.Cards.TroopCard.html
  name: TroopCard
  nameWithType: TroopCard
  fullName: Model.Entities.Cards.TroopCard
- uid: Shared.Interfaces.Model.ICard
  commentId: T:Shared.Interfaces.Model.ICard
  parent: Shared.Interfaces.Model
  href: Shared.Interfaces.Model.ICard.html
  name: ICard
  nameWithType: ICard
  fullName: Shared.Interfaces.Model.ICard
- uid: Shared.Services.Registry.ITypeRegister`1
  commentId: T:Shared.Services.Registry.ITypeRegister`1
  href: Shared.Services.Registry.ITypeRegister-1.html
  name: ITypeRegister<T>
  nameWithType: ITypeRegister<T>
  fullName: Shared.Services.Registry.ITypeRegister<T>
  nameWithType.vb: ITypeRegister(Of T)
  fullName.vb: Shared.Services.Registry.ITypeRegister(Of T)
  name.vb: ITypeRegister(Of T)
  spec.csharp:
  - uid: Shared.Services.Registry.ITypeRegister`1
    name: ITypeRegister
    href: Shared.Services.Registry.ITypeRegister-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: Shared.Services.Registry.ITypeRegister`1
    name: ITypeRegister
    href: Shared.Services.Registry.ITypeRegister-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Shared.Services.Registry.RegistryInitializer
  commentId: T:Shared.Services.Registry.RegistryInitializer
  href: Shared.Services.Registry.RegistryInitializer.html
  name: RegistryInitializer
  nameWithType: RegistryInitializer
  fullName: Shared.Services.Registry.RegistryInitializer
- uid: Shared.Interfaces.Model.ICardSet.MemberTypeName*
  commentId: Overload:Shared.Interfaces.Model.ICardSet.MemberTypeName
  href: Shared.Interfaces.Model.ICardSet.html#Shared_Interfaces_Model_ICardSet_MemberTypeName
  name: MemberTypeName
  nameWithType: ICardSet.MemberTypeName
  fullName: Shared.Interfaces.Model.ICardSet.MemberTypeName
- uid: Shared.Interfaces.Model.ICardSet.Cards*
  commentId: Overload:Shared.Interfaces.Model.ICardSet.Cards
  href: Shared.Interfaces.Model.ICardSet.html#Shared_Interfaces_Model_ICardSet_Cards
  name: Cards
  nameWithType: ICardSet.Cards
  fullName: Shared.Interfaces.Model.ICardSet.Cards
- uid: System.Collections.Generic.List{Shared.Interfaces.Model.ICard}
  commentId: T:System.Collections.Generic.List{Shared.Interfaces.Model.ICard}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<ICard>
  nameWithType: List<ICard>
  fullName: System.Collections.Generic.List<Shared.Interfaces.Model.ICard>
  nameWithType.vb: List(Of ICard)
  fullName.vb: System.Collections.Generic.List(Of Shared.Interfaces.Model.ICard)
  name.vb: List(Of ICard)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: Shared.Interfaces.Model.ICard
    name: ICard
    href: Shared.Interfaces.Model.ICard.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: Shared.Interfaces.Model.ICard
    name: ICard
    href: Shared.Interfaces.Model.ICard.html
  - name: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: Shared.Interfaces.Model.ICardSet.IsValidTrade(Shared.Interfaces.Model.ICard[])
  commentId: M:Shared.Interfaces.Model.ICardSet.IsValidTrade(Shared.Interfaces.Model.ICard[])
  parent: Shared.Interfaces.Model.ICardSet
  href: Shared.Interfaces.Model.ICardSet.html#Shared_Interfaces_Model_ICardSet_IsValidTrade_Shared_Interfaces_Model_ICard___
  name: IsValidTrade(ICard[])
  nameWithType: ICardSet.IsValidTrade(ICard[])
  fullName: Shared.Interfaces.Model.ICardSet.IsValidTrade(Shared.Interfaces.Model.ICard[])
  nameWithType.vb: ICardSet.IsValidTrade(ICard())
  fullName.vb: Shared.Interfaces.Model.ICardSet.IsValidTrade(Shared.Interfaces.Model.ICard())
  name.vb: IsValidTrade(ICard())
  spec.csharp:
  - uid: Shared.Interfaces.Model.ICardSet.IsValidTrade(Shared.Interfaces.Model.ICard[])
    name: IsValidTrade
    href: Shared.Interfaces.Model.ICardSet.html#Shared_Interfaces_Model_ICardSet_IsValidTrade_Shared_Interfaces_Model_ICard___
  - name: (
  - uid: Shared.Interfaces.Model.ICard
    name: ICard
    href: Shared.Interfaces.Model.ICard.html
  - name: '['
  - name: ']'
  - name: )
  spec.vb:
  - uid: Shared.Interfaces.Model.ICardSet.IsValidTrade(Shared.Interfaces.Model.ICard[])
    name: IsValidTrade
    href: Shared.Interfaces.Model.ICardSet.html#Shared_Interfaces_Model_ICardSet_IsValidTrade_Shared_Interfaces_Model_ICard___
  - name: (
  - uid: Shared.Interfaces.Model.ICard
    name: ICard
    href: Shared.Interfaces.Model.ICard.html
  - name: (
  - name: )
  - name: )
- uid: Shared.Interfaces.Model.IPlayer
  commentId: T:Shared.Interfaces.Model.IPlayer
  parent: Shared.Interfaces.Model
  href: Shared.Interfaces.Model.IPlayer.html
  name: IPlayer
  nameWithType: IPlayer
  fullName: Shared.Interfaces.Model.IPlayer
- uid: Shared.Interfaces.Model.IRegulator.TradeInCards(System.Int32,System.Int32[])
  commentId: M:Shared.Interfaces.Model.IRegulator.TradeInCards(System.Int32,System.Int32[])
  parent: Shared.Interfaces.Model.IRegulator
  isExternal: true
  href: Shared.Interfaces.Model.IRegulator.html#Shared_Interfaces_Model_IRegulator_TradeInCards_System_Int32_System_Int32___
  name: TradeInCards(int, int[])
  nameWithType: IRegulator.TradeInCards(int, int[])
  fullName: Shared.Interfaces.Model.IRegulator.TradeInCards(int, int[])
  nameWithType.vb: IRegulator.TradeInCards(Integer, Integer())
  fullName.vb: Shared.Interfaces.Model.IRegulator.TradeInCards(Integer, Integer())
  name.vb: TradeInCards(Integer, Integer())
  spec.csharp:
  - uid: Shared.Interfaces.Model.IRegulator.TradeInCards(System.Int32,System.Int32[])
    name: TradeInCards
    href: Shared.Interfaces.Model.IRegulator.html#Shared_Interfaces_Model_IRegulator_TradeInCards_System_Int32_System_Int32___
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '['
  - name: ']'
  - name: )
  spec.vb:
  - uid: Shared.Interfaces.Model.IRegulator.TradeInCards(System.Int32,System.Int32[])
    name: TradeInCards
    href: Shared.Interfaces.Model.IRegulator.html#Shared_Interfaces_Model_IRegulator_TradeInCards_System_Int32_System_Int32___
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: (
  - name: )
  - name: )
- uid: Shared.Interfaces.Model.ICardSet.ForcesTrade*
  commentId: Overload:Shared.Interfaces.Model.ICardSet.ForcesTrade
  href: Shared.Interfaces.Model.ICardSet.html#Shared_Interfaces_Model_ICardSet_ForcesTrade
  name: ForcesTrade
  nameWithType: ICardSet.ForcesTrade
  fullName: Shared.Interfaces.Model.ICardSet.ForcesTrade
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: Shared.Interfaces.Model.IRegulator
  commentId: T:Shared.Interfaces.Model.IRegulator
  parent: Shared.Interfaces.Model
  href: Shared.Interfaces.Model.IRegulator.html
  name: IRegulator
  nameWithType: IRegulator
  fullName: Shared.Interfaces.Model.IRegulator
- uid: Shared.Interfaces.Model.ICardSet.FindTradeSets*
  commentId: Overload:Shared.Interfaces.Model.ICardSet.FindTradeSets
  href: Shared.Interfaces.Model.ICardSet.html#Shared_Interfaces_Model_ICardSet_FindTradeSets_Shared_Interfaces_Model_ICard___
  name: FindTradeSets
  nameWithType: ICardSet.FindTradeSets
  fullName: Shared.Interfaces.Model.ICardSet.FindTradeSets
- uid: Shared.Interfaces.Model.ICard[]
  isExternal: true
  href: Shared.Interfaces.Model.ICard.html
  name: ICard[]
  nameWithType: ICard[]
  fullName: Shared.Interfaces.Model.ICard[]
  nameWithType.vb: ICard()
  fullName.vb: Shared.Interfaces.Model.ICard()
  name.vb: ICard()
  spec.csharp:
  - uid: Shared.Interfaces.Model.ICard
    name: ICard
    href: Shared.Interfaces.Model.ICard.html
  - name: '['
  - name: ']'
  spec.vb:
  - uid: Shared.Interfaces.Model.ICard
    name: ICard
    href: Shared.Interfaces.Model.ICard.html
  - name: (
  - name: )
- uid: Shared.Interfaces.Model.ICard[][]
  isExternal: true
  href: Shared.Interfaces.Model.ICard.html
  name: ICard[][]
  nameWithType: ICard[][]
  fullName: Shared.Interfaces.Model.ICard[][]
  nameWithType.vb: ICard()()
  fullName.vb: Shared.Interfaces.Model.ICard()()
  name.vb: ICard()()
  spec.csharp:
  - uid: Shared.Interfaces.Model.ICard
    name: ICard
    href: Shared.Interfaces.Model.ICard.html
  - name: '['
  - name: ']'
  - name: '['
  - name: ']'
  spec.vb:
  - uid: Shared.Interfaces.Model.ICard
    name: ICard
    href: Shared.Interfaces.Model.ICard.html
  - name: (
  - name: )
  - name: (
  - name: )
- uid: Shared.Interfaces.Model.ICardSet.IsValidTrade*
  commentId: Overload:Shared.Interfaces.Model.ICardSet.IsValidTrade
  href: Shared.Interfaces.Model.ICardSet.html#Shared_Interfaces_Model_ICardSet_IsValidTrade_Shared_Interfaces_Model_ICard___
  name: IsValidTrade
  nameWithType: ICardSet.IsValidTrade
  fullName: Shared.Interfaces.Model.ICardSet.IsValidTrade
- uid: Shared.Interfaces.Model.ICardSet.IsParent*
  commentId: Overload:Shared.Interfaces.Model.ICardSet.IsParent
  href: Shared.Interfaces.Model.ICardSet.html#Shared_Interfaces_Model_ICardSet_IsParent_Shared_Interfaces_Model_ICard_
  name: IsParent
  nameWithType: ICardSet.IsParent
  fullName: Shared.Interfaces.Model.ICardSet.IsParent
