### YamlMime:ManagedReference
items:
- uid: Shared.Services.Registry.TypeRegister
  commentId: T:Shared.Services.Registry.TypeRegister
  id: TypeRegister
  parent: Shared.Services.Registry
  children:
  - Shared.Services.Registry.TypeRegister.#ctor(Shared.Services.Registry.IRegistryInitializer)
  - Shared.Services.Registry.TypeRegister.AddRelation(System.Type,System.ValueTuple{System.Object,Shared.Services.Registry.RegistryRelation})
  - Shared.Services.Registry.TypeRegister.Clear
  - Shared.Services.Registry.TypeRegister.DeRegister(System.Type)
  - Shared.Services.Registry.TypeRegister.Item(Shared.Services.Registry.RegistryRelation)
  - Shared.Services.Registry.TypeRegister.Item(System.String)
  - Shared.Services.Registry.TypeRegister.Item(System.Type)
  - Shared.Services.Registry.TypeRegister.Register(System.Type)
  - Shared.Services.Registry.TypeRegister.Register(System.Type,Shared.Services.Registry.ITypeRelations)
  - Shared.Services.Registry.TypeRegister.RemoveRelation(System.Type,Shared.Services.Registry.RegistryRelation)
  - Shared.Services.Registry.TypeRegister.TryGetParentType(System.Type,System.Type@)
  langs:
  - csharp
  - vb
  name: TypeRegister
  nameWithType: TypeRegister
  fullName: Shared.Services.Registry.TypeRegister
  type: Class
  source:
    remote:
      path: Shared/Services/Registry/TypeRegister.cs
      branch: main
      repo: https://github.com/LivingCryogen/Hazard.git
    id: TypeRegister
    path: ../Shared/Services/Registry/TypeRegister.cs
    startLine: 3
  assemblies:
  - Model
  namespace: Shared.Services.Registry
  summary: >-
    Registers Types with objects by <xref href="Shared.Services.Registry.RegistryRelation" data-throw-if-not-resolved="false"></xref>, enabling look-up at runtime. 

    <p><example>

    E.g. the <xref href="System.Type" data-throw-if-not-resolved="false"></xref> : <code>typeof(<xref href="Model.Entities.Cards.TroopCard" data-throw-if-not-resolved="false"></xref>)</code>, if registered with <code>"TroopCard"</code>,

    can be retreived by:<pre><code class="lang-csharp">Type troopCardType = Registry["TroopCard"];</code></pre> where <code>Registry</code> is an instance of <code>TypeRegister</code>.</example></p>
  example: []
  syntax:
    content: 'public class TypeRegister : ITypeRegister<ITypeRelations>'
    content.vb: Public Class TypeRegister Implements ITypeRegister(Of ITypeRelations)
  inheritance:
  - System.Object
  implements:
  - Shared.Services.Registry.ITypeRegister{Shared.Services.Registry.ITypeRelations}
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: Shared.Services.Registry.TypeRegister.#ctor(Shared.Services.Registry.IRegistryInitializer)
  commentId: M:Shared.Services.Registry.TypeRegister.#ctor(Shared.Services.Registry.IRegistryInitializer)
  id: '#ctor(Shared.Services.Registry.IRegistryInitializer)'
  parent: Shared.Services.Registry.TypeRegister
  langs:
  - csharp
  - vb
  name: TypeRegister(IRegistryInitializer)
  nameWithType: TypeRegister.TypeRegister(IRegistryInitializer)
  fullName: Shared.Services.Registry.TypeRegister.TypeRegister(Shared.Services.Registry.IRegistryInitializer)
  type: Constructor
  source:
    remote:
      path: Shared/Services/Registry/TypeRegister.cs
      branch: main
      repo: https://github.com/LivingCryogen/Hazard.git
    id: .ctor
    path: ../Shared/Services/Registry/TypeRegister.cs
    startLine: 11
  assemblies:
  - Model
  namespace: Shared.Services.Registry
  summary: Constructs the registry and populates it with default entries.
  example: []
  syntax:
    content: public TypeRegister(IRegistryInitializer initializer)
    parameters:
    - id: initializer
      type: Shared.Services.Registry.IRegistryInitializer
      description: Provides default values for initial Registry entries.
    content.vb: Public Sub New(initializer As IRegistryInitializer)
  overload: Shared.Services.Registry.TypeRegister.#ctor*
  nameWithType.vb: TypeRegister.New(IRegistryInitializer)
  fullName.vb: Shared.Services.Registry.TypeRegister.New(Shared.Services.Registry.IRegistryInitializer)
  name.vb: New(IRegistryInitializer)
- uid: Shared.Services.Registry.TypeRegister.Item(System.String)
  commentId: P:Shared.Services.Registry.TypeRegister.Item(System.String)
  id: Item(System.String)
  parent: Shared.Services.Registry.TypeRegister
  langs:
  - csharp
  - vb
  name: this[string]
  nameWithType: TypeRegister.this[string]
  fullName: Shared.Services.Registry.TypeRegister.this[string]
  type: Property
  source:
    remote:
      path: Shared/Services/Registry/TypeRegister.cs
      branch: main
      repo: https://github.com/LivingCryogen/Hazard.git
    id: this[]
    path: ../Shared/Services/Registry/TypeRegister.cs
    startLine: 22
  assemblies:
  - Model
  namespace: Shared.Services.Registry
  summary: Type look-up by name.
  remarks: Assumes unique Type name entries and will return the first found.
  example: []
  syntax:
    content: public Type? this[string lookupName] { get; }
    parameters:
    - id: lookupName
      type: System.String
    return:
      type: System.Type
      description: The type registered under <code class="paramref">registeredName</code>; if none, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
    content.vb: Public ReadOnly Default Property this[](lookupName As String) As Type
  overload: Shared.Services.Registry.TypeRegister.Item*
  implements:
  - Shared.Services.Registry.ITypeRegister{Shared.Services.Registry.ITypeRelations}.Item(System.String)
  nameWithType.vb: TypeRegister.this[](String)
  fullName.vb: Shared.Services.Registry.TypeRegister.this[](String)
  name.vb: this[](String)
- uid: Shared.Services.Registry.TypeRegister.Item(System.Type)
  commentId: P:Shared.Services.Registry.TypeRegister.Item(System.Type)
  id: Item(System.Type)
  parent: Shared.Services.Registry.TypeRegister
  langs:
  - csharp
  - vb
  name: this[Type]
  nameWithType: TypeRegister.this[Type]
  fullName: Shared.Services.Registry.TypeRegister.this[System.Type]
  type: Property
  source:
    remote:
      path: Shared/Services/Registry/TypeRegister.cs
      branch: main
      repo: https://github.com/LivingCryogen/Hazard.git
    id: this[]
    path: ../Shared/Services/Registry/TypeRegister.cs
    startLine: 37
  assemblies:
  - Model
  namespace: Shared.Services.Registry
  summary: Registry entry look-up or set-up by Type.
  example: []
  syntax:
    content: public ITypeRelations? this[Type type] { get; set; }
    parameters:
    - id: type
      type: System.Type
      description: The registered Type.
    return:
      type: Shared.Services.Registry.ITypeRelations
      description: Related objects, or <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a> if <code class="paramref">type</code> is unregistered.
    content.vb: Public Default Property this[](type As Type) As ITypeRelations
  overload: Shared.Services.Registry.TypeRegister.Item*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown when setting an entry with a null value.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown when setting an entry with a value that does not implement <xref href="Shared.Services.Registry.ITypeRelations" data-throw-if-not-resolved="false"></xref>.
  implements:
  - Shared.Services.Registry.ITypeRegister{Shared.Services.Registry.ITypeRelations}.Item(System.Type)
  nameWithType.vb: TypeRegister.this[](Type)
  fullName.vb: Shared.Services.Registry.TypeRegister.this[](System.Type)
  name.vb: this[](Type)
- uid: Shared.Services.Registry.TypeRegister.Item(Shared.Services.Registry.RegistryRelation)
  commentId: P:Shared.Services.Registry.TypeRegister.Item(Shared.Services.Registry.RegistryRelation)
  id: Item(Shared.Services.Registry.RegistryRelation)
  parent: Shared.Services.Registry.TypeRegister
  langs:
  - csharp
  - vb
  name: this[RegistryRelation]
  nameWithType: TypeRegister.this[RegistryRelation]
  fullName: Shared.Services.Registry.TypeRegister.this[Shared.Services.Registry.RegistryRelation]
  type: Property
  source:
    remote:
      path: Shared/Services/Registry/TypeRegister.cs
      branch: main
      repo: https://github.com/LivingCryogen/Hazard.git
    id: this[]
    path: ../Shared/Services/Registry/TypeRegister.cs
    startLine: 52
  assemblies:
  - Model
  namespace: Shared.Services.Registry
  summary: Get all objects registered under a specific <xref href="Shared.Services.Registry.RegistryRelation" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public (Type KeyType, object RelatedObject)[]? this[RegistryRelation relation] { get; }
    parameters:
    - id: relation
      type: Shared.Services.Registry.RegistryRelation
      description: The target <xref href="Shared.Services.Registry.RegistryRelation" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.ValueTuple{System.Type,System.Object}[]
      description: Each Key/Object related by <code class="paramref">relation</code>; or, if none are found, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
    content.vb: Public ReadOnly Default Property this[](relation As RegistryRelation) As (KeyType As Type, RelatedObject As Object)()
  overload: Shared.Services.Registry.TypeRegister.Item*
  implements:
  - Shared.Services.Registry.ITypeRegister{Shared.Services.Registry.ITypeRelations}.Item(Shared.Services.Registry.RegistryRelation)
  nameWithType.vb: TypeRegister.this[](RegistryRelation)
  fullName.vb: Shared.Services.Registry.TypeRegister.this[](Shared.Services.Registry.RegistryRelation)
  name.vb: this[](RegistryRelation)
- uid: Shared.Services.Registry.TypeRegister.Register(System.Type)
  commentId: M:Shared.Services.Registry.TypeRegister.Register(System.Type)
  id: Register(System.Type)
  parent: Shared.Services.Registry.TypeRegister
  langs:
  - csharp
  - vb
  name: Register(Type)
  nameWithType: TypeRegister.Register(Type)
  fullName: Shared.Services.Registry.TypeRegister.Register(System.Type)
  type: Method
  source:
    remote:
      path: Shared/Services/Registry/TypeRegister.cs
      branch: main
      repo: https://github.com/LivingCryogen/Hazard.git
    id: Register
    path: ../Shared/Services/Registry/TypeRegister.cs
    startLine: 70
  assemblies:
  - Model
  namespace: Shared.Services.Registry
  summary: Register a Type.
  remarks: 'This assumes a default registry entry, e.g.: <xref href="System.Type.FullName" data-throw-if-not-resolved="false"></xref> or <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/operators/nameof">nameof</a>(<xref href="System.Type" data-throw-if-not-resolved="false"></xref>) for <xref href="Shared.Services.Registry.RegistryRelation.Name" data-throw-if-not-resolved="false"></xref>.'
  example: []
  syntax:
    content: public void Register(Type type)
    parameters:
    - id: type
      type: System.Type
      description: The type to register.
    content.vb: Public Sub Register(type As Type)
  overload: Shared.Services.Registry.TypeRegister.Register*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if <code class="paramref">type</code> is <code>null</code>.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown if <code class="paramref">type</code> is already registered.
  implements:
  - Shared.Services.Registry.ITypeRegister{Shared.Services.Registry.ITypeRelations}.Register(System.Type)
- uid: Shared.Services.Registry.TypeRegister.Register(System.Type,Shared.Services.Registry.ITypeRelations)
  commentId: M:Shared.Services.Registry.TypeRegister.Register(System.Type,Shared.Services.Registry.ITypeRelations)
  id: Register(System.Type,Shared.Services.Registry.ITypeRelations)
  parent: Shared.Services.Registry.TypeRegister
  langs:
  - csharp
  - vb
  name: Register(Type, ITypeRelations)
  nameWithType: TypeRegister.Register(Type, ITypeRelations)
  fullName: Shared.Services.Registry.TypeRegister.Register(System.Type, Shared.Services.Registry.ITypeRelations)
  type: Method
  source:
    remote:
      path: Shared/Services/Registry/TypeRegister.cs
      branch: main
      repo: https://github.com/LivingCryogen/Hazard.git
    id: Register
    path: ../Shared/Services/Registry/TypeRegister.cs
    startLine: 80
  assemblies:
  - Model
  namespace: Shared.Services.Registry
  summary: Register a Type with a given set of relations to objects.
  example: []
  syntax:
    content: public void Register(Type type, ITypeRelations typeRelations)
    parameters:
    - id: type
      type: System.Type
      description: The type to register.
    - id: typeRelations
      type: Shared.Services.Registry.ITypeRelations
      description: The relations to register to <code class="paramref">type</code>.
    content.vb: Public Sub Register(type As Type, typeRelations As ITypeRelations)
  overload: Shared.Services.Registry.TypeRegister.Register*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if either parameter, <code class="paramref">type</code> or <code class="paramref">typeRelations</code>, is <code>null</code>.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown if <code class="paramref">type</code> is already registered.
  implements:
  - Shared.Services.Registry.ITypeRegister{Shared.Services.Registry.ITypeRelations}.Register(System.Type,Shared.Services.Registry.ITypeRelations)
- uid: Shared.Services.Registry.TypeRegister.AddRelation(System.Type,System.ValueTuple{System.Object,Shared.Services.Registry.RegistryRelation})
  commentId: M:Shared.Services.Registry.TypeRegister.AddRelation(System.Type,System.ValueTuple{System.Object,Shared.Services.Registry.RegistryRelation})
  id: AddRelation(System.Type,System.ValueTuple{System.Object,Shared.Services.Registry.RegistryRelation})
  parent: Shared.Services.Registry.TypeRegister
  langs:
  - csharp
  - vb
  name: AddRelation(Type, (object, RegistryRelation))
  nameWithType: TypeRegister.AddRelation(Type, (object, RegistryRelation))
  fullName: Shared.Services.Registry.TypeRegister.AddRelation(System.Type, (object, Shared.Services.Registry.RegistryRelation))
  type: Method
  source:
    remote:
      path: Shared/Services/Registry/TypeRegister.cs
      branch: main
      repo: https://github.com/LivingCryogen/Hazard.git
    id: AddRelation
    path: ../Shared/Services/Registry/TypeRegister.cs
    startLine: 90
  assemblies:
  - Model
  namespace: Shared.Services.Registry
  example: []
  syntax:
    content: public void AddRelation(Type type, (object, RegistryRelation) newRelation)
    parameters:
    - id: type
      type: System.Type
    - id: newRelation
      type: System.ValueTuple{System.Object,Shared.Services.Registry.RegistryRelation}
    content.vb: Public Sub AddRelation(type As Type, newRelation As (Object, RegistryRelation))
  overload: Shared.Services.Registry.TypeRegister.AddRelation*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The registered type.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown if <code class="paramref">type</code> is already registered.
  implements:
  - Shared.Services.Registry.ITypeRegister{Shared.Services.Registry.ITypeRelations}.AddRelation(System.Type,System.ValueTuple{System.Object,Shared.Services.Registry.RegistryRelation})
  nameWithType.vb: TypeRegister.AddRelation(Type, (Object, RegistryRelation))
  fullName.vb: Shared.Services.Registry.TypeRegister.AddRelation(System.Type, (Object, Shared.Services.Registry.RegistryRelation))
  name.vb: AddRelation(Type, (Object, RegistryRelation))
- uid: Shared.Services.Registry.TypeRegister.RemoveRelation(System.Type,Shared.Services.Registry.RegistryRelation)
  commentId: M:Shared.Services.Registry.TypeRegister.RemoveRelation(System.Type,Shared.Services.Registry.RegistryRelation)
  id: RemoveRelation(System.Type,Shared.Services.Registry.RegistryRelation)
  parent: Shared.Services.Registry.TypeRegister
  langs:
  - csharp
  - vb
  name: RemoveRelation(Type, RegistryRelation)
  nameWithType: TypeRegister.RemoveRelation(Type, RegistryRelation)
  fullName: Shared.Services.Registry.TypeRegister.RemoveRelation(System.Type, Shared.Services.Registry.RegistryRelation)
  type: Method
  source:
    remote:
      path: Shared/Services/Registry/TypeRegister.cs
      branch: main
      repo: https://github.com/LivingCryogen/Hazard.git
    id: RemoveRelation
    path: ../Shared/Services/Registry/TypeRegister.cs
    startLine: 104
  assemblies:
  - Model
  namespace: Shared.Services.Registry
  summary: Remove an object relation from a pre-existing registry entry. If the resulting entry has an empty set of object relations, it is entirely removed via <xref href="Shared.Services.Registry.TypeRegister.DeRegister(System.Type)" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public void RemoveRelation(Type type, RegistryRelation targetRelation)
    parameters:
    - id: type
      type: System.Type
      description: The registered type.
    - id: targetRelation
      type: Shared.Services.Registry.RegistryRelation
      description: The relation to remove, along with its paired <xref href="System.Object" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Sub RemoveRelation(type As Type, targetRelation As RegistryRelation)
  overload: Shared.Services.Registry.TypeRegister.RemoveRelation*
  exceptions:
  - type: System.Collections.Generic.KeyNotFoundException
    commentId: T:System.Collections.Generic.KeyNotFoundException
    description: Thrown if <code class="paramref">type</code> is not found in the registry.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown if <code class="paramref">targetRelation</code> is not registered to <code class="paramref">type</code>.
  implements:
  - Shared.Services.Registry.ITypeRegister{Shared.Services.Registry.ITypeRelations}.RemoveRelation(System.Type,Shared.Services.Registry.RegistryRelation)
- uid: Shared.Services.Registry.TypeRegister.DeRegister(System.Type)
  commentId: M:Shared.Services.Registry.TypeRegister.DeRegister(System.Type)
  id: DeRegister(System.Type)
  parent: Shared.Services.Registry.TypeRegister
  langs:
  - csharp
  - vb
  name: DeRegister(Type)
  nameWithType: TypeRegister.DeRegister(Type)
  fullName: Shared.Services.Registry.TypeRegister.DeRegister(System.Type)
  type: Method
  source:
    remote:
      path: Shared/Services/Registry/TypeRegister.cs
      branch: main
      repo: https://github.com/LivingCryogen/Hazard.git
    id: DeRegister
    path: ../Shared/Services/Registry/TypeRegister.cs
    startLine: 121
  assemblies:
  - Model
  namespace: Shared.Services.Registry
  summary: Remove a Type's entry, including any contained object relations.
  example: []
  syntax:
    content: public void DeRegister(Type type)
    parameters:
    - id: type
      type: System.Type
      description: The type to remove.
    content.vb: Public Sub DeRegister(type As Type)
  overload: Shared.Services.Registry.TypeRegister.DeRegister*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if <code class="paramref">type</code> is <code>null</code>.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown if <code class="paramref">type</code> is not found in the registry.
  implements:
  - Shared.Services.Registry.ITypeRegister{Shared.Services.Registry.ITypeRelations}.DeRegister(System.Type)
- uid: Shared.Services.Registry.TypeRegister.Clear
  commentId: M:Shared.Services.Registry.TypeRegister.Clear
  id: Clear
  parent: Shared.Services.Registry.TypeRegister
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: TypeRegister.Clear()
  fullName: Shared.Services.Registry.TypeRegister.Clear()
  type: Method
  source:
    remote:
      path: Shared/Services/Registry/TypeRegister.cs
      branch: main
      repo: https://github.com/LivingCryogen/Hazard.git
    id: Clear
    path: ../Shared/Services/Registry/TypeRegister.cs
    startLine: 131
  assemblies:
  - Model
  namespace: Shared.Services.Registry
  summary: If the registry has entries, delete them.
  example: []
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear()
  overload: Shared.Services.Registry.TypeRegister.Clear*
  implements:
  - Shared.Services.Registry.ITypeRegister{Shared.Services.Registry.ITypeRelations}.Clear
- uid: Shared.Services.Registry.TypeRegister.TryGetParentType(System.Type,System.Type@)
  commentId: M:Shared.Services.Registry.TypeRegister.TryGetParentType(System.Type,System.Type@)
  id: TryGetParentType(System.Type,System.Type@)
  parent: Shared.Services.Registry.TypeRegister
  langs:
  - csharp
  - vb
  name: TryGetParentType(Type, out Type?)
  nameWithType: TypeRegister.TryGetParentType(Type, out Type?)
  fullName: Shared.Services.Registry.TypeRegister.TryGetParentType(System.Type, out System.Type?)
  type: Method
  source:
    remote:
      path: Shared/Services/Registry/TypeRegister.cs
      branch: main
      repo: https://github.com/LivingCryogen/Hazard.git
    id: TryGetParentType
    path: ../Shared/Services/Registry/TypeRegister.cs
    startLine: 137
  assemblies:
  - Model
  namespace: Shared.Services.Registry
  summary: Checks whether a registered type has a registered parent, and returns it if so.
  example: []
  syntax:
    content: public bool TryGetParentType(Type registeredType, out Type? parentType)
    parameters:
    - id: registeredType
      type: System.Type
      description: The type already registered.
    - id: parentType
      type: System.Type
      description: The type registered as parent of <code class="paramref">registeredType</code>.
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if <code class="paramref">registeredType</code> has a registered parent type in the registry; otherwise, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>.
    content.vb: Public Function TryGetParentType(registeredType As Type, parentType As Type) As Boolean
  overload: Shared.Services.Registry.TypeRegister.TryGetParentType*
  implements:
  - Shared.Services.Registry.ITypeRegister{Shared.Services.Registry.ITypeRelations}.TryGetParentType(System.Type,System.Type@)
  nameWithType.vb: TypeRegister.TryGetParentType(Type, Type)
  fullName.vb: Shared.Services.Registry.TypeRegister.TryGetParentType(System.Type, System.Type)
  name.vb: TryGetParentType(Type, Type)
references:
- uid: Shared.Services.Registry.RegistryRelation
  commentId: T:Shared.Services.Registry.RegistryRelation
  parent: Shared.Services.Registry
  href: Shared.Services.Registry.RegistryRelation.html
  name: RegistryRelation
  nameWithType: RegistryRelation
  fullName: Shared.Services.Registry.RegistryRelation
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.type
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Model.Entities.Cards.TroopCard
  commentId: T:Model.Entities.Cards.TroopCard
  href: Model.Entities.Cards.TroopCard.html
  name: TroopCard
  nameWithType: TroopCard
  fullName: Model.Entities.Cards.TroopCard
- uid: Shared.Services.Registry
  commentId: N:Shared.Services.Registry
  href: Shared.html
  name: Shared.Services.Registry
  nameWithType: Shared.Services.Registry
  fullName: Shared.Services.Registry
  spec.csharp:
  - uid: Shared
    name: Shared
    href: Shared.html
  - name: .
  - uid: Shared.Services
    name: Services
    href: Shared.Services.html
  - name: .
  - uid: Shared.Services.Registry
    name: Registry
    href: Shared.Services.Registry.html
  spec.vb:
  - uid: Shared
    name: Shared
    href: Shared.html
  - name: .
  - uid: Shared.Services
    name: Services
    href: Shared.Services.html
  - name: .
  - uid: Shared.Services.Registry
    name: Registry
    href: Shared.Services.Registry.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: Shared.Services.Registry.ITypeRegister{Shared.Services.Registry.ITypeRelations}
  commentId: T:Shared.Services.Registry.ITypeRegister{Shared.Services.Registry.ITypeRelations}
  parent: Shared.Services.Registry
  definition: Shared.Services.Registry.ITypeRegister`1
  href: Shared.Services.Registry.ITypeRegister-1.html
  name: ITypeRegister<ITypeRelations>
  nameWithType: ITypeRegister<ITypeRelations>
  fullName: Shared.Services.Registry.ITypeRegister<Shared.Services.Registry.ITypeRelations>
  nameWithType.vb: ITypeRegister(Of ITypeRelations)
  fullName.vb: Shared.Services.Registry.ITypeRegister(Of Shared.Services.Registry.ITypeRelations)
  name.vb: ITypeRegister(Of ITypeRelations)
  spec.csharp:
  - uid: Shared.Services.Registry.ITypeRegister`1
    name: ITypeRegister
    href: Shared.Services.Registry.ITypeRegister-1.html
  - name: <
  - uid: Shared.Services.Registry.ITypeRelations
    name: ITypeRelations
    href: Shared.Services.Registry.ITypeRelations.html
  - name: '>'
  spec.vb:
  - uid: Shared.Services.Registry.ITypeRegister`1
    name: ITypeRegister
    href: Shared.Services.Registry.ITypeRegister-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: Shared.Services.Registry.ITypeRelations
    name: ITypeRelations
    href: Shared.Services.Registry.ITypeRelations.html
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Shared.Services.Registry.ITypeRegister`1
  commentId: T:Shared.Services.Registry.ITypeRegister`1
  href: Shared.Services.Registry.ITypeRegister-1.html
  name: ITypeRegister<T>
  nameWithType: ITypeRegister<T>
  fullName: Shared.Services.Registry.ITypeRegister<T>
  nameWithType.vb: ITypeRegister(Of T)
  fullName.vb: Shared.Services.Registry.ITypeRegister(Of T)
  name.vb: ITypeRegister(Of T)
  spec.csharp:
  - uid: Shared.Services.Registry.ITypeRegister`1
    name: ITypeRegister
    href: Shared.Services.Registry.ITypeRegister-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: Shared.Services.Registry.ITypeRegister`1
    name: ITypeRegister
    href: Shared.Services.Registry.ITypeRegister-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Shared.Services.Registry.TypeRegister.#ctor*
  commentId: Overload:Shared.Services.Registry.TypeRegister.#ctor
  href: Shared.Services.Registry.TypeRegister.html#Shared_Services_Registry_TypeRegister__ctor_Shared_Services_Registry_IRegistryInitializer_
  name: TypeRegister
  nameWithType: TypeRegister.TypeRegister
  fullName: Shared.Services.Registry.TypeRegister.TypeRegister
  nameWithType.vb: TypeRegister.New
  fullName.vb: Shared.Services.Registry.TypeRegister.New
  name.vb: New
- uid: Shared.Services.Registry.IRegistryInitializer
  commentId: T:Shared.Services.Registry.IRegistryInitializer
  parent: Shared.Services.Registry
  href: Shared.Services.Registry.IRegistryInitializer.html
  name: IRegistryInitializer
  nameWithType: IRegistryInitializer
  fullName: Shared.Services.Registry.IRegistryInitializer
- uid: Shared.Services.Registry.RegistryRelation.Name
  commentId: F:Shared.Services.Registry.RegistryRelation.Name
  href: Shared.Services.Registry.RegistryRelation.html#Shared_Services_Registry_RegistryRelation_Name
  name: Name
  nameWithType: RegistryRelation.Name
  fullName: Shared.Services.Registry.RegistryRelation.Name
- uid: Shared.Services.Registry.TypeRegister._typeRelata
  commentId: F:Shared.Services.Registry.TypeRegister._typeRelata
  name: _typeRelata
  nameWithType: TypeRegister._typeRelata
  fullName: Shared.Services.Registry.TypeRegister._typeRelata
- uid: Shared.Services.Registry.ITypeRelations
  commentId: T:Shared.Services.Registry.ITypeRelations
  parent: Shared.Services.Registry
  href: Shared.Services.Registry.ITypeRelations.html
  name: ITypeRelations
  nameWithType: ITypeRelations
  fullName: Shared.Services.Registry.ITypeRelations
- uid: Shared.Services.Registry.TypeRegister.Item*
  commentId: Overload:Shared.Services.Registry.TypeRegister.Item
  href: Shared.Services.Registry.TypeRegister.html#Shared_Services_Registry_TypeRegister_Item_System_String_
  name: this
  nameWithType: TypeRegister.this
  fullName: Shared.Services.Registry.TypeRegister.this
  nameWithType.vb: TypeRegister.this[]
  fullName.vb: Shared.Services.Registry.TypeRegister.this[]
  name.vb: this[]
- uid: Shared.Services.Registry.ITypeRegister{Shared.Services.Registry.ITypeRelations}.Item(System.String)
  commentId: P:Shared.Services.Registry.ITypeRegister{Shared.Services.Registry.ITypeRelations}.Item(System.String)
  parent: Shared.Services.Registry.ITypeRegister{Shared.Services.Registry.ITypeRelations}
  definition: Shared.Services.Registry.ITypeRegister`1.Item(System.String)
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: this[string]
  nameWithType: ITypeRegister<ITypeRelations>.this[string]
  fullName: Shared.Services.Registry.ITypeRegister<Shared.Services.Registry.ITypeRelations>.this[string]
  nameWithType.vb: ITypeRegister(Of ITypeRelations).this[](String)
  fullName.vb: Shared.Services.Registry.ITypeRegister(Of Shared.Services.Registry.ITypeRelations).this[](String)
  name.vb: this[](String)
  spec.csharp:
  - name: this
  - name: '['
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ']'
  spec.vb:
  - uid: Shared.Services.Registry.ITypeRegister{Shared.Services.Registry.ITypeRelations}.Item(System.String)
    name: this[]
    href: Shared.Services.Registry.ITypeRegister-1.html#Shared_Services_Registry_ITypeRegister_1_Item_System_String_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: Shared.Services.Registry.ITypeRegister`1.Item(System.String)
  commentId: P:Shared.Services.Registry.ITypeRegister`1.Item(System.String)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: this[string]
  nameWithType: ITypeRegister<T>.this[string]
  fullName: Shared.Services.Registry.ITypeRegister<T>.this[string]
  nameWithType.vb: ITypeRegister(Of T).this[](String)
  fullName.vb: Shared.Services.Registry.ITypeRegister(Of T).this[](String)
  name.vb: this[](String)
  spec.csharp:
  - name: this
  - name: '['
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ']'
  spec.vb:
  - uid: Shared.Services.Registry.ITypeRegister`1.Item(System.String)
    name: this[]
    href: Shared.Services.Registry.ITypeRegister-1.html#Shared_Services_Registry_ITypeRegister_1_Item_System_String_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentnullexception
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentexception
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: Shared.Services.Registry.ITypeRegister{Shared.Services.Registry.ITypeRelations}.Item(System.Type)
  commentId: P:Shared.Services.Registry.ITypeRegister{Shared.Services.Registry.ITypeRelations}.Item(System.Type)
  parent: Shared.Services.Registry.ITypeRegister{Shared.Services.Registry.ITypeRelations}
  definition: Shared.Services.Registry.ITypeRegister`1.Item(System.Type)
  href: https://learn.microsoft.com/dotnet/api/system.type
  name: this[Type]
  nameWithType: ITypeRegister<ITypeRelations>.this[Type]
  fullName: Shared.Services.Registry.ITypeRegister<Shared.Services.Registry.ITypeRelations>.this[System.Type]
  nameWithType.vb: ITypeRegister(Of ITypeRelations).this[](Type)
  fullName.vb: Shared.Services.Registry.ITypeRegister(Of Shared.Services.Registry.ITypeRelations).this[](System.Type)
  name.vb: this[](Type)
  spec.csharp:
  - name: this
  - name: '['
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: ']'
  spec.vb:
  - uid: Shared.Services.Registry.ITypeRegister{Shared.Services.Registry.ITypeRelations}.Item(System.Type)
    name: this[]
    href: Shared.Services.Registry.ITypeRegister-1.html#Shared_Services_Registry_ITypeRegister_1_Item_System_Type_
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: )
- uid: Shared.Services.Registry.ITypeRegister`1.Item(System.Type)
  commentId: P:Shared.Services.Registry.ITypeRegister`1.Item(System.Type)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.type
  name: this[Type]
  nameWithType: ITypeRegister<T>.this[Type]
  fullName: Shared.Services.Registry.ITypeRegister<T>.this[System.Type]
  nameWithType.vb: ITypeRegister(Of T).this[](Type)
  fullName.vb: Shared.Services.Registry.ITypeRegister(Of T).this[](System.Type)
  name.vb: this[](Type)
  spec.csharp:
  - name: this
  - name: '['
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: ']'
  spec.vb:
  - uid: Shared.Services.Registry.ITypeRegister`1.Item(System.Type)
    name: this[]
    href: Shared.Services.Registry.ITypeRegister-1.html#Shared_Services_Registry_ITypeRegister_1_Item_System_Type_
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: )
- uid: Shared.Services.Registry.ITypeRegister{Shared.Services.Registry.ITypeRelations}.Item(Shared.Services.Registry.RegistryRelation)
  commentId: P:Shared.Services.Registry.ITypeRegister{Shared.Services.Registry.ITypeRelations}.Item(Shared.Services.Registry.RegistryRelation)
  parent: Shared.Services.Registry.ITypeRegister{Shared.Services.Registry.ITypeRelations}
  definition: Shared.Services.Registry.ITypeRegister`1.Item(Shared.Services.Registry.RegistryRelation)
  href: Shared.Services.Registry.RegistryRelation.html
  name: this[RegistryRelation]
  nameWithType: ITypeRegister<ITypeRelations>.this[RegistryRelation]
  fullName: Shared.Services.Registry.ITypeRegister<Shared.Services.Registry.ITypeRelations>.this[Shared.Services.Registry.RegistryRelation]
  nameWithType.vb: ITypeRegister(Of ITypeRelations).this[](RegistryRelation)
  fullName.vb: Shared.Services.Registry.ITypeRegister(Of Shared.Services.Registry.ITypeRelations).this[](Shared.Services.Registry.RegistryRelation)
  name.vb: this[](RegistryRelation)
  spec.csharp:
  - name: this
  - name: '['
  - uid: Shared.Services.Registry.RegistryRelation
    name: RegistryRelation
    href: Shared.Services.Registry.RegistryRelation.html
  - name: ']'
  spec.vb:
  - uid: Shared.Services.Registry.ITypeRegister{Shared.Services.Registry.ITypeRelations}.Item(Shared.Services.Registry.RegistryRelation)
    name: this[]
    href: Shared.Services.Registry.ITypeRegister-1.html#Shared_Services_Registry_ITypeRegister_1_Item_Shared_Services_Registry_RegistryRelation_
  - name: (
  - uid: Shared.Services.Registry.RegistryRelation
    name: RegistryRelation
    href: Shared.Services.Registry.RegistryRelation.html
  - name: )
- uid: System.ValueTuple{System.Type,System.Object}[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.type
  name: (Type KeyType, object RelatedObject)[]
  nameWithType: (Type KeyType, object RelatedObject)[]
  fullName: (System.Type KeyType, object RelatedObject)[]
  nameWithType.vb: (KeyType As Type, RelatedObject As Object)()
  fullName.vb: (KeyType As System.Type, RelatedObject As Object)()
  name.vb: (KeyType As Type, RelatedObject As Object)()
  spec.csharp:
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: " "
  - uid: System.ValueTuple{System.Type,System.Object}.KeyType
    name: KeyType
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.type,system.object-.keytype
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: " "
  - uid: System.ValueTuple{System.Type,System.Object}.RelatedObject
    name: RelatedObject
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.type,system.object-.relatedobject
  - name: )
  - name: '['
  - name: ']'
  spec.vb:
  - name: (
  - uid: System.ValueTuple{System.Type,System.Object}.KeyType
    name: KeyType
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.type,system.object-.keytype
  - name: " "
  - name: As
  - name: " "
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: ','
  - name: " "
  - uid: System.ValueTuple{System.Type,System.Object}.RelatedObject
    name: RelatedObject
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.type,system.object-.relatedobject
  - name: " "
  - name: As
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  - name: (
  - name: )
- uid: Shared.Services.Registry.ITypeRegister`1.Item(Shared.Services.Registry.RegistryRelation)
  commentId: P:Shared.Services.Registry.ITypeRegister`1.Item(Shared.Services.Registry.RegistryRelation)
  href: Shared.Services.Registry.RegistryRelation.html
  name: this[RegistryRelation]
  nameWithType: ITypeRegister<T>.this[RegistryRelation]
  fullName: Shared.Services.Registry.ITypeRegister<T>.this[Shared.Services.Registry.RegistryRelation]
  nameWithType.vb: ITypeRegister(Of T).this[](RegistryRelation)
  fullName.vb: Shared.Services.Registry.ITypeRegister(Of T).this[](Shared.Services.Registry.RegistryRelation)
  name.vb: this[](RegistryRelation)
  spec.csharp:
  - name: this
  - name: '['
  - uid: Shared.Services.Registry.RegistryRelation
    name: RegistryRelation
    href: Shared.Services.Registry.RegistryRelation.html
  - name: ']'
  spec.vb:
  - uid: Shared.Services.Registry.ITypeRegister`1.Item(Shared.Services.Registry.RegistryRelation)
    name: this[]
    href: Shared.Services.Registry.ITypeRegister-1.html#Shared_Services_Registry_ITypeRegister_1_Item_Shared_Services_Registry_RegistryRelation_
  - name: (
  - uid: Shared.Services.Registry.RegistryRelation
    name: RegistryRelation
    href: Shared.Services.Registry.RegistryRelation.html
  - name: )
- uid: System.Type.FullName
  commentId: P:System.Type.FullName
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.type.fullname
  name: FullName
  nameWithType: Type.FullName
  fullName: System.Type.FullName
- uid: Shared.Services.Registry.TypeRegister.Register*
  commentId: Overload:Shared.Services.Registry.TypeRegister.Register
  href: Shared.Services.Registry.TypeRegister.html#Shared_Services_Registry_TypeRegister_Register_System_Type_
  name: Register
  nameWithType: TypeRegister.Register
  fullName: Shared.Services.Registry.TypeRegister.Register
- uid: Shared.Services.Registry.ITypeRegister{Shared.Services.Registry.ITypeRelations}.Register(System.Type)
  commentId: M:Shared.Services.Registry.ITypeRegister{Shared.Services.Registry.ITypeRelations}.Register(System.Type)
  parent: Shared.Services.Registry.ITypeRegister{Shared.Services.Registry.ITypeRelations}
  definition: Shared.Services.Registry.ITypeRegister`1.Register(System.Type)
  href: Shared.Services.Registry.ITypeRegister-1.html#Shared_Services_Registry_ITypeRegister_1_Register_System_Type_
  name: Register(Type)
  nameWithType: ITypeRegister<ITypeRelations>.Register(Type)
  fullName: Shared.Services.Registry.ITypeRegister<Shared.Services.Registry.ITypeRelations>.Register(System.Type)
  nameWithType.vb: ITypeRegister(Of ITypeRelations).Register(Type)
  fullName.vb: Shared.Services.Registry.ITypeRegister(Of Shared.Services.Registry.ITypeRelations).Register(System.Type)
  spec.csharp:
  - uid: Shared.Services.Registry.ITypeRegister{Shared.Services.Registry.ITypeRelations}.Register(System.Type)
    name: Register
    href: Shared.Services.Registry.ITypeRegister-1.html#Shared_Services_Registry_ITypeRegister_1_Register_System_Type_
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: )
  spec.vb:
  - uid: Shared.Services.Registry.ITypeRegister{Shared.Services.Registry.ITypeRelations}.Register(System.Type)
    name: Register
    href: Shared.Services.Registry.ITypeRegister-1.html#Shared_Services_Registry_ITypeRegister_1_Register_System_Type_
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: )
- uid: Shared.Services.Registry.ITypeRegister`1.Register(System.Type)
  commentId: M:Shared.Services.Registry.ITypeRegister`1.Register(System.Type)
  isExternal: true
  href: Shared.Services.Registry.ITypeRegister-1.html#Shared_Services_Registry_ITypeRegister_1_Register_System_Type_
  name: Register(Type)
  nameWithType: ITypeRegister<T>.Register(Type)
  fullName: Shared.Services.Registry.ITypeRegister<T>.Register(System.Type)
  nameWithType.vb: ITypeRegister(Of T).Register(Type)
  fullName.vb: Shared.Services.Registry.ITypeRegister(Of T).Register(System.Type)
  spec.csharp:
  - uid: Shared.Services.Registry.ITypeRegister`1.Register(System.Type)
    name: Register
    href: Shared.Services.Registry.ITypeRegister-1.html#Shared_Services_Registry_ITypeRegister_1_Register_System_Type_
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: )
  spec.vb:
  - uid: Shared.Services.Registry.ITypeRegister`1.Register(System.Type)
    name: Register
    href: Shared.Services.Registry.ITypeRegister-1.html#Shared_Services_Registry_ITypeRegister_1_Register_System_Type_
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: )
- uid: Shared.Services.Registry.ITypeRegister{Shared.Services.Registry.ITypeRelations}.Register(System.Type,Shared.Services.Registry.ITypeRelations)
  commentId: M:Shared.Services.Registry.ITypeRegister{Shared.Services.Registry.ITypeRelations}.Register(System.Type,Shared.Services.Registry.ITypeRelations)
  parent: Shared.Services.Registry.ITypeRegister{Shared.Services.Registry.ITypeRelations}
  definition: Shared.Services.Registry.ITypeRegister`1.Register(System.Type,`0)
  href: Shared.Services.Registry.ITypeRegister-1.html#Shared_Services_Registry_ITypeRegister_1_Register_System_Type__0_
  name: Register(Type, ITypeRelations)
  nameWithType: ITypeRegister<ITypeRelations>.Register(Type, ITypeRelations)
  fullName: Shared.Services.Registry.ITypeRegister<Shared.Services.Registry.ITypeRelations>.Register(System.Type, Shared.Services.Registry.ITypeRelations)
  nameWithType.vb: ITypeRegister(Of ITypeRelations).Register(Type, ITypeRelations)
  fullName.vb: Shared.Services.Registry.ITypeRegister(Of Shared.Services.Registry.ITypeRelations).Register(System.Type, Shared.Services.Registry.ITypeRelations)
  spec.csharp:
  - uid: Shared.Services.Registry.ITypeRegister{Shared.Services.Registry.ITypeRelations}.Register(System.Type,Shared.Services.Registry.ITypeRelations)
    name: Register
    href: Shared.Services.Registry.ITypeRegister-1.html#Shared_Services_Registry_ITypeRegister_1_Register_System_Type__0_
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: ','
  - name: " "
  - uid: Shared.Services.Registry.ITypeRelations
    name: ITypeRelations
    href: Shared.Services.Registry.ITypeRelations.html
  - name: )
  spec.vb:
  - uid: Shared.Services.Registry.ITypeRegister{Shared.Services.Registry.ITypeRelations}.Register(System.Type,Shared.Services.Registry.ITypeRelations)
    name: Register
    href: Shared.Services.Registry.ITypeRegister-1.html#Shared_Services_Registry_ITypeRegister_1_Register_System_Type__0_
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: ','
  - name: " "
  - uid: Shared.Services.Registry.ITypeRelations
    name: ITypeRelations
    href: Shared.Services.Registry.ITypeRelations.html
  - name: )
- uid: Shared.Services.Registry.ITypeRegister`1.Register(System.Type,`0)
  commentId: M:Shared.Services.Registry.ITypeRegister`1.Register(System.Type,`0)
  isExternal: true
  href: Shared.Services.Registry.ITypeRegister-1.html#Shared_Services_Registry_ITypeRegister_1_Register_System_Type__0_
  name: Register(Type, T)
  nameWithType: ITypeRegister<T>.Register(Type, T)
  fullName: Shared.Services.Registry.ITypeRegister<T>.Register(System.Type, T)
  nameWithType.vb: ITypeRegister(Of T).Register(Type, T)
  fullName.vb: Shared.Services.Registry.ITypeRegister(Of T).Register(System.Type, T)
  spec.csharp:
  - uid: Shared.Services.Registry.ITypeRegister`1.Register(System.Type,`0)
    name: Register
    href: Shared.Services.Registry.ITypeRegister-1.html#Shared_Services_Registry_ITypeRegister_1_Register_System_Type__0_
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: ','
  - name: " "
  - name: T
  - name: )
  spec.vb:
  - uid: Shared.Services.Registry.ITypeRegister`1.Register(System.Type,`0)
    name: Register
    href: Shared.Services.Registry.ITypeRegister-1.html#Shared_Services_Registry_ITypeRegister_1_Register_System_Type__0_
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: ','
  - name: " "
  - name: T
  - name: )
- uid: Shared.Services.Registry.TypeRegister.AddRelation*
  commentId: Overload:Shared.Services.Registry.TypeRegister.AddRelation
  href: Shared.Services.Registry.TypeRegister.html#Shared_Services_Registry_TypeRegister_AddRelation_System_Type_System_ValueTuple_System_Object_Shared_Services_Registry_RegistryRelation__
  name: AddRelation
  nameWithType: TypeRegister.AddRelation
  fullName: Shared.Services.Registry.TypeRegister.AddRelation
- uid: Shared.Services.Registry.ITypeRegister{Shared.Services.Registry.ITypeRelations}.AddRelation(System.Type,System.ValueTuple{System.Object,Shared.Services.Registry.RegistryRelation})
  commentId: M:Shared.Services.Registry.ITypeRegister{Shared.Services.Registry.ITypeRelations}.AddRelation(System.Type,System.ValueTuple{System.Object,Shared.Services.Registry.RegistryRelation})
  parent: Shared.Services.Registry.ITypeRegister{Shared.Services.Registry.ITypeRelations}
  definition: Shared.Services.Registry.ITypeRegister`1.AddRelation(System.Type,System.ValueTuple{System.Object,Shared.Services.Registry.RegistryRelation})
  href: Shared.Services.Registry.ITypeRegister-1.html#Shared_Services_Registry_ITypeRegister_1_AddRelation_System_Type_System_ValueTuple_System_Object_Shared_Services_Registry_RegistryRelation__
  name: AddRelation(Type, (object, RegistryRelation))
  nameWithType: ITypeRegister<ITypeRelations>.AddRelation(Type, (object, RegistryRelation))
  fullName: Shared.Services.Registry.ITypeRegister<Shared.Services.Registry.ITypeRelations>.AddRelation(System.Type, (object, Shared.Services.Registry.RegistryRelation))
  nameWithType.vb: ITypeRegister(Of ITypeRelations).AddRelation(Type, (Object, RegistryRelation))
  fullName.vb: Shared.Services.Registry.ITypeRegister(Of Shared.Services.Registry.ITypeRelations).AddRelation(System.Type, (Object, Shared.Services.Registry.RegistryRelation))
  name.vb: AddRelation(Type, (Object, RegistryRelation))
  spec.csharp:
  - uid: Shared.Services.Registry.ITypeRegister{Shared.Services.Registry.ITypeRelations}.AddRelation(System.Type,System.ValueTuple{System.Object,Shared.Services.Registry.RegistryRelation})
    name: AddRelation
    href: Shared.Services.Registry.ITypeRegister-1.html#Shared_Services_Registry_ITypeRegister_1_AddRelation_System_Type_System_ValueTuple_System_Object_Shared_Services_Registry_RegistryRelation__
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: ','
  - name: " "
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: Shared.Services.Registry.RegistryRelation
    name: RegistryRelation
    href: Shared.Services.Registry.RegistryRelation.html
  - name: )
  - name: )
  spec.vb:
  - uid: Shared.Services.Registry.ITypeRegister{Shared.Services.Registry.ITypeRelations}.AddRelation(System.Type,System.ValueTuple{System.Object,Shared.Services.Registry.RegistryRelation})
    name: AddRelation
    href: Shared.Services.Registry.ITypeRegister-1.html#Shared_Services_Registry_ITypeRegister_1_AddRelation_System_Type_System_ValueTuple_System_Object_Shared_Services_Registry_RegistryRelation__
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: ','
  - name: " "
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: Shared.Services.Registry.RegistryRelation
    name: RegistryRelation
    href: Shared.Services.Registry.RegistryRelation.html
  - name: )
  - name: )
- uid: System.ValueTuple{System.Object,Shared.Services.Registry.RegistryRelation}
  commentId: T:System.ValueTuple{System.Object,Shared.Services.Registry.RegistryRelation}
  parent: System
  definition: System.ValueTuple`2
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: (object, RegistryRelation)
  nameWithType: (object, RegistryRelation)
  fullName: (object, Shared.Services.Registry.RegistryRelation)
  nameWithType.vb: (Object, RegistryRelation)
  fullName.vb: (Object, Shared.Services.Registry.RegistryRelation)
  name.vb: (Object, RegistryRelation)
  spec.csharp:
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: Shared.Services.Registry.RegistryRelation
    name: RegistryRelation
    href: Shared.Services.Registry.RegistryRelation.html
  - name: )
  spec.vb:
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: Shared.Services.Registry.RegistryRelation
    name: RegistryRelation
    href: Shared.Services.Registry.RegistryRelation.html
  - name: )
- uid: Shared.Services.Registry.ITypeRegister`1.AddRelation(System.Type,System.ValueTuple{System.Object,Shared.Services.Registry.RegistryRelation})
  commentId: M:Shared.Services.Registry.ITypeRegister`1.AddRelation(System.Type,System.ValueTuple{System.Object,Shared.Services.Registry.RegistryRelation})
  isExternal: true
  href: Shared.Services.Registry.ITypeRegister-1.html#Shared_Services_Registry_ITypeRegister_1_AddRelation_System_Type_System_ValueTuple_System_Object_Shared_Services_Registry_RegistryRelation__
  name: AddRelation(Type, (object, RegistryRelation))
  nameWithType: ITypeRegister<T>.AddRelation(Type, (object, RegistryRelation))
  fullName: Shared.Services.Registry.ITypeRegister<T>.AddRelation(System.Type, (object, Shared.Services.Registry.RegistryRelation))
  nameWithType.vb: ITypeRegister(Of T).AddRelation(Type, (Object, RegistryRelation))
  fullName.vb: Shared.Services.Registry.ITypeRegister(Of T).AddRelation(System.Type, (Object, Shared.Services.Registry.RegistryRelation))
  name.vb: AddRelation(Type, (Object, RegistryRelation))
  spec.csharp:
  - uid: Shared.Services.Registry.ITypeRegister`1.AddRelation(System.Type,System.ValueTuple{System.Object,Shared.Services.Registry.RegistryRelation})
    name: AddRelation
    href: Shared.Services.Registry.ITypeRegister-1.html#Shared_Services_Registry_ITypeRegister_1_AddRelation_System_Type_System_ValueTuple_System_Object_Shared_Services_Registry_RegistryRelation__
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: ','
  - name: " "
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: Shared.Services.Registry.RegistryRelation
    name: RegistryRelation
    href: Shared.Services.Registry.RegistryRelation.html
  - name: )
  - name: )
  spec.vb:
  - uid: Shared.Services.Registry.ITypeRegister`1.AddRelation(System.Type,System.ValueTuple{System.Object,Shared.Services.Registry.RegistryRelation})
    name: AddRelation
    href: Shared.Services.Registry.ITypeRegister-1.html#Shared_Services_Registry_ITypeRegister_1_AddRelation_System_Type_System_ValueTuple_System_Object_Shared_Services_Registry_RegistryRelation__
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: ','
  - name: " "
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: Shared.Services.Registry.RegistryRelation
    name: RegistryRelation
    href: Shared.Services.Registry.RegistryRelation.html
  - name: )
  - name: )
- uid: System.ValueTuple`2
  commentId: T:System.ValueTuple`2
  name: (T1, T2)
  nameWithType: (T1, T2)
  fullName: (T1, T2)
  spec.csharp:
  - name: (
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: )
  spec.vb:
  - name: (
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: )
- uid: Shared.Services.Registry.TypeRegister.DeRegister(System.Type)
  commentId: M:Shared.Services.Registry.TypeRegister.DeRegister(System.Type)
  isExternal: true
  href: Shared.Services.Registry.TypeRegister.html#Shared_Services_Registry_TypeRegister_DeRegister_System_Type_
  name: DeRegister(Type)
  nameWithType: TypeRegister.DeRegister(Type)
  fullName: Shared.Services.Registry.TypeRegister.DeRegister(System.Type)
  spec.csharp:
  - uid: Shared.Services.Registry.TypeRegister.DeRegister(System.Type)
    name: DeRegister
    href: Shared.Services.Registry.TypeRegister.html#Shared_Services_Registry_TypeRegister_DeRegister_System_Type_
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: )
  spec.vb:
  - uid: Shared.Services.Registry.TypeRegister.DeRegister(System.Type)
    name: DeRegister
    href: Shared.Services.Registry.TypeRegister.html#Shared_Services_Registry_TypeRegister_DeRegister_System_Type_
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: )
- uid: System.Collections.Generic.KeyNotFoundException
  commentId: T:System.Collections.Generic.KeyNotFoundException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keynotfoundexception
  name: KeyNotFoundException
  nameWithType: KeyNotFoundException
  fullName: System.Collections.Generic.KeyNotFoundException
- uid: Shared.Services.Registry.TypeRegister.RemoveRelation*
  commentId: Overload:Shared.Services.Registry.TypeRegister.RemoveRelation
  href: Shared.Services.Registry.TypeRegister.html#Shared_Services_Registry_TypeRegister_RemoveRelation_System_Type_Shared_Services_Registry_RegistryRelation_
  name: RemoveRelation
  nameWithType: TypeRegister.RemoveRelation
  fullName: Shared.Services.Registry.TypeRegister.RemoveRelation
- uid: Shared.Services.Registry.ITypeRegister{Shared.Services.Registry.ITypeRelations}.RemoveRelation(System.Type,Shared.Services.Registry.RegistryRelation)
  commentId: M:Shared.Services.Registry.ITypeRegister{Shared.Services.Registry.ITypeRelations}.RemoveRelation(System.Type,Shared.Services.Registry.RegistryRelation)
  parent: Shared.Services.Registry.ITypeRegister{Shared.Services.Registry.ITypeRelations}
  definition: Shared.Services.Registry.ITypeRegister`1.RemoveRelation(System.Type,Shared.Services.Registry.RegistryRelation)
  href: Shared.Services.Registry.ITypeRegister-1.html#Shared_Services_Registry_ITypeRegister_1_RemoveRelation_System_Type_Shared_Services_Registry_RegistryRelation_
  name: RemoveRelation(Type, RegistryRelation)
  nameWithType: ITypeRegister<ITypeRelations>.RemoveRelation(Type, RegistryRelation)
  fullName: Shared.Services.Registry.ITypeRegister<Shared.Services.Registry.ITypeRelations>.RemoveRelation(System.Type, Shared.Services.Registry.RegistryRelation)
  nameWithType.vb: ITypeRegister(Of ITypeRelations).RemoveRelation(Type, RegistryRelation)
  fullName.vb: Shared.Services.Registry.ITypeRegister(Of Shared.Services.Registry.ITypeRelations).RemoveRelation(System.Type, Shared.Services.Registry.RegistryRelation)
  spec.csharp:
  - uid: Shared.Services.Registry.ITypeRegister{Shared.Services.Registry.ITypeRelations}.RemoveRelation(System.Type,Shared.Services.Registry.RegistryRelation)
    name: RemoveRelation
    href: Shared.Services.Registry.ITypeRegister-1.html#Shared_Services_Registry_ITypeRegister_1_RemoveRelation_System_Type_Shared_Services_Registry_RegistryRelation_
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: ','
  - name: " "
  - uid: Shared.Services.Registry.RegistryRelation
    name: RegistryRelation
    href: Shared.Services.Registry.RegistryRelation.html
  - name: )
  spec.vb:
  - uid: Shared.Services.Registry.ITypeRegister{Shared.Services.Registry.ITypeRelations}.RemoveRelation(System.Type,Shared.Services.Registry.RegistryRelation)
    name: RemoveRelation
    href: Shared.Services.Registry.ITypeRegister-1.html#Shared_Services_Registry_ITypeRegister_1_RemoveRelation_System_Type_Shared_Services_Registry_RegistryRelation_
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: ','
  - name: " "
  - uid: Shared.Services.Registry.RegistryRelation
    name: RegistryRelation
    href: Shared.Services.Registry.RegistryRelation.html
  - name: )
- uid: Shared.Services.Registry.ITypeRegister`1.RemoveRelation(System.Type,Shared.Services.Registry.RegistryRelation)
  commentId: M:Shared.Services.Registry.ITypeRegister`1.RemoveRelation(System.Type,Shared.Services.Registry.RegistryRelation)
  isExternal: true
  href: Shared.Services.Registry.ITypeRegister-1.html#Shared_Services_Registry_ITypeRegister_1_RemoveRelation_System_Type_Shared_Services_Registry_RegistryRelation_
  name: RemoveRelation(Type, RegistryRelation)
  nameWithType: ITypeRegister<T>.RemoveRelation(Type, RegistryRelation)
  fullName: Shared.Services.Registry.ITypeRegister<T>.RemoveRelation(System.Type, Shared.Services.Registry.RegistryRelation)
  nameWithType.vb: ITypeRegister(Of T).RemoveRelation(Type, RegistryRelation)
  fullName.vb: Shared.Services.Registry.ITypeRegister(Of T).RemoveRelation(System.Type, Shared.Services.Registry.RegistryRelation)
  spec.csharp:
  - uid: Shared.Services.Registry.ITypeRegister`1.RemoveRelation(System.Type,Shared.Services.Registry.RegistryRelation)
    name: RemoveRelation
    href: Shared.Services.Registry.ITypeRegister-1.html#Shared_Services_Registry_ITypeRegister_1_RemoveRelation_System_Type_Shared_Services_Registry_RegistryRelation_
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: ','
  - name: " "
  - uid: Shared.Services.Registry.RegistryRelation
    name: RegistryRelation
    href: Shared.Services.Registry.RegistryRelation.html
  - name: )
  spec.vb:
  - uid: Shared.Services.Registry.ITypeRegister`1.RemoveRelation(System.Type,Shared.Services.Registry.RegistryRelation)
    name: RemoveRelation
    href: Shared.Services.Registry.ITypeRegister-1.html#Shared_Services_Registry_ITypeRegister_1_RemoveRelation_System_Type_Shared_Services_Registry_RegistryRelation_
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: ','
  - name: " "
  - uid: Shared.Services.Registry.RegistryRelation
    name: RegistryRelation
    href: Shared.Services.Registry.RegistryRelation.html
  - name: )
- uid: Shared.Services.Registry.TypeRegister.DeRegister*
  commentId: Overload:Shared.Services.Registry.TypeRegister.DeRegister
  href: Shared.Services.Registry.TypeRegister.html#Shared_Services_Registry_TypeRegister_DeRegister_System_Type_
  name: DeRegister
  nameWithType: TypeRegister.DeRegister
  fullName: Shared.Services.Registry.TypeRegister.DeRegister
- uid: Shared.Services.Registry.ITypeRegister{Shared.Services.Registry.ITypeRelations}.DeRegister(System.Type)
  commentId: M:Shared.Services.Registry.ITypeRegister{Shared.Services.Registry.ITypeRelations}.DeRegister(System.Type)
  parent: Shared.Services.Registry.ITypeRegister{Shared.Services.Registry.ITypeRelations}
  definition: Shared.Services.Registry.ITypeRegister`1.DeRegister(System.Type)
  href: Shared.Services.Registry.ITypeRegister-1.html#Shared_Services_Registry_ITypeRegister_1_DeRegister_System_Type_
  name: DeRegister(Type)
  nameWithType: ITypeRegister<ITypeRelations>.DeRegister(Type)
  fullName: Shared.Services.Registry.ITypeRegister<Shared.Services.Registry.ITypeRelations>.DeRegister(System.Type)
  nameWithType.vb: ITypeRegister(Of ITypeRelations).DeRegister(Type)
  fullName.vb: Shared.Services.Registry.ITypeRegister(Of Shared.Services.Registry.ITypeRelations).DeRegister(System.Type)
  spec.csharp:
  - uid: Shared.Services.Registry.ITypeRegister{Shared.Services.Registry.ITypeRelations}.DeRegister(System.Type)
    name: DeRegister
    href: Shared.Services.Registry.ITypeRegister-1.html#Shared_Services_Registry_ITypeRegister_1_DeRegister_System_Type_
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: )
  spec.vb:
  - uid: Shared.Services.Registry.ITypeRegister{Shared.Services.Registry.ITypeRelations}.DeRegister(System.Type)
    name: DeRegister
    href: Shared.Services.Registry.ITypeRegister-1.html#Shared_Services_Registry_ITypeRegister_1_DeRegister_System_Type_
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: )
- uid: Shared.Services.Registry.ITypeRegister`1.DeRegister(System.Type)
  commentId: M:Shared.Services.Registry.ITypeRegister`1.DeRegister(System.Type)
  isExternal: true
  href: Shared.Services.Registry.ITypeRegister-1.html#Shared_Services_Registry_ITypeRegister_1_DeRegister_System_Type_
  name: DeRegister(Type)
  nameWithType: ITypeRegister<T>.DeRegister(Type)
  fullName: Shared.Services.Registry.ITypeRegister<T>.DeRegister(System.Type)
  nameWithType.vb: ITypeRegister(Of T).DeRegister(Type)
  fullName.vb: Shared.Services.Registry.ITypeRegister(Of T).DeRegister(System.Type)
  spec.csharp:
  - uid: Shared.Services.Registry.ITypeRegister`1.DeRegister(System.Type)
    name: DeRegister
    href: Shared.Services.Registry.ITypeRegister-1.html#Shared_Services_Registry_ITypeRegister_1_DeRegister_System_Type_
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: )
  spec.vb:
  - uid: Shared.Services.Registry.ITypeRegister`1.DeRegister(System.Type)
    name: DeRegister
    href: Shared.Services.Registry.ITypeRegister-1.html#Shared_Services_Registry_ITypeRegister_1_DeRegister_System_Type_
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: )
- uid: Shared.Services.Registry.TypeRegister.Clear*
  commentId: Overload:Shared.Services.Registry.TypeRegister.Clear
  href: Shared.Services.Registry.TypeRegister.html#Shared_Services_Registry_TypeRegister_Clear
  name: Clear
  nameWithType: TypeRegister.Clear
  fullName: Shared.Services.Registry.TypeRegister.Clear
- uid: Shared.Services.Registry.ITypeRegister{Shared.Services.Registry.ITypeRelations}.Clear
  commentId: M:Shared.Services.Registry.ITypeRegister{Shared.Services.Registry.ITypeRelations}.Clear
  parent: Shared.Services.Registry.ITypeRegister{Shared.Services.Registry.ITypeRelations}
  definition: Shared.Services.Registry.ITypeRegister`1.Clear
  href: Shared.Services.Registry.ITypeRegister-1.html#Shared_Services_Registry_ITypeRegister_1_Clear
  name: Clear()
  nameWithType: ITypeRegister<ITypeRelations>.Clear()
  fullName: Shared.Services.Registry.ITypeRegister<Shared.Services.Registry.ITypeRelations>.Clear()
  nameWithType.vb: ITypeRegister(Of ITypeRelations).Clear()
  fullName.vb: Shared.Services.Registry.ITypeRegister(Of Shared.Services.Registry.ITypeRelations).Clear()
  spec.csharp:
  - uid: Shared.Services.Registry.ITypeRegister{Shared.Services.Registry.ITypeRelations}.Clear
    name: Clear
    href: Shared.Services.Registry.ITypeRegister-1.html#Shared_Services_Registry_ITypeRegister_1_Clear
  - name: (
  - name: )
  spec.vb:
  - uid: Shared.Services.Registry.ITypeRegister{Shared.Services.Registry.ITypeRelations}.Clear
    name: Clear
    href: Shared.Services.Registry.ITypeRegister-1.html#Shared_Services_Registry_ITypeRegister_1_Clear
  - name: (
  - name: )
- uid: Shared.Services.Registry.ITypeRegister`1.Clear
  commentId: M:Shared.Services.Registry.ITypeRegister`1.Clear
  href: Shared.Services.Registry.ITypeRegister-1.html#Shared_Services_Registry_ITypeRegister_1_Clear
  name: Clear()
  nameWithType: ITypeRegister<T>.Clear()
  fullName: Shared.Services.Registry.ITypeRegister<T>.Clear()
  nameWithType.vb: ITypeRegister(Of T).Clear()
  fullName.vb: Shared.Services.Registry.ITypeRegister(Of T).Clear()
  spec.csharp:
  - uid: Shared.Services.Registry.ITypeRegister`1.Clear
    name: Clear
    href: Shared.Services.Registry.ITypeRegister-1.html#Shared_Services_Registry_ITypeRegister_1_Clear
  - name: (
  - name: )
  spec.vb:
  - uid: Shared.Services.Registry.ITypeRegister`1.Clear
    name: Clear
    href: Shared.Services.Registry.ITypeRegister-1.html#Shared_Services_Registry_ITypeRegister_1_Clear
  - name: (
  - name: )
- uid: Shared.Services.Registry.TypeRegister.TryGetParentType*
  commentId: Overload:Shared.Services.Registry.TypeRegister.TryGetParentType
  href: Shared.Services.Registry.TypeRegister.html#Shared_Services_Registry_TypeRegister_TryGetParentType_System_Type_System_Type__
  name: TryGetParentType
  nameWithType: TypeRegister.TryGetParentType
  fullName: Shared.Services.Registry.TypeRegister.TryGetParentType
- uid: Shared.Services.Registry.ITypeRegister{Shared.Services.Registry.ITypeRelations}.TryGetParentType(System.Type,System.Type@)
  commentId: M:Shared.Services.Registry.ITypeRegister{Shared.Services.Registry.ITypeRelations}.TryGetParentType(System.Type,System.Type@)
  parent: Shared.Services.Registry.ITypeRegister{Shared.Services.Registry.ITypeRelations}
  definition: Shared.Services.Registry.ITypeRegister`1.TryGetParentType(System.Type,System.Type@)
  href: Shared.Services.Registry.ITypeRegister-1.html#Shared_Services_Registry_ITypeRegister_1_TryGetParentType_System_Type_System_Type__
  name: TryGetParentType(Type, out Type)
  nameWithType: ITypeRegister<ITypeRelations>.TryGetParentType(Type, out Type)
  fullName: Shared.Services.Registry.ITypeRegister<Shared.Services.Registry.ITypeRelations>.TryGetParentType(System.Type, out System.Type)
  nameWithType.vb: ITypeRegister(Of ITypeRelations).TryGetParentType(Type, Type)
  fullName.vb: Shared.Services.Registry.ITypeRegister(Of Shared.Services.Registry.ITypeRelations).TryGetParentType(System.Type, System.Type)
  name.vb: TryGetParentType(Type, Type)
  spec.csharp:
  - uid: Shared.Services.Registry.ITypeRegister{Shared.Services.Registry.ITypeRelations}.TryGetParentType(System.Type,System.Type@)
    name: TryGetParentType
    href: Shared.Services.Registry.ITypeRegister-1.html#Shared_Services_Registry_ITypeRegister_1_TryGetParentType_System_Type_System_Type__
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: ','
  - name: " "
  - name: out
  - name: " "
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: )
  spec.vb:
  - uid: Shared.Services.Registry.ITypeRegister{Shared.Services.Registry.ITypeRelations}.TryGetParentType(System.Type,System.Type@)
    name: TryGetParentType
    href: Shared.Services.Registry.ITypeRegister-1.html#Shared_Services_Registry_ITypeRegister_1_TryGetParentType_System_Type_System_Type__
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: ','
  - name: " "
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: Shared.Services.Registry.ITypeRegister`1.TryGetParentType(System.Type,System.Type@)
  commentId: M:Shared.Services.Registry.ITypeRegister`1.TryGetParentType(System.Type,System.Type@)
  isExternal: true
  href: Shared.Services.Registry.ITypeRegister-1.html#Shared_Services_Registry_ITypeRegister_1_TryGetParentType_System_Type_System_Type__
  name: TryGetParentType(Type, out Type)
  nameWithType: ITypeRegister<T>.TryGetParentType(Type, out Type)
  fullName: Shared.Services.Registry.ITypeRegister<T>.TryGetParentType(System.Type, out System.Type)
  nameWithType.vb: ITypeRegister(Of T).TryGetParentType(Type, Type)
  fullName.vb: Shared.Services.Registry.ITypeRegister(Of T).TryGetParentType(System.Type, System.Type)
  name.vb: TryGetParentType(Type, Type)
  spec.csharp:
  - uid: Shared.Services.Registry.ITypeRegister`1.TryGetParentType(System.Type,System.Type@)
    name: TryGetParentType
    href: Shared.Services.Registry.ITypeRegister-1.html#Shared_Services_Registry_ITypeRegister_1_TryGetParentType_System_Type_System_Type__
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: ','
  - name: " "
  - name: out
  - name: " "
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: )
  spec.vb:
  - uid: Shared.Services.Registry.ITypeRegister`1.TryGetParentType(System.Type,System.Type@)
    name: TryGetParentType
    href: Shared.Services.Registry.ITypeRegister-1.html#Shared_Services_Registry_ITypeRegister_1_TryGetParentType_System_Type_System_Type__
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: ','
  - name: " "
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: )
