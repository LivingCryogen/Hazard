{
  "api/Model.Assets.RuleValues.html": {
    "href": "api/Model.Assets.RuleValues.html",
    "title": "Class RuleValues | Hazard!_Docs",
    "summary": "Class RuleValues Provides constants and equations derived from game rules. Inheritance object RuleValues Implements IRuleValues Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Model.Assets Assembly: Model.dll Syntax public class RuleValues : IRuleValues Constructors | Edit this page View Source RuleValues(IConfiguration) Provides constants and equations derived from game rules. Declaration public RuleValues(IConfiguration config) Parameters Type Name Description IConfiguration config Properties | Edit this page View Source AttackersLimit Gets the maximum number of dice allowed an attacking player. Declaration public int AttackersLimit { get; } Property Value Type Description int | Edit this page View Source ContinentBonus Gets map of the number of bonus armies granted for controlling a given continent (see ContID). Declaration public ReadOnlyDictionary<ContID, int> ContinentBonus { get; } Property Value Type Description ReadOnlyDictionary<ContID, int> | Edit this page View Source DefendersLimit Gets the maximum number of dice allowed a defending player. Declaration public int DefendersLimit { get; } Property Value Type Description int | Edit this page View Source MinimumArmyBonus Gets the minimum number to add to a player's army count on their turn. Declaration public int MinimumArmyBonus { get; } Property Value Type Description int | Edit this page View Source SetupActionsPerPlayers Gets a map of the number of actions allowed a player in the Setup phase given the total number of players. Declaration public ReadOnlyDictionary<int, int> SetupActionsPerPlayers { get; } Property Value Type Description ReadOnlyDictionary<int, int> | Edit this page View Source SetupStartingPool Gets a map of the number of armies distributed to a player during setup given the total number of players. Declaration public ReadOnlyDictionary<int, int> SetupStartingPool { get; } Property Value Type Description ReadOnlyDictionary<int, int> | Edit this page View Source TerritoryTradeInBonus Gets the number of armies to add to a player's army count if they trade in a set of cards. Declaration public int TerritoryTradeInBonus { get; } Property Value Type Description int Methods | Edit this page View Source CalculateArmyBonus(int, List<ContID>) Calculates how many armies to grant a player at the beginning of their turn. Declaration public int CalculateArmyBonus(int numTerritories, List<ContID> continents) Parameters Type Name Description int numTerritories The number of territories controlled by a player. List<ContID> continents A list of continents controlled by a player. Returns Type Description int The number of armies granted. | Edit this page View Source CalculateBaseTradeInBonus(int) Calculates how many additional armies to grant a player when they trade in set of cards on their turn. Declaration public int CalculateBaseTradeInBonus(int numTrades) Parameters Type Name Description int numTrades The number of trades performed so far. Returns Type Description int The number of additional armies granted. | Edit this page View Source CalculateTerritoryBonus(int) Calculates how many additional armies to grant a player based upon the number of territories they control. Declaration public int CalculateTerritoryBonus(int numTerritories) Parameters Type Name Description int numTerritories The number of territories under control of a player. Returns Type Description int The total number of armies granted. Implements IRuleValues"
  },
  "api/Model.Assets.html": {
    "href": "api/Model.Assets.html",
    "title": "Namespace Model.Assets | Hazard!_Docs",
    "summary": "Namespace Model.Assets Classes RuleValues Provides constants and equations derived from game rules."
  },
  "api/Model.Core.Game.html": {
    "href": "api/Model.Core.Game.html",
    "title": "Class Game | Hazard!_Docs",
    "summary": "Class Game The top-level class for an individual Game. Inheritance object Game Implements IGame IBinarySerializable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Model.Core Assembly: Model.dll Syntax public class Game : IGame, IBinarySerializable Constructors | Edit this page View Source Game(int, ILoggerFactory, IAssetFetcher, ITypeRegister<ITypeRelations>, IConfiguration) Constructs a game given a number of players and DI-injected DAL, configuration, and logger. Declaration public Game(int numPlayers, ILoggerFactory loggerFactory, IAssetFetcher assetFetcher, ITypeRegister<ITypeRelations> typeRegister, IConfiguration config) Parameters Type Name Description int numPlayers The number of players for this game. Used during initialization of StateMachine and Players. When loading from a file, this will be 0, and components update after calling LoadFromBinary(BinaryReader). ILoggerFactory loggerFactory Builds configured loggers for various components when and where the DI system does not do so directly. IAssetFetcher assetFetcher Connects the Model and the DAL through bespoke methods. Provides assets to game properties, eg:FetchCardSets() for Cards. ITypeRegister<ITypeRelations> typeRegister Serves as an Application Type Registry. Simplifies asset loading and configuration extension. Required for operation of ICard's default methods and DAL operations. IConfiguration config Configuration provided by DI. Values derived from \"View\\appsettings.json.\" Properties | Edit this page View Source AssetFetcher Gets the facade of the DAL. Declaration public IAssetFetcher AssetFetcher { get; } Property Value Type Description IAssetFetcher | Edit this page View Source Board Gets an instance describing the Game board; stores both data and relations between Board objects. Declaration public IBoard Board { get; } Property Value Type Description IBoard | Edit this page View Source Cards Gets the \"card base\", containing all ICards, ICardSets, and Decks. Declaration public CardBase Cards { get; } Property Value Type Description CardBase | Edit this page View Source DefaultCardMode Gets a flag indicating whether the game is set to default card mode. Declaration public bool DefaultCardMode { get; } Property Value Type Description bool true if the IGame has been set to allow only the default cards. Otherwise, if others are added (e.g. Mission Cards), false. | Edit this page View Source ID Gets the unique ID of the game. Declaration public Guid ID { get; } Property Value Type Description Guid | Edit this page View Source Logger Gets or sets a logger for logging debug information and errors. Provided by the DI system indirectly via an ILoggerFactory. Declaration public ILogger Logger { get; } Property Value Type Description ILogger An implementation of ILogger<TCategoryName>. | Edit this page View Source Players Gets the list of players in the game. Declaration public List<IPlayer> Players { get; } Property Value Type Description List<IPlayer> After initialization and/or loading, should have a count of 2-6. | Edit this page View Source State Gets the game's state machine, which tracks player count and status, turns, etc. Declaration public StateMachine State { get; } Property Value Type Description StateMachine | Edit this page View Source Values Gets a data object containing game-specific rules values, like continent bonuses or equations for bonus armies. Declaration public IRuleValues Values { get; } Property Value Type Description IRuleValues Methods | Edit this page View Source GetBinarySerials() Asynchronously serializes the IBinarySerializable. Declaration public Task<SerializedData[]> GetBinarySerials() Returns Type Description Task<SerializedData[]> A task whose result contains serialized object data. | Edit this page View Source LoadFromBinary(BinaryReader) Loads the IBinarySerializable with binary values read from a file. Declaration public bool LoadFromBinary(BinaryReader reader) Parameters Type Name Description BinaryReader reader A reader whose BaseStream was previously written to using BinarySerializer and GetBinarySerials(). Returns Type Description bool true if the load succeeded without exceptions; otherwise, false. | Edit this page View Source Save(bool, string) Save to a file. Declaration public Task Save(bool isNewFile, string fileName) Parameters Type Name Description bool isNewFile Indicates whether the save file is new. string fileName The name of the save file. Returns Type Description Task | Edit this page View Source TwoPlayerAutoSetup() Sets up a two-player game. Rules dictate that two-player setup includes a third, neutral, dummy \"player\", and that the initial selection of territories is random. Declaration public void TwoPlayerAutoSetup() | Edit this page View Source UpdatePlayerNames(string[]) Updates player names. Declaration public void UpdatePlayerNames(string[] names) Parameters Type Name Description string[] names Player names in ascending player number order. Remarks Useful after loading a game from a file. Events | Edit this page View Source PlayerLost Fires when a player loses, carrying their Number. Declaration public event EventHandler<int>? PlayerLost Event Type Type Description EventHandler<int> | Edit this page View Source PlayerWon Fires when a player wins, carrying their Number. Declaration public event EventHandler<int>? PlayerWon Event Type Type Description EventHandler<int> Implements IGame IBinarySerializable"
  },
  "api/Model.Core.Player.html": {
    "href": "api/Model.Core.Player.html",
    "title": "Class Player | Hazard!_Docs",
    "summary": "Class Player Represents a player in the game. Inheritance object Player Implements IPlayer IBinarySerializable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Model.Core Assembly: Model.dll Syntax public class Player : IPlayer, IBinarySerializable Constructors | Edit this page View Source Player(int, int, CardFactory, IRuleValues, IBoard, ILogger<Player>) Constructs a player when their name is unknown. Declaration public Player(int number, int numPlayers, CardFactory cardFactory, IRuleValues values, IBoard board, ILogger<Player> logger) Parameters Type Name Description int number The number of the player (0 or higher). int numPlayers The number of total players in the game. CardFactory cardFactory A factory for producing ICards; necessary for populating Hand via LoadFromBinary(BinaryReader). IRuleValues values Provides game-rule defined values and equations. IBoard board The game board. ILogger<Player> logger A logger for logging errors and debug information. | Edit this page View Source Player(string, int, int, CardFactory, IRuleValues, IBoard, ILogger<Player>) Constructs a player with a user-provided name. Declaration public Player(string name, int number, int numPlayers, CardFactory cardFactory, IRuleValues values, IBoard board, ILogger<Player> logger) Parameters Type Name Description string name The name for the player provided by the user. int number The number of the player (0 or higher). int numPlayers The number of total players in the game. CardFactory cardFactory A factory for producing ICards; necessary for populating Hand via LoadFromBinary(BinaryReader). IRuleValues values Provides game-rule defined values and equations. IBoard board The game board. ILogger<Player> logger A logger for logging errors and debug information. Properties | Edit this page View Source ArmyBonus Gets the bonus a player receives to their army pool each turn. Declaration public int ArmyBonus { get; } Property Value Type Description int The default rules never allow this to fall below 3 (MinimumArmyBonus). It is calculated by CalculateArmyBonus(int, List<ContID>). Remarks Should be recalculated at the start of each turn (during Place) | Edit this page View Source ArmyPool Gets or sets the current number of armies a player has left to place. Declaration public int ArmyPool { get; set; } Property Value Type Description int An integer with an initial value equal to ArmyBonus that is reduced when an IPlayer places an army during Place. | Edit this page View Source ContinentBonus Gets or sets the increase to ArmyBonus a player receives from controlling continents. Declaration public int ContinentBonus { get; set; } Property Value Type Description int A natural number (0 or positive integer) determined by ContinentBonus and the extent of the player's ControlledTerritories. | Edit this page View Source ControlledTerritories Gets the territories controlled by the player. Declaration public HashSet<TerrID> ControlledTerritories { get; } Property Value Type Description HashSet<TerrID> | Edit this page View Source Hand Gets a list of cards in the player's hand. Declaration public List<ICard> Hand { get; set; } Property Value Type Description List<ICard> | Edit this page View Source HasCardSet Gets a flag indicating whether the player holds a valid trade set of cards. Declaration public bool HasCardSet { get; set; } Property Value Type Description bool true if Hand contains cards that satisfy their set's IsValidTrade(ICard[]); otherwise false. | Edit this page View Source Name Gets or sets the name of the player. Declaration public string Name { get; set; } Property Value Type Description string | Edit this page View Source Number Gets the number of the player. Declaration public int Number { get; } Property Value Type Description int An integer from 0-5. Methods | Edit this page View Source AddCard(ICard) Adds a card to this player's Hand. Declaration public void AddCard(ICard card) Parameters Type Name Description ICard card The card to add. | Edit this page View Source AddTerritory(TerrID) Adds a territory to this player's control. Declaration public bool AddTerritory(TerrID territory) Parameters Type Name Description TerrID territory The territory to add. Returns Type Description bool true if successfully added; otherwise, false. | Edit this page View Source FindCardSet() Finds trade-in card sets in the player's hand. Declaration public void FindCardSet() Remarks Determines whether the player holds a set of ICards that are a tradeable set according to FindTradeSets(ICard[]) and IsValidTrade(ICard[]). | Edit this page View Source GetBinarySerials() Asynchronously serializes the IBinarySerializable. Declaration public Task<SerializedData[]> GetBinarySerials() Returns Type Description Task<SerializedData[]> A task whose result contains serialized object data. | Edit this page View Source GetControlledTargets(TerrID[]) Gets territories controlled by this player from among a given set. Declaration public TerrID[] GetControlledTargets(TerrID[] targets) Parameters Type Name Description TerrID[] targets The territories to match. Returns Type Description TerrID[] Those territories from among targets controlled by this player. | Edit this page View Source GetsTradeBonus(int) Adds the trade-in bonus to ArmyPool when the player trades in cards. Declaration public void GetsTradeBonus(int tradeInBonus) Parameters Type Name Description int tradeInBonus The bonus granted. | Edit this page View Source LoadFromBinary(BinaryReader) Loads the IBinarySerializable with binary values read from a file. Declaration public bool LoadFromBinary(BinaryReader reader) Parameters Type Name Description BinaryReader reader A reader whose BaseStream was previously written to using BinarySerializer and GetBinarySerials(). Returns Type Description bool true if the load succeeded without exceptions; otherwise, false. | Edit this page View Source RemoveCard(int) Removes a card from this player's Hand. Declaration public bool RemoveCard(int handIndex) Parameters Type Name Description int handIndex The index of Hand which holds the card to be removed. Returns Type Description bool true if successfully removed; otherwise, false. | Edit this page View Source RemoveTerritory(TerrID) Removes a territory from this player's control. Declaration public bool RemoveTerritory(TerrID territory) Parameters Type Name Description TerrID territory The territory to remove. Returns Type Description bool true if successfully removed; otherwise, false. Remarks Also fires PlayerLost if the count of ControlledTerritories falls to 0. Events | Edit this page View Source PlayerChanged Should fire when this IPlayer's property values change. Declaration public event EventHandler<IPlayerChangedEventArgs>? PlayerChanged Event Type Type Description EventHandler<IPlayerChangedEventArgs> | Edit this page View Source PlayerLost Fires when this IPlayer has lost the game (by default, when they control no territories). Declaration public event EventHandler? PlayerLost Event Type Type Description EventHandler Implements IPlayer IBinarySerializable"
  },
  "api/Model.Core.Regulator.html": {
    "href": "api/Model.Core.Regulator.html",
    "title": "Class Regulator | Hazard!_Docs",
    "summary": "Class Regulator Facade for the Model's user interactions. Inheritance object Regulator Implements IRegulator IBinarySerializable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Model.Core Assembly: Model.dll Syntax public class Regulator : IRegulator, IBinarySerializable Remarks Enforces the game rules -- \"regulates\" player actions; that is, after the ViewModel interprets player actions based on game state, this enforces game rule logic in response, updating the state and readying the model for the next input. Constructors | Edit this page View Source Regulator(ILogger<Regulator>, IGame) Facade for the Model's user interactions. Declaration public Regulator(ILogger<Regulator> logger, IGame currentGame) Parameters Type Name Description ILogger<Regulator> logger IGame currentGame Remarks Enforces the game rules -- \"regulates\" player actions; that is, after the ViewModel interprets player actions based on game state, this enforces game rule logic in response, updating the state and readying the model for the next input. Properties | Edit this page View Source CurrentActionsLimit Gets or sets the limit on player actions during this GamePhase. Declaration public int CurrentActionsLimit { get; set; } Property Value Type Description int | Edit this page View Source PhaseActions Gets the number of player actions taken during this GamePhase. Declaration public int PhaseActions { get; } Property Value Type Description int | Edit this page View Source Reward Gets or sets a card rewarded to a player for a successful attack. Declaration public ICard? Reward { get; set; } Property Value Type Description ICard If the current player made a successful attack, an ICard. Otherwise, null. Methods | Edit this page View Source AwardTradeInBonus(TerrID) Executes game-rule logic for awarding bonus armies to a territory due to card trade-in. Declaration public void AwardTradeInBonus(TerrID territory) Parameters Type Name Description TerrID territory The territory awarded the bonus armies. Remarks Used when a player controls one or more territories of the Targets upon trade-in. | Edit this page View Source Battle(TerrID, TerrID, (int AttackRoll, int DefenseRoll)[]) Executes game-rule logic when given the results of a battle between the armies of two territories. Declaration public void Battle(TerrID source, TerrID target, (int AttackRoll, int DefenseRoll)[] diceRolls) Parameters Type Name Description TerrID source The source of the attack (attacker). TerrID target The target of the attack (defender). (int AttackRoll, int DefenseRoll)[] diceRolls Dice rolls paired together according to game rules. Remarks By default, rolls for attacker and defender should be put in descending order, then paired (unpaired remainders are ignored). | Edit this page View Source CanSelectTerritory(TerrID, TerrID) Determines whether a given territory is a valid selection according to rules and game state. Declaration public bool CanSelectTerritory(TerrID newSelected, TerrID oldSelected) Parameters Type Name Description TerrID newSelected The territory being selected. TerrID oldSelected The territory already selected, if any. Returns Type Description bool true if the territory is a valid selection; otherwise, false. | Edit this page View Source CanTradeInCards(int, int[]) Determines whether a subset of a player's hand can be traded in. Declaration public bool CanTradeInCards(int playerNum, int[] handIndices) Parameters Type Name Description int playerNum int[] handIndices The indices of the ICards within Hand that are to be traded. Returns Type Description bool true if circumstances allow the trade; otherwise, false. Remarks Typically, relevant factors include the ICard values, their ICardSet trading functions, and the current GamePhase. | Edit this page View Source ClaimOrReinforce(TerrID) Updates game state in response to a territory being selected during Setup or Place phases (see GamePhase). Declaration public void ClaimOrReinforce(TerrID territory) Parameters Type Name Description TerrID territory The territory selected. | Edit this page View Source DeliverCardReward() Delivers the ICard held in Reward, if any, to the appropriate IPlayer. Declaration public void DeliverCardReward() | Edit this page View Source GetBinarySerials() Asynchronously serializes the IBinarySerializable. Declaration public Task<SerializedData[]> GetBinarySerials() Returns Type Description Task<SerializedData[]> A task whose result contains serialized object data. | Edit this page View Source Initialize() Initializes this IRegulator. Declaration public void Initialize() Remarks This post-construction initialization step is needed to accomodate loading from save files. | Edit this page View Source LoadFromBinary(BinaryReader) Loads the IBinarySerializable with binary values read from a file. Declaration public bool LoadFromBinary(BinaryReader reader) Parameters Type Name Description BinaryReader reader A reader whose BaseStream was previously written to using BinarySerializer and GetBinarySerials(). Returns Type Description bool true if the load succeeded without exceptions; otherwise, false. | Edit this page View Source MoveArmies(TerrID, TerrID, int) Updates the game state in response to the 'Move' action, in which a player moves a number of armies from one controlled territory to another during Move. Declaration public void MoveArmies(TerrID source, TerrID target, int armies) Parameters Type Name Description TerrID source The source of the moving armies. TerrID target The target of the move. int armies The number of armies to move. | Edit this page View Source SelectTerritory(TerrID, TerrID) Receives a territory ID selection as Player input and determines course of game logic. Declaration public (TerrID Selection, bool RequestInput, int? MaxValue) SelectTerritory(TerrID selected, TerrID priorSelected) Parameters Type Name Description TerrID selected The Territory selected by the player. TerrID priorSelected The previous selection. Returns Type Description (TerrID Selection, bool RequestInput, int? MaxValue) A tuple containing the updated selection and a flag for requesting further player input (needed in Attack and Move phases). If MaxValue is not null, the request is for Move/Advance. | Edit this page View Source TradeInCards(int, int[]) Executes game-rule logic for trading in cards from a player. Declaration public void TradeInCards(int playerNum, int[] handIndices) Parameters Type Name Description int playerNum int[] handIndices An array representing the indices of Hand which were traded. Events | Edit this page View Source PromptBonusChoice Fires when a player must choose between two or more territories they control to receive a bonus upon card trade-in. Declaration public event EventHandler<TerrID[]>? PromptBonusChoice Event Type Type Description EventHandler<TerrID[]> | Edit this page View Source PromptTradeIn Fires when a player should be prompted to trade in cards at the start of their turn; may or may not be forced. Declaration public event EventHandler<IPromptTradeEventArgs>? PromptTradeIn Event Type Type Description EventHandler<IPromptTradeEventArgs> Implements IRegulator IBinarySerializable"
  },
  "api/Model.Core.StateMachine.html": {
    "href": "api/Model.Core.StateMachine.html",
    "title": "Class StateMachine | Hazard!_Docs",
    "summary": "Class StateMachine The game's state machine. Inheritance object StateMachine Implements IBinarySerializable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Model.Core Assembly: Model.dll Syntax public class StateMachine : IBinarySerializable Constructors | Edit this page View Source StateMachine(int, ILogger<StateMachine>) Constructs the machine based on the number of players in the game. Declaration public StateMachine(int numPlayers, ILogger<StateMachine> logger) Parameters Type Name Description int numPlayers The number of players. ILogger<StateMachine> logger Provided by an ILoggerFactory during Game construction. Fields | Edit this page View Source StateChanged Indicates that a StateMachine public property has changed value. Declaration public EventHandler<string>? StateChanged Field Value Type Description EventHandler<string> Remarks Both Regulator and IMainVM subscribe to this event. Properties | Edit this page View Source CurrentPhase Gets what phase the game is currently in, or sets the phase and invokes StateChanged. Declaration public GamePhase CurrentPhase { get; set; } Property Value Type Description GamePhase | Edit this page View Source IsActivePlayer Gets or sets an array of flags indicating which IPlayers are active. Declaration public BitArray IsActivePlayer { get; } Property Value Type Description BitArray A BitArray of one byte. Each index of the array corresponds to a Number, with a true (1) value indicating a player is active, and false (0) inactive. | Edit this page View Source NumPlayers Gets or sets the number of IPlayer in the parent Game. Declaration public int NumPlayers { get; } Property Value Type Description int An int from 2-6. | Edit this page View Source NumTrades Gets the number of times a set of cards has been traded in for bonus armies during the current game. Or, sets this value and invokes StateChanged. Declaration public int NumTrades { get; set; } Property Value Type Description int An integer of 0 or more that is incremented each time a player trades in a set of cards. | Edit this page View Source PhaseStageTwo Gets a value indicating whether a two-part phase is in the first or second stage. Or, sets this value and invokes StateChanged. E.g.: In the first stage of Attack, the model must accept input of the attack source. In the second stage, it must use this selection together with a second input: the attack target. Declaration public bool PhaseStageTwo { get; set; } Property Value Type Description bool true if the CurrentPhase is a two-stage GamePhase and is in its second stage. Otherwise, false. | Edit this page View Source PlayerTurn Gets the number of the player whose turn it is. Or, sets this value and invokes StateChanged. Declaration public int PlayerTurn { get; set; } Property Value Type Description int An integer assignation for a player, from 0-5. | Edit this page View Source Round Gets the number of rounds the game has entered so far. Or, sets this value and invokes StateChanged. Declaration public int Round { get; set; } Property Value Type Description int An integer representing the number of times the turn has passed to each player. Remarks A round is completed once PlayerTurn increases beyond NumPlayers. The 0th Round is the setup round. | Edit this page View Source Winner Gets or sets a value designating a player as the game winner. Declaration public int Winner { get; set; } Property Value Type Description int An integer from 0-5. Methods | Edit this page View Source DisablePlayer(int) Disable a player. Declaration public void DisablePlayer(int player) Parameters Type Name Description int player Remarks Typically this is reserved for when a player has been defeated. Disable works by \"skipping\" disabled player numbers when incrementing PlayerTurns and Rounds. See Model.Core.StateMachine.NextActivePlayer(), NextActivePlayer(int), and IsActivePlayer. | Edit this page View Source GetBinarySerials() Asynchronously serializes the IBinarySerializable. Declaration public Task<SerializedData[]> GetBinarySerials() Returns Type Description Task<SerializedData[]> A task whose result contains serialized object data. | Edit this page View Source IncrementNumTrades(int) Increase NumTrades by a fixed amount. Declaration public void IncrementNumTrades(int increment) Parameters Type Name Description int increment The amount of increase. | Edit this page View Source IncrementPhase() End the current GamePhase and perform end of phase actions. Declaration public void IncrementPhase() | Edit this page View Source IncrementPlayerTurn() End the current PlayerTurn and perform end of turn actions. Declaration public void IncrementPlayerTurn() Exceptions Type Condition InvalidOperationException Thrown if there is an attempt to calculate the next active player when all players are inactive. | Edit this page View Source IncrementRound() End the current round and perform end of round actions. Declaration public void IncrementRound() Exceptions Type Condition InvalidOperationException Thrown if there is an attempt to calculate the next active player when all players are inactive. | Edit this page View Source InitializePlayerStatusArray(byte) Initializes IsActivePlayer from a saved game. Declaration public void InitializePlayerStatusArray(byte data) Parameters Type Name Description byte data Typically, data from ReadConvertible(BinaryReader, Type). | Edit this page View Source LoadFromBinary(BinaryReader) Loads the IBinarySerializable with binary values read from a file. Declaration public bool LoadFromBinary(BinaryReader reader) Parameters Type Name Description BinaryReader reader A reader whose BaseStream was previously written to using BinarySerializer and GetBinarySerials(). Returns Type Description bool true if the load succeeded without exceptions; otherwise, false. Implements IBinarySerializable"
  },
  "api/Model.Core.html": {
    "href": "api/Model.Core.html",
    "title": "Namespace Model.Core | Hazard!_Docs",
    "summary": "Namespace Model.Core Classes Game The top-level class for an individual Game. Player Represents a player in the game. Regulator Facade for the Model's user interactions. StateMachine The game's state machine."
  },
  "api/Model.DataAccess.AssetFactory.html": {
    "href": "api/Model.DataAccess.AssetFactory.html",
    "title": "Class AssetFactory | Hazard!_Docs",
    "summary": "Class AssetFactory Instantiates classes for registered types at run-time. Inheritance object AssetFactory Implements IAssetFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Model.DataAccess Assembly: Model.dll Syntax public class AssetFactory : IAssetFactory Remarks IAssetFactory is intended for use in the Data Access Layer. Constructors | Edit this page View Source AssetFactory(ILogger<AssetFactory>, ILoggerFactory) Constructs an Asset Factory without a Data Provider. Declaration public AssetFactory(ILogger<AssetFactory> logger, ILoggerFactory loggerFactory) Parameters Type Name Description ILogger<AssetFactory> logger A logger for logging debug information and errors. ILoggerFactory loggerFactory Instantiates ILoggers. | Edit this page View Source AssetFactory(IDataProvider, ILogger<AssetFactory>, ILoggerFactory) Constructs an Asset Factory with an injected Data Provider. Declaration public AssetFactory(IDataProvider dataProvider, ILogger<AssetFactory> logger, ILoggerFactory loggerFactory) Parameters Type Name Description IDataProvider dataProvider Provides data from external sources (e.g., data files). ILogger<AssetFactory> logger A logger for logging debug information and errors. ILoggerFactory loggerFactory Instantiates ILoggers. Methods | Edit this page View Source BuildTroopCards(ICardSet) Builds TroopCards from the data in TroopCardSetData. Declaration public TroopCard[] BuildTroopCards(ICardSet troopCardSet) Parameters Type Name Description ICardSet troopCardSet The ConvertedDataType of a TroopCardSetDataJConverter. within a TypeRegister entry for TroopCard. An instance is returned by GetData(string) when passsed the object marked Name for TroopCard if the entry also includes a proper DataFileName. Returns Type Description TroopCard[] An array of TroopCards for use by Deck. | Edit this page View Source GetAsset(string) Builds instances of Types registered in a ITypeRegister<T>, from data provided by a IDataProvider. Declaration public object? GetAsset(string typeName) Parameters Type Name Description string typeName The string marked by Name as a name for a keyed Type in an ITypeRegister<T>. The entry must also contain an object marked DataConverter, and possibly ConvertedDataType. Returns Type Description object The constructed instance. Remarks For example, the file \"TroopCardSet.json\" is handled by a IDataProvider. The provider uses objects and relations registered in a ITypeRegister<T>. AssetFactory calls GetData(string) and builds concrete instances of game assets out of its return value. Implements IAssetFactory"
  },
  "api/Model.DataAccess.AssetFetcher.html": {
    "href": "api/Model.DataAccess.AssetFetcher.html",
    "title": "Class AssetFetcher | Hazard!_Docs",
    "summary": "Class AssetFetcher Exposes the Data Access 'Layer' to the Model, providing bespoke methods for retrieving Game Assets at run-time. Inheritance object AssetFetcher Implements IAssetFetcher Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Model.DataAccess Assembly: Model.dll Syntax public class AssetFetcher : IAssetFetcher Remarks Expansion of the DAL to cover other Types requires extension of this interface. Constructors | Edit this page View Source AssetFetcher(IAssetFactory, IOptions<AppConfig>) Exposes the Data Access 'Layer' to the Model, providing bespoke methods for retrieving Game Assets at run-time. Declaration public AssetFetcher(IAssetFactory factory, IOptions<AppConfig> options) Parameters Type Name Description IAssetFactory factory IOptions<AppConfig> options Remarks Expansion of the DAL to cover other Types requires extension of this interface. Methods | Edit this page View Source FetchCardSets() Discovers local data files that contain ICards and hands off their names to AssetFactory. Declaration public List<ICardSet> FetchCardSets() Returns Type Description List<ICardSet> A list of ICard arrays (\"card sets\") read from local data files containing \"CardSet\" in thier names. The files must comport with Types, ICardSetDataJConverters, and conversion target types from TypeRegister. | Edit this page View Source FetchGeography() Begins the process of data reading, conversion, and object initialization for BoardGeography. Declaration public GeographyInitializer FetchGeography() Returns Type Description GeographyInitializer An initializer object to be used with Initialize(GeographyInitializer). Implements IAssetFetcher"
  },
  "api/Model.DataAccess.Cards.ICardSetDataJConverter.html": {
    "href": "api/Model.DataAccess.Cards.ICardSetDataJConverter.html",
    "title": "Interface ICardSetDataJConverter | Hazard!_Docs",
    "summary": "Interface ICardSetDataJConverter Converts '.json' data of a CardSet file to ICardSet. Namespace: Model.DataAccess.Cards Assembly: Model.dll Syntax public interface ICardSetDataJConverter Remarks An interface exposure for JsonConverter<T> instances that convert from '.json' to ICardSet. Enables polymorphism during DAL operations for ICards. ICard assets are stored in collections, called ICardSets, and they share references (see CardSet and MemberTypeName). In the TypeRegister, each ICard used should have a registered ICardSet, and vice versa. Then, each ICardSet should be associated with an ICardSetData (see JData) and an ICardSetDataJConverter. Methods | Edit this page View Source ReadCardSetData(string) Wraps Read(ref Utf8JsonReader, Type, JsonSerializerOptions) so that return type may vary from T. Declaration ICardSet? ReadCardSetData(string registeredFileName) Parameters Type Name Description string registeredFileName The object marked for the JsonConverter's 'T' in a . Returns Type Description ICardSet The object marked CollectionType for a keyed ICard implemetation in a TypeRegister; or, if default, ICardSet. Remarks This is necessary in order to override Read(ref Utf8JsonReader, Type, JsonSerializerOptions) but return an interface instead of T."
  },
  "api/Model.DataAccess.Cards.TroopCardSetDataJConverter.html": {
    "href": "api/Model.DataAccess.Cards.TroopCardSetDataJConverter.html",
    "title": "Class TroopCardSetDataJConverter | Hazard!_Docs",
    "summary": "Class TroopCardSetDataJConverter The base card set '.json' converter. Inheritance object JsonConverter JsonConverter<TroopCardSet> TroopCardSetDataJConverter Implements ICardSetDataJConverter Inherited Members JsonConverter<TroopCardSet>.CanConvert(Type) JsonConverter<TroopCardSet>.ReadAsPropertyName(ref Utf8JsonReader, Type, JsonSerializerOptions) JsonConverter<TroopCardSet>.WriteAsPropertyName(Utf8JsonWriter, TroopCardSet, JsonSerializerOptions) JsonConverter<TroopCardSet>.HandleNull JsonConverter<TroopCardSet>.Type object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Model.DataAccess.Cards Assembly: Model.dll Syntax public class TroopCardSetDataJConverter : JsonConverter<TroopCardSet>, ICardSetDataJConverter Methods | Edit this page View Source Read(ref Utf8JsonReader, Type, JsonSerializerOptions) Reads a CardSet '.json' into a TroopCardSet object. Declaration public override TroopCardSet? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) Parameters Type Name Description Utf8JsonReader reader A Json reader provided the bytes of a '.json' data file registered in a TypeRegister. Type typeToConvert The target conversion Type, usually marked by ConvertedDataType in a TypeRegister. JsonSerializerOptions options Should be Default. Returns Type Description TroopCardSet A TroopCardSet which IAssetFactory will use to build TroopCards. Overrides JsonConverter<TroopCardSet>.Read(ref Utf8JsonReader, Type, JsonSerializerOptions) Remarks Overrides Read(ref Utf8JsonReader, Type, JsonSerializerOptions). | Edit this page View Source ReadCardSetData(string) Wraps Read(ref Utf8JsonReader, Type, JsonSerializerOptions) so that return type may vary from T. Declaration public ICardSet? ReadCardSetData(string registeredFileName) Parameters Type Name Description string registeredFileName The object marked for the JsonConverter's 'T' in a . Returns Type Description ICardSet The object marked CollectionType for a keyed ICard implemetation in a TypeRegister; or, if default, ICardSet. Remarks This is necessary in order to override Read(ref Utf8JsonReader, Type, JsonSerializerOptions) but return an interface instead of T. | Edit this page View Source Write(Utf8JsonWriter, TroopCardSet, JsonSerializerOptions) Declaration public override void Write(Utf8JsonWriter writer, TroopCardSet value, JsonSerializerOptions options) Parameters Type Name Description Utf8JsonWriter writer TroopCardSet value JsonSerializerOptions options Overrides JsonConverter<TroopCardSet>.Write(Utf8JsonWriter, TroopCardSet, JsonSerializerOptions) Implements ICardSetDataJConverter"
  },
  "api/Model.DataAccess.Cards.html": {
    "href": "api/Model.DataAccess.Cards.html",
    "title": "Namespace Model.DataAccess.Cards | Hazard!_Docs",
    "summary": "Namespace Model.DataAccess.Cards Classes TroopCardSetDataJConverter The base card set '.json' converter. Interfaces ICardSetDataJConverter Converts '.json' data of a CardSet file to ICardSet."
  },
  "api/Model.DataAccess.DataProvider.html": {
    "href": "api/Model.DataAccess.DataProvider.html",
    "title": "Class DataProvider | Hazard!_Docs",
    "summary": "Class DataProvider Reads and converts data from data files. Inheritance object DataProvider Implements IDataProvider Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Model.DataAccess Assembly: Model.dll Syntax public class DataProvider : IDataProvider Remarks Provides data to IAssetFactory, enabling instance construction of Types registered by a TypeRegister. The TypeRegister must contain objects designated DataFileName, DataConverter, and possibly ConvertedDataType. Constructors | Edit this page View Source DataProvider(ITypeRegister<ITypeRelations>, ILogger<DataProvider>, IOptions<AppConfig>) Reads and converts data from data files. Declaration public DataProvider(ITypeRegister<ITypeRelations> typeRegister, ILogger<DataProvider> logger, IOptions<AppConfig> appConfig) Parameters Type Name Description ITypeRegister<ITypeRelations> typeRegister ILogger<DataProvider> logger IOptions<AppConfig> appConfig Remarks Provides data to IAssetFactory, enabling instance construction of Types registered by a TypeRegister. The TypeRegister must contain objects designated DataFileName, DataConverter, and possibly ConvertedDataType. Properties | Edit this page View Source DataFileMap Gets a map of the names and paths of data files needed for asset generation. Declaration public ReadOnlyDictionary<string, string> DataFileMap { get; } Property Value Type Description ReadOnlyDictionary<string, string> The names of data files as listed by 'appsettings.json.' Remarks Retrieved during 'AppHost' building and injected via DI. Methods | Edit this page View Source GetData(string) Attempts to get data from source files needed to instantiate keyed Types in the TypeRegister. Declaration public object? GetData(string typeName) Parameters Type Name Description string typeName The name object marked by Name for the Type to be constructed. Returns Type Description object An instance of the object marked ConvertedDataType for typeName in TypeRegister. If unsuccessful, null. Exceptions Type Condition KeyNotFoundException Thrown when any necessary element is not found in the TypeRegister or when, in the case of data file names, there is conflict between the registered name and the name found in DataFileMap. Implements IDataProvider"
  },
  "api/Model.DataAccess.GeographyJConverter.html": {
    "href": "api/Model.DataAccess.GeographyJConverter.html",
    "title": "Class GeographyJConverter | Hazard!_Docs",
    "summary": "Class GeographyJConverter The '.json' converter for geography data files. Inheritance object JsonConverter JsonConverter<GeographyInitializer> GeographyJConverter Inherited Members JsonConverter<GeographyInitializer>.CanConvert(Type) JsonConverter<GeographyInitializer>.ReadAsPropertyName(ref Utf8JsonReader, Type, JsonSerializerOptions) JsonConverter<GeographyInitializer>.WriteAsPropertyName(Utf8JsonWriter, GeographyInitializer, JsonSerializerOptions) JsonConverter<GeographyInitializer>.HandleNull JsonConverter<GeographyInitializer>.Type object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Model.DataAccess Assembly: Model.dll Syntax public class GeographyJConverter : JsonConverter<GeographyInitializer> Remarks By default, a GeographyJConverter should be registered as DataConverter of BoardGeography within TypeRegister. Methods | Edit this page View Source Read(ref Utf8JsonReader, Type, JsonSerializerOptions) Reads and converts the JSON to type GeographyInitializer. Declaration public override GeographyInitializer? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) Parameters Type Name Description Utf8JsonReader reader The reader. Type typeToConvert The type to convert. JsonSerializerOptions options An object that specifies serialization options to use. Returns Type Description GeographyInitializer The converted value. Overrides JsonConverter<GeographyInitializer>.Read(ref Utf8JsonReader, Type, JsonSerializerOptions) | Edit this page View Source Write(Utf8JsonWriter, GeographyInitializer, JsonSerializerOptions) Writes a specified value as JSON. Declaration public override void Write(Utf8JsonWriter writer, GeographyInitializer value, JsonSerializerOptions options) Parameters Type Name Description Utf8JsonWriter writer The writer to write to. GeographyInitializer value The value to convert to JSON. JsonSerializerOptions options An object that specifies serialization options to use. Overrides JsonConverter<GeographyInitializer>.Write(Utf8JsonWriter, GeographyInitializer, JsonSerializerOptions)"
  },
  "api/Model.DataAccess.html": {
    "href": "api/Model.DataAccess.html",
    "title": "Namespace Model.DataAccess | Hazard!_Docs",
    "summary": "Namespace Model.DataAccess Classes AssetFactory Instantiates classes for registered types at run-time. AssetFetcher Exposes the Data Access 'Layer' to the Model, providing bespoke methods for retrieving Game Assets at run-time. DataProvider Reads and converts data from data files. GeographyJConverter The '.json' converter for geography data files."
  },
  "api/Model.Entities.CardBase.html": {
    "href": "api/Model.Entities.CardBase.html",
    "title": "Class CardBase | Hazard!_Docs",
    "summary": "Class CardBase Encapsulates all objects primarily using ICards. Inheritance object CardBase Implements IBinarySerializable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Model.Entities Assembly: Model.dll Syntax public class CardBase : IBinarySerializable Remarks E.g. GameDeck and ICardSets. Constructors | Edit this page View Source CardBase(ILoggerFactory, ITypeRegister<ITypeRelations>) Encapsulates all objects primarily using ICards. Declaration public CardBase(ILoggerFactory loggerFactory, ITypeRegister<ITypeRelations> registry) Parameters Type Name Description ILoggerFactory loggerFactory Instantiates loggers for logging debug information and errors. ITypeRegister<ITypeRelations> registry The application's type registry. Remarks E.g. GameDeck and ICardSets. Properties | Edit this page View Source CardFactory Gets a factory for making ICards. Declaration public CardFactory CardFactory { get; } Property Value Type Description CardFactory Remarks Used when loading from a save file; see LoadFromBinary(BinaryReader). | Edit this page View Source GameDeck Gets or sets the deck of cards to be used for this game. Declaration public Deck GameDeck { get; set; } Property Value Type Description Deck | Edit this page View Source Sets Gets or sets a list of card sets. Declaration public List<ICardSet> Sets { get; set; } Property Value Type Description List<ICardSet> Methods | Edit this page View Source GetBinarySerials() Asynchronously serializes the IBinarySerializable. Declaration public Task<SerializedData[]> GetBinarySerials() Returns Type Description Task<SerializedData[]> A task whose result contains serialized object data. | Edit this page View Source InitializeDiscardPile(ICard[]) Initializes a discard pile when loading the game from a save file. Declaration public void InitializeDiscardPile(ICard[] cards) Parameters Type Name Description ICard[] cards The discard pile's cards built during LoadFromBinary(BinaryReader). | Edit this page View Source InitializeFromAssets(IAssetFetcher, bool) Initializes a cardbase with assets provided by IAssetFetcher. Declaration public void InitializeFromAssets(IAssetFetcher assetFetcher, bool defaultMode) Parameters Type Name Description IAssetFetcher assetFetcher Gets initialized assets (objects loaded from data files) for specific Model properties. bool defaultMode A flag to indicate whether the IGame is in default card mode. Remarks When a new game is started, the CardBase will include all ICards that can be found and converted from 'CardSet.json' files (see FetchCardSets(), and GetAsset(string)). Then, if defaultMode is set to true, only ITroopCards will be retained. | Edit this page View Source InitializeLibrary(ICard[]) Initializes a library when loading the game from a save file. Declaration public void InitializeLibrary(ICard[] cards) Parameters Type Name Description ICard[] cards The library's cards built during LoadFromBinary(BinaryReader). | Edit this page View Source LoadFromBinary(BinaryReader) Loads the IBinarySerializable with binary values read from a file. Declaration public bool LoadFromBinary(BinaryReader reader) Parameters Type Name Description BinaryReader reader A reader whose BaseStream was previously written to using BinarySerializer and GetBinarySerials(). Returns Type Description bool true if the load succeeded without exceptions; otherwise, false. | Edit this page View Source MapCardsToSets(ICard[]) Ensures cards and card sets are properly mapped. Declaration public void MapCardsToSets(ICard[] cards) Parameters Type Name Description ICard[] cards The cards whose sets must be discovered and mapped to. Remarks Necessary since application and/or game logic may depend on CardSet (e.g. IsValidTrade(ICard[])). Implements IBinarySerializable"
  },
  "api/Model.Entities.Cards.CardFactory.html": {
    "href": "api/Model.Entities.Cards.CardFactory.html",
    "title": "Class CardFactory | Hazard!_Docs",
    "summary": "Class CardFactory Activates card instances based on registry data. Inheritance object CardFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Model.Entities.Cards Assembly: Model.dll Syntax public class CardFactory Remarks Useful for objects who need to create them from save file data. Constructors | Edit this page View Source CardFactory(ITypeRegister<ITypeRelations>, ILoggerFactory) Activates card instances based on registry data. Declaration public CardFactory(ITypeRegister<ITypeRelations> typeRegister, ILoggerFactory loggerFactory) Parameters Type Name Description ITypeRegister<ITypeRelations> typeRegister The application's type registry, which must have valid entries for the factory to function. ILoggerFactory loggerFactory The factory for providing loggers to the card instances. Remarks Useful for objects who need to create them from save file data. Methods | Edit this page View Source BuildCard(string) Activates a card. Declaration public ICard BuildCard(string typeName) Parameters Type Name Description string typeName The name of the card's type as registered in ITypeRegister<T>. Returns Type Description ICard The activated card. Exceptions Type Condition ArgumentException Thrown if typeName is not registered. InvalidOperationException Thrown if activation of the Type provided by the registry fails."
  },
  "api/Model.Entities.Cards.ITroopCardSetData.html": {
    "href": "api/Model.Entities.Cards.ITroopCardSetData.html",
    "title": "Interface ITroopCardSetData | Hazard!_Docs",
    "summary": "Interface ITroopCardSetData A '.json' conversion data holder for TroopCardSet Inherited Members ICardSetData.Targets Namespace: Model.Entities.Cards Assembly: Model.dll Syntax public interface ITroopCardSetData : ICardSetData Remarks ICardSet intialization requires: (1) '.json' data from IDataProvider, and (2) ICards from IAssetFactory or CardFactory. ICardSetData implementations store the data from step (1). See JData. For an example, see: TroopCardSetData. Properties | Edit this page View Source Insignia Gets or sets insignia values for each ITroopCard in a TroopCardSet. Declaration TroopInsignia[] Insignia { get; set; } Property Value Type Description TroopInsignia[]"
  },
  "api/Model.Entities.Cards.TroopCard.html": {
    "href": "api/Model.Entities.Cards.TroopCard.html",
    "title": "Class TroopCard | Hazard!_Docs",
    "summary": "Class TroopCard Default card type implementation for the base game. Inheritance object TroopCard Implements ITroopCard ICard IBinarySerializable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Model.Entities.Cards Assembly: Model.dll Syntax public class TroopCard : ITroopCard, ICard, IBinarySerializable Constructors | Edit this page View Source TroopCard(ILoggerFactory) Constructs a TroopCard with a logger provided by a logger Factory. Declaration public TroopCard(ILoggerFactory loggerFactory) Parameters Type Name Description ILoggerFactory loggerFactory A logger factory which instantiates loggers for debug information and errors. | Edit this page View Source TroopCard(ILogger<TroopCard>) Constructs a TroopCard with its logger. Declaration public TroopCard(ILogger<TroopCard> logger) Parameters Type Name Description ILogger<TroopCard> logger A logger for debug information and errors. Properties | Edit this page View Source CardSet Gets or sets the parent collection containing this TroopCard in its Cards list. Declaration public ICardSet? CardSet { get; set; } Property Value Type Description ICardSet An ICardSet instance, if this and it have been initialized and mapped. Otherwise, null. | Edit this page View Source Insigne Gets or sets an insignia value for the card. Declaration public TroopInsignia Insigne { get; set; } Property Value Type Description TroopInsignia | Edit this page View Source IsTradeable Gets a flag indicating this card can be traded in for additional armies. Declaration public bool IsTradeable { get; set; } Property Value Type Description bool true if this card can be traded in. Otherwise, false. | Edit this page View Source Logger Gets or sets the logger. Declaration public ILogger Logger { get; set; } Property Value Type Description ILogger | Edit this page View Source ParentTypeName Gets or sets the name of this card's 'parent': the ICardSet that contains it. Declaration public string ParentTypeName { get; } Property Value Type Description string Remarks MemberTypeName of the parent should be equal to \"TroopCard\". | Edit this page View Source SerializablePropertyNames Contains the name of each property that should be serialized via GetBinarySerials(). Declaration public HashSet<string> SerializablePropertyNames { get; } Property Value Type Description HashSet<string> Names should match 'nameof(Property)', and the property must be an IConvertible or IEnumberable{IConvertible} for work with BinarySerializer. | Edit this page View Source Target Gets or sets a list of this card's territory 'targets'. Declaration public TerrID[] Target { get; set; } Property Value Type Description TerrID[] | Edit this page View Source TypeName The name of this card's type. Declaration public string TypeName { get; set; } Property Value Type Description string Remarks Serves as a cached value that allows us to avoid multiple reflection method calls. Implements ITroopCard ICard IBinarySerializable"
  },
  "api/Model.Entities.Cards.TroopCardSet.html": {
    "href": "api/Model.Entities.Cards.TroopCardSet.html",
    "title": "Class TroopCardSet | Hazard!_Docs",
    "summary": "Class TroopCardSet The card set for the game's default card type, TroopCard. Inheritance object TroopCardSet Implements ICardSet Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Model.Entities.Cards Assembly: Model.dll Syntax public class TroopCardSet : ICardSet Remarks ICardSet is initialized in two steps: (1) By ICardSetDataJConverter. See also ICardSetData and IDataProvider. (2) By BuildTroopCards(ICardSet). Properties | Edit this page View Source Cards Gets or sets a list of cards in this card set. Declaration public List<ICard> Cards { get; set; } Property Value Type Description List<ICard> | Edit this page View Source ForcesTrade Gets a flag indicating if a trade should be forced when a matching set of ICards from this set are obtained. Declaration public bool ForcesTrade { get; } Property Value Type Description bool true if obtaining matching cards (satisfying IsValidTrade(ICard[])) should force an IPlayer to trade (via TradeInCards(int, int[])). Otherwise, false. | Edit this page View Source JData Gets the '.json' data object for this card set. Declaration public ITroopCardSetData? JData { get; set; } Property Value Type Description ITroopCardSetData A card set if it has been loaded by the DAL; otherwise, null. Remarks This is provided by the DAL in new games, but will remain null when loading from a save file. | Edit this page View Source MemberTypeName Gets the name of the type which is the intended member of this collection. E.g. \"TroopCard\", see TroopCard. Declaration public string MemberTypeName { get; } Property Value Type Description string Remarks Relationships between ICards, ICardSet, and ICardSetData are established by ITypeRegister<T>, which gets initial values from RegistryInitializer. | Edit this page View Source TypeName Gets the name of this card set's type. Declaration public string TypeName { get; } Property Value Type Description string Remarks A cached value to help avoid multiple reflection method calls (e.g.: .GetType()). Methods | Edit this page View Source FindTradeSets(ICard[]) Identifies any number of matching trade sets present in any ICards. Declaration public ICard[][]? FindTradeSets(ICard[] cards) Parameters Type Name Description ICard[] cards An array of cards in which to search for matching trade-sets. Returns Type Description ICard[][] A staggered array of cards containing each valid trade-set found within cards. Remarks This method solves the 'combination generation' problem; the included solution is brute-force and should be replaced with standard optimal solutions if 'n' (number of cards) or 'k' (number in a match) gets large. | Edit this page View Source IsValidTrade(ICard[]) Determines whether a group of cards is a valid set for trade-in. Declaration public bool IsValidTrade(ICard[] cards) Parameters Type Name Description ICard[] cards An array of cards to test. Returns Type Description bool true if the collection cards qualifies exactly as a valid trade-set. Otherwise, false. Remarks TroopCard, as the default card set, stipulates a matching set of ICard: (1) contains three cards (2) contains only tradeble cards (see IsTradeable) (3) contains TroopCards with all identical OR all different TroopInsignia (after wilds). Implements ICardSet"
  },
  "api/Model.Entities.Cards.TroopCardSetData.html": {
    "href": "api/Model.Entities.Cards.TroopCardSetData.html",
    "title": "Class TroopCardSetData | Hazard!_Docs",
    "summary": "Class TroopCardSetData A '.json' conversion data holder for TroopCardSet Inheritance object TroopCardSetData Implements ITroopCardSetData ICardSetData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Model.Entities.Cards Assembly: Model.dll Syntax public class TroopCardSetData : ITroopCardSetData, ICardSetData Remarks ICardSet intialization requires: (1) '.json' data from IDataProvider, and (2) ICards from IAssetFactory or CardFactory. ICardSetData implementations store the data from step (1). See JData. For an example, see: TroopCardSetData. Properties | Edit this page View Source Insignia Gets or sets insignia values for each ITroopCard in a TroopCardSet. Declaration public TroopInsignia[] Insignia { get; set; } Property Value Type Description TroopInsignia[] | Edit this page View Source Targets Gets or sets the values for each Target as read from the '.json' for their ICardSet. Declaration public TerrID[][] Targets { get; set; } Property Value Type Description TerrID[][] A staggered array of territory targets; each Target will be set to one TerrID array. Implements ITroopCardSetData ICardSetData"
  },
  "api/Model.Entities.Cards.TroopInsignia.html": {
    "href": "api/Model.Entities.Cards.TroopInsignia.html",
    "title": "Enum TroopInsignia | Hazard!_Docs",
    "summary": "Enum TroopInsignia Insignia type for the default cards of the base game. Namespace: Model.Entities.Cards Assembly: Model.dll Syntax public enum TroopInsignia Remarks Matching a set of these allows players to turn their TroopCards in for bonus armies. Each TroopCard face displays its insignia. Fields Name Description Artillery Denotes that its TroopCard displays the 'Artillery' insignia/image. Cavalry Denotes that its TroopCard displays the 'Cavalry' insignia/image. Soldier Denotes that its TroopCard displays the 'Soldier' insignia/image. Wild Serves as any insignia."
  },
  "api/Model.Entities.Cards.html": {
    "href": "api/Model.Entities.Cards.html",
    "title": "Namespace Model.Entities.Cards | Hazard!_Docs",
    "summary": "Namespace Model.Entities.Cards Classes CardFactory Activates card instances based on registry data. TroopCard Default card type implementation for the base game. TroopCardSet The card set for the game's default card type, TroopCard. TroopCardSetData A '.json' conversion data holder for TroopCardSet Interfaces ITroopCardSetData A '.json' conversion data holder for TroopCardSet Enums TroopInsignia Insignia type for the default cards of the base game."
  },
  "api/Model.Entities.Deck.html": {
    "href": "api/Model.Entities.Deck.html",
    "title": "Class Deck | Hazard!_Docs",
    "summary": "Class Deck A deck of cards. Inheritance object Deck Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Model.Entities Assembly: Model.dll Syntax public class Deck Remarks Each card targets at minimum one territory: see Target. Constructors | Edit this page View Source Deck() Constructs an empty deck. Declaration public Deck() | Edit this page View Source Deck(ICardSet) Constructs a deck from a group of cards, placing them all in the Library. Declaration public Deck(ICardSet cardSet) Parameters Type Name Description ICardSet cardSet A card set, whose property Cards contains the ICards that will constitute the deck. | Edit this page View Source Deck(ICardSet[]) Constructs a deck from a group of cards, placing them all in the Library. Declaration public Deck(ICardSet[] cardSets) Parameters Type Name Description ICardSet[] cardSets An array of card sets, each of whose property Cards contains ICards that will constitute the deck. | Edit this page View Source Deck(ICard[]) Constructs a deck from a group of cards, placing them all in the Library. Declaration public Deck(ICard[] cards) Parameters Type Name Description ICard[] cards The cards that will constitute the deck. | Edit this page View Source Deck(ICard[][]) Declaration public Deck(ICard[][] cards) Parameters Type Name Description ICard[][] cards Remarks This constructor is useful when a Deck is to be built from multiple Cards values. Properties | Edit this page View Source DiscardPile Gets or sets the discard pile. Declaration public List<ICard> DiscardPile { get; set; } Property Value Type Description List<ICard> Remarks A discard pile is the collection to which cards are discarded when traded in; see Discard(ICard) and TradeInCards(int, int[]). | Edit this page View Source Library Gets or sets the library. Declaration public List<ICard> Library { get; set; } Property Value Type Description List<ICard> Remarks A library is the collection of cards from which players draw (see DrawCard()). Methods | Edit this page View Source Discard(ICard) Adds a card to the discard pile. Declaration public void Discard(ICard card) Parameters Type Name Description ICard card The discarded card. | Edit this page View Source Discard(ICard[]) Adds a collection of cards to the discard pile. Declaration public void Discard(ICard[] cards) Parameters Type Name Description ICard[] cards The discarded cards. | Edit this page View Source DrawCard() Draws a card from the bottom of the Library. Declaration public ICard DrawCard() Returns Type Description ICard The drawn card. Remarks If Library is empty, Shuffle() is called. | Edit this page View Source Shuffle() Shuffles the deck. Declaration public void Shuffle() Remarks Resulting Library order is generated by a Fisher-Yates shuffle algorithm."
  },
  "api/Model.Entities.EarthBoard.html": {
    "href": "api/Model.Entities.EarthBoard.html",
    "title": "Class EarthBoard | Hazard!_Docs",
    "summary": "Class EarthBoard Encapsulates Data and Actions that directly affect the armies, territories, and continents on the game board. Inheritance object EarthBoard Implements IBoard IBinarySerializable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Model.Entities Assembly: Model.dll Syntax public class EarthBoard : IBoard, IBinarySerializable Remarks The default board of the base game is based on Earth circa 1800. Constructors | Edit this page View Source EarthBoard(IConfiguration, ILogger<EarthBoard>) Builds an Earth board using configuration '.json' values. Declaration public EarthBoard(IConfiguration config, ILogger<EarthBoard> logger) Parameters Type Name Description IConfiguration config An IConfiguration. Typically injected by the DI system. ILogger<EarthBoard> logger A logger for debug information and errors. Properties | Edit this page View Source Armies Gets or inits the territory to armies map. Declaration public Dictionary<TerrID, int> Armies { get; init; } Property Value Type Description Dictionary<TerrID, int> | Edit this page View Source ContinentOwner Gets or inits the continent to owner (player number) map. Declaration public Dictionary<ContID, int> ContinentOwner { get; init; } Property Value Type Description Dictionary<ContID, int> | Edit this page View Source this[int, string] Gets a list of territories or continents owned by a player. Declaration public List<object> this[int playerNumber, string enumName] { get; } Parameters Type Name Description int playerNumber The number of the IPlayer who owns the territories or continents. string enumName The name of TerrID or of ContID, for territory and continent, respectively. Property Value Type Description List<object> A List<T> of either TerrID or ContID. | Edit this page View Source TerritoryOwner Gets or inits the territory to owner (player number) map. Declaration public Dictionary<TerrID, int> TerritoryOwner { get; init; } Property Value Type Description Dictionary<TerrID, int> Methods | Edit this page View Source CheckContinentFlip(TerrID, int) Determines whether a continent has changed ownership after a change in territory ownership. Declaration public void CheckContinentFlip(TerrID changed, int previousOwner) Parameters Type Name Description TerrID changed The territory that changed hands. int previousOwner The Number of the territory's owner before the change. Remarks The new owner is not needed here so long as TerritoryOwner is changed properly before this method is called. | Edit this page View Source Claims(int, TerrID) Updates the board state when a player claims a territory for the first time. Declaration public void Claims(int newPlayer, TerrID territory) Parameters Type Name Description int newPlayer The number of the player that takes the territory.newPlayer TerrID territory The ID of the territory taken control of by newPlayer. Remarks This change should also fire TerritoryChanged and subsequent events. | Edit this page View Source Claims(int, TerrID, int) Declaration public void Claims(int newPlayer, TerrID territory, int armies) Parameters Type Name Description int newPlayer TerrID territory int armies The number of armies the new owner controls in the territory. Remarks This is a variation on Claims(int, TerrID) meant to enable overriding the default one army per claim. | Edit this page View Source Conquer(TerrID, TerrID, int) Changes ownership of a territory after a successful attack. Declaration public void Conquer(TerrID source, TerrID target, int newOwner) Parameters Type Name Description TerrID source The territory from which the attack originated. TerrID target The territory that was attacked and is being conquered. int newOwner The Number of the owner after the attack is completed. | Edit this page View Source GetBinarySerials() Asynchronously serializes the IBinarySerializable. Declaration public Task<SerializedData[]> GetBinarySerials() Returns Type Description Task<SerializedData[]> A task whose result contains serialized object data. | Edit this page View Source LoadFromBinary(BinaryReader) Loads the IBinarySerializable with binary values read from a file. Declaration public bool LoadFromBinary(BinaryReader reader) Parameters Type Name Description BinaryReader reader A reader whose BaseStream was previously written to using BinarySerializer and GetBinarySerials(). Returns Type Description bool true if the load succeeded without exceptions; otherwise, false. | Edit this page View Source Reinforce(TerrID) Increments the armies present within a territory. Declaration public void Reinforce(TerrID territory) Parameters Type Name Description TerrID territory The ID of the territory in Armies to increment. | Edit this page View Source Reinforce(TerrID, int) Increases the armies present within a territory by a specified amount. Declaration public void Reinforce(TerrID territory, int armies) Parameters Type Name Description TerrID territory The ID of the territory in Armies to increase. int armies The value of the increase of armies in the territory. Events | Edit this page View Source ContinentOwnerChanged Gives notice that a continent has changed. Declaration public event EventHandler<IContinentOwnerChangedEventArgs>? ContinentOwnerChanged Event Type Type Description EventHandler<IContinentOwnerChangedEventArgs> Remarks Manually fired when a continent is changed (owner) in an EarthBoard method. | Edit this page View Source TerritoryChanged Gives notice that a territory has changed. Declaration public event EventHandler<ITerritoryChangedEventArgs>? TerritoryChanged Event Type Type Description EventHandler<ITerritoryChangedEventArgs> Remarks Manually fired when a territory is changed (owner or armies) in an EarthBoard method. Implements IBoard IBinarySerializable"
  },
  "api/Model.Entities.html": {
    "href": "api/Model.Entities.html",
    "title": "Namespace Model.Entities | Hazard!_Docs",
    "summary": "Namespace Model.Entities Classes CardBase Encapsulates all objects primarily using ICards. Deck A deck of cards. EarthBoard Encapsulates Data and Actions that directly affect the armies, territories, and continents on the game board."
  },
  "api/Model.EventArgs.ContinentOwnerChangedEventArgs.html": {
    "href": "api/Model.EventArgs.ContinentOwnerChangedEventArgs.html",
    "title": "Class ContinentOwnerChangedEventArgs | Hazard!_Docs",
    "summary": "Class ContinentOwnerChangedEventArgs Packages identification data for ContinentOwnerChanged and its handlers. Inheritance object EventArgs ContinentOwnerChangedEventArgs Implements IContinentOwnerChangedEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Model.EventArgs Assembly: Model.dll Syntax public class ContinentOwnerChangedEventArgs : EventArgs, IContinentOwnerChangedEventArgs Constructors | Edit this page View Source ContinentOwnerChangedEventArgs(ContID) Constructs a new ContinentOwnerChangedEventArgs when only the Continent ID is required. Declaration public ContinentOwnerChangedEventArgs(ContID changed) Parameters Type Name Description ContID changed The ID of the Continent that has changed. | Edit this page View Source ContinentOwnerChangedEventArgs(ContID, int) Constructs a new ContinentOwnerChangedEventArgs when both the Continent ID and the number of its former owner is required. Declaration public ContinentOwnerChangedEventArgs(ContID changed, int oldPlayer) Parameters Type Name Description ContID changed The ID of the Continent that has changed. int oldPlayer The number of the Player that owned the Continent prior to the change. \"None\" is represented by -1: see constructor of EarthBoard Properties | Edit this page View Source Changed Gets or inits a value representing the the Continent that changed. Declaration public ContID Changed { get; init; } Property Value Type Description ContID | Edit this page View Source OldPlayer Gets or inits a value representing the Continent's previous owner. Declaration public int? OldPlayer { get; init; } Property Value Type Description int? If Changed was previously owned by a human player, their Number; otherwise, null. If necessary, no prior ownership may be represented by -1. Implements IContinentOwnerChangedEventArgs"
  },
  "api/Model.EventArgs.PlayerChangedEventArgs.html": {
    "href": "api/Model.EventArgs.PlayerChangedEventArgs.html",
    "title": "Class PlayerChangedEventArgs | Hazard!_Docs",
    "summary": "Class PlayerChangedEventArgs Contract for EventArgs used by PlayerChanged. Inheritance object EventArgs PlayerChangedEventArgs Implements IPlayerChangedEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Model.EventArgs Assembly: Model.dll Syntax public class PlayerChangedEventArgs : EventArgs, IPlayerChangedEventArgs Remarks Consumed primarily by IPlayerData. Constructors | Edit this page View Source PlayerChangedEventArgs(string) Constructs a PlayerChangedEventArgs for when an IPlayer property changes, but no stored values need to be passed. (Ie, the alert and a property name is sufficient) Declaration public PlayerChangedEventArgs(string propName) Parameters Type Name Description string propName The name of the property which changed. | Edit this page View Source PlayerChangedEventArgs(string, object?, object?) Constructs a PlayerChangedEventArgs for when any property on IPlayer changes apart from tha Hand. Declaration public PlayerChangedEventArgs(string propName, object? oldValue, object? newValue) Parameters Type Name Description string propName The name of the property which changed. object oldValue The old value, from before the change. object newValue The new value, from after the change. | Edit this page View Source PlayerChangedEventArgs(string, object?, object?, int) Constructs a PlayerChangedEventArgs for when Hand changes. Declaration public PlayerChangedEventArgs(string propName, object? oldValue, object? newValue, int handIndex) Parameters Type Name Description string propName The name of the property which changed. object oldValue The old value, from before the change. object newValue The new value, from after the change. int handIndex The index at which Hand changed. Properties | Edit this page View Source HandIndex Gets or inits the index of the hand collection which changed. Declaration public int? HandIndex { get; init; } Property Value Type Description int? An index, if the Hand changed; otherwise, null. | Edit this page View Source NewValue Gets or inits the new value after a change to a property on IPlayer. Declaration public object? NewValue { get; init; } Property Value Type Description object The new value of the property, if any; otherwise, null. | Edit this page View Source OldValue Gets or inits the old value after a change to a property on IPlayer. Declaration public object? OldValue { get; init; } Property Value Type Description object The old value of the property, if any; otherwise, null. | Edit this page View Source PropertyName Gets or inits the name of the property which changed. Declaration public string PropertyName { get; init; } Property Value Type Description string Implements IPlayerChangedEventArgs"
  },
  "api/Model.EventArgs.TerritoryChangedEventArgs.html": {
    "href": "api/Model.EventArgs.TerritoryChangedEventArgs.html",
    "title": "Class TerritoryChangedEventArgs | Hazard!_Docs",
    "summary": "Class TerritoryChangedEventArgs A contract for EventArgs used by TerritoryChanged. Inheritance object EventArgs TerritoryChangedEventArgs Implements ITerritoryChangedEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Model.EventArgs Assembly: Model.dll Syntax public class TerritoryChangedEventArgs : EventArgs, ITerritoryChangedEventArgs Constructors | Edit this page View Source TerritoryChangedEventArgs(TerrID) Constructs a TerritoryChangedEventArgs with only territory ID data. Declaration public TerritoryChangedEventArgs(TerrID changed) Parameters Type Name Description TerrID changed The ID of the changed territory. | Edit this page View Source TerritoryChangedEventArgs(TerrID, int) Constructs a TerritoryChangedEventArgs with both territory ID and player owner number data. Declaration public TerritoryChangedEventArgs(TerrID changed, int playerNumber) Parameters Type Name Description TerrID changed The ID of the changed territory. int playerNumber The player number of the new owner of the territory. Properties | Edit this page View Source Changed Gets or inits the ID of the territory that changed. Declaration public TerrID Changed { get; init; } Property Value Type Description TerrID | Edit this page View Source Player Gets or inits the number of the player now associated with the changed territory. Declaration public int? Player { get; init; } Property Value Type Description int? 0-5 if the change involved an see IPlayer (ie, if ownership changed); otherwise, null. Implements ITerritoryChangedEventArgs"
  },
  "api/Model.EventArgs.html": {
    "href": "api/Model.EventArgs.html",
    "title": "Namespace Model.EventArgs | Hazard!_Docs",
    "summary": "Namespace Model.EventArgs Classes ContinentOwnerChangedEventArgs Packages identification data for ContinentOwnerChanged and its handlers. PlayerChangedEventArgs Contract for EventArgs used by PlayerChanged. TerritoryChangedEventArgs A contract for EventArgs used by TerritoryChanged."
  },
  "api/Shared.Enums.GamePhase.html": {
    "href": "api/Shared.Enums.GamePhase.html",
    "title": "Enum GamePhase | Hazard!_Docs",
    "summary": "Enum GamePhase Categorizes the phases of the game state. Namespace: Shared.Enums Assembly: Model.dll Syntax public enum GamePhase Remarks Rules stipulate that, after setup, a Player's Turn consists of, in order: Place, Attack, and Move. Note: This is a bit clunky -- especially with the new addition of \"TwoPlayerSetup\" -- but is workable for now. Fields Name Description Attack The game is simulating and recording Player attacks. DefaultSetup The game is in the default multiplayer setup. GameOver The game has completed. Move The game is recording Player troop movements. Null The game is in a null state; e.g. uninitialized Place The game is recording placement of Player armies. TwoPlayerSetup The game is in two-player setup."
  },
  "api/Shared.Enums.html": {
    "href": "api/Shared.Enums.html",
    "title": "Namespace Shared.Enums | Hazard!_Docs",
    "summary": "Namespace Shared.Enums Enums GamePhase Categorizes the phases of the game state."
  },
  "api/Shared.Geography.BoardGeography.html": {
    "href": "api/Shared.Geography.BoardGeography.html",
    "title": "Class BoardGeography | Hazard!_Docs",
    "summary": "Class BoardGeography Encapsulates maps and methods for board Geography. Inheritance object BoardGeography Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Shared.Geography Assembly: Model.dll Syntax public static class BoardGeography Properties | Edit this page View Source NumContinents Gets the number of continents on the board. Declaration public static int NumContinents { get; } Property Value Type Description int | Edit this page View Source NumTerritories Gets the number of territories on the board. Declaration public static int NumTerritories { get; } Property Value Type Description int Methods | Edit this page View Source GetContinentMembers(ContID) Gets the full group of territories within a given continent. Declaration public static HashSet<TerrID> GetContinentMembers(ContID continent) Parameters Type Name Description ContID continent The continent whose member territories should be returned. Returns Type Description HashSet<TerrID> The territories that are within continent. | Edit this page View Source GetNeighbors(TerrID) Gets the territory neighbors of a given territory. Declaration public static HashSet<TerrID> GetNeighbors(TerrID territory) Parameters Type Name Description TerrID territory The territory whose neighbors should be returned. Returns Type Description HashSet<TerrID> The neighbors of territory. Remarks A \"neighbor\" is a territory directly adjacent to another. | Edit this page View Source IncludesContinent(HashSet<TerrID>, ContID) Determines whether a group of territories includes the entirety of a given continent. Declaration public static bool IncludesContinent(HashSet<TerrID> territoryList, ContID continent) Parameters Type Name Description HashSet<TerrID> territoryList The group of territories that may contain continent. ContID continent The continent that may or may not be contained by territoryList. Returns Type Description bool true if continent is entirely covered by the territories iin territoryList; otherwise, false. | Edit this page View Source Initialize(GeographyInitializer) Initializes this BoardGeography with values from a 'BoardGeography.json' via the DAL. Declaration public static void Initialize(GeographyInitializer initializer) Parameters Type Name Description GeographyInitializer initializer The initializer provided by the DAL. Must be registered as ConvertedDataType for BoardGeography. | Edit this page View Source TerritoryToContinent(TerrID) Gets the continent containing a given territory. Declaration public static ContID TerritoryToContinent(TerrID terrID) Parameters Type Name Description TerrID terrID The territory contained. Returns Type Description ContID The continent containing terrID."
  },
  "api/Shared.Geography.Enums.ContID.html": {
    "href": "api/Shared.Geography.Enums.ContID.html",
    "title": "Enum ContID | Hazard!_Docs",
    "summary": "Enum ContID Simple ID values for the Continents on the game board. Namespace: Shared.Geography.Enums Assembly: Model.dll Syntax public enum ContID Fields Name Description Africa ID for the continent of Africa. Asia ID for the continent of Asia. Europe ID for the continent of Europe. NorthAmerica ID for the continent of North America. Null No continent / null value. Oceania ID for the continent of Oceania. SouthAmerica ID for the continent of South America."
  },
  "api/Shared.Geography.Enums.TerrID.html": {
    "href": "api/Shared.Geography.Enums.TerrID.html",
    "title": "Enum TerrID | Hazard!_Docs",
    "summary": "Enum TerrID Simple ID values for the Territories of the game board. Namespace: Shared.Geography.Enums Assembly: Model.dll Syntax public enum TerrID Fields Name Description Afghanistan ID for the Territory of Afghanistan. Alaska ID for the Territory of Alaska. Alberta ID for the Territory of Alberta. Argentina ID for the Territory of Argentina. Brazil ID for the Territory of Brazil. CentralAmerica ID for the Territory of Central America. China ID for the Territory of China. Congo ID for the Territory of Congo. EastAfrica ID for the Territory of East Africa. EasternAustralia ID for the Territory of Eastern Australia. EasternUnitedStates ID for the Territory of Eastern United States. Egypt ID for the Territory of Egypt. GreatBritain ID for the Territory of Great Britain. Greenland ID for the Territory of Greenland. Iceland ID for the Territory of Iceland. India ID for the Territory of India. Indonesia ID for the Territory of Indonesia. Irkutsk ID for the Territory of Irkutsk. Japan ID for the Territory of Japan. Kamchatka ID for the Territory of Kamchatka. Madagascar ID for the Territory of Madagascar. MiddleEast ID for the Middle East Territory. Mongolia ID for the Territory of Mongolia. NewGuinea ID for the Territory of New Guinea. NorthAfrica ID for the Territory of North Africa. NorthernEurope ID for the Territory of Northern Europe. NorthwestTerritory ID for the Northwest Territory. Null No territory / null value. Ontario ID for the Territory of Ontario. Peru ID for the Territory of Peru. Quebec ID for the Territory of Quebec. Scandinavia ID for the Territory of Scandinavia. Siam ID for the Territory of Siam. Siberia ID for the Territory of Siberia. SouthAfrica ID for the Territory of South Africa. SouthernEurope ID for the Territory of Southern Europe. Ukraine ID for the Territory of Ukraine. Ural ID for the Ural Territory. Venezuela ID for the Territory of Venezuela. WesternAustralia ID for the Territory of Western Australia. WesternEurope ID for the Territory of Western Europe. WesternUnitedStates ID for the Territory of the Western United States. Yakutsk ID for the Yakutsk Territory."
  },
  "api/Shared.Geography.Enums.html": {
    "href": "api/Shared.Geography.Enums.html",
    "title": "Namespace Shared.Geography.Enums | Hazard!_Docs",
    "summary": "Namespace Shared.Geography.Enums Enums ContID Simple ID values for the Continents on the game board. TerrID Simple ID values for the Territories of the game board."
  },
  "api/Shared.Geography.GeographyInitializer.html": {
    "href": "api/Shared.Geography.GeographyInitializer.html",
    "title": "Class GeographyInitializer | Hazard!_Docs",
    "summary": "Class GeographyInitializer Initializes BoardGeography with data provided by the DAL. Inheritance object GeographyInitializer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Shared.Geography Assembly: Model.dll Syntax public class GeographyInitializer Remarks This is the target converted data type for BoardGeography within TypeRegister. See FetchGeography(). Properties | Edit this page View Source ContinentEnumType Gets or sets the Type variable read from the data file corresponding to ContID. Declaration public Type? ContinentEnumType { get; set; } Property Value Type Description Type | Edit this page View Source ContinentMembers Maps continents to their members territories. Declaration public Dictionary<Enum, HashSet<Enum>> ContinentMembers { get; } Property Value Type Description Dictionary<Enum, HashSet<Enum>> | Edit this page View Source ContinentNames Gets the names of the continents as given by the values of ContinentEnumType. Declaration public string[] ContinentNames { get; } Property Value Type Description string[] | Edit this page View Source TerritoryEnumType Gets or sets the Type variable read from the data file corresponding to TerrID. Declaration public Type? TerritoryEnumType { get; set; } Property Value Type Description Type | Edit this page View Source TerritoryNames Gets the names of the territories as given by the values of TerritoryEnumType. Declaration public string[] TerritoryNames { get; } Property Value Type Description string[] | Edit this page View Source TerritoryNeighbors Maps territories to their neighbors. Declaration public Dictionary<Enum, HashSet<Enum>> TerritoryNeighbors { get; } Property Value Type Description Dictionary<Enum, HashSet<Enum>> Methods | Edit this page View Source AddContinentMember(string, string) Maps a territory to a continent as its member within ContinentMembers. Declaration public bool AddContinentMember(string continentName, string territoryName) Parameters Type Name Description string continentName The name of the parent continent. string territoryName The name of the member territory. Returns Type Description bool true if the mapping was successful; otherwise, false. | Edit this page View Source AddTerritoryNeighbor(string, string) Maps a territory as a neighbor to another within TerritoryNeighbors. Declaration public bool AddTerritoryNeighbor(string territoryName, string neighborName) Parameters Type Name Description string territoryName The name of the territory whose neighbor list should now include neighborName. string neighborName The name of the territory to be mapped as a neighbor to territoryName. Returns Type Description bool true if the mapping was successful; otherwise, false. | Edit this page View Source SetEnumTypes((string ContinentEnumName, string TerritoryEnumName)) Prepares this GeographyInitializer for mapping by getting the Enums corresponding to names. Declaration public void SetEnumTypes((string ContinentEnumName, string TerritoryEnumName) names) Parameters Type Name Description (string ContinentEnumName, string TerritoryEnumName) names The names of the Enums that should contain the continents and territories within the board geography. Exceptions Type Condition InvalidDataException Thrown when Enum types could not be generated from names."
  },
  "api/Shared.Geography.html": {
    "href": "api/Shared.Geography.html",
    "title": "Namespace Shared.Geography | Hazard!_Docs",
    "summary": "Namespace Shared.Geography Classes BoardGeography Encapsulates maps and methods for board Geography. GeographyInitializer Initializes BoardGeography with data provided by the DAL."
  },
  "api/Shared.Interfaces.IContinentOwnerChangedEventArgs.html": {
    "href": "api/Shared.Interfaces.IContinentOwnerChangedEventArgs.html",
    "title": "Interface IContinentOwnerChangedEventArgs | Hazard!_Docs",
    "summary": "Interface IContinentOwnerChangedEventArgs EventArgs contract as used by ContinentOwnerChanged. Namespace: Shared.Interfaces Assembly: Model.dll Syntax public interface IContinentOwnerChangedEventArgs Properties | Edit this page View Source Changed Gets or inits a value representing the the Continent that changed. Declaration ContID Changed { get; init; } Property Value Type Description ContID | Edit this page View Source OldPlayer Gets or inits a value representing the Continent's previous owner. Declaration int? OldPlayer { get; init; } Property Value Type Description int? If Changed was previously owned by a human player, their Number; otherwise, null. If necessary, no prior ownership may be represented by -1."
  },
  "api/Shared.Interfaces.ITroopCardInfo.html": {
    "href": "api/Shared.Interfaces.ITroopCardInfo.html",
    "title": "Interface ITroopCardInfo | Hazard!_Docs",
    "summary": "Interface ITroopCardInfo Defines public data for ViewModel structs representing ITroopCards. Inherited Members ICardInfo.Owner ICardInfo.OwnerHandIndex ICardInfo.TargetTerritory ICardInfo.TargetContinent Namespace: Shared.Interfaces Assembly: Model.dll Syntax public interface ITroopCardInfo : ICardInfo Properties | Edit this page View Source DisplayName Gets or inits the name to display in the UI for the corresponding ITroopCard. Declaration string DisplayName { get; init; } Property Value Type Description string | Edit this page View Source InsigniaName Gets or sets the name of the corresponding Insigne. Declaration string InsigniaName { get; set; } Property Value Type Description string | Edit this page View Source InsigniaValue Gets or sets the integer value of the corresponding Insigne. Declaration int InsigniaValue { get; set; } Property Value Type Description int"
  },
  "api/Shared.Interfaces.Model.IAssetFactory.html": {
    "href": "api/Shared.Interfaces.Model.IAssetFactory.html",
    "title": "Interface IAssetFactory | Hazard!_Docs",
    "summary": "Interface IAssetFactory Instantiates classes for registered types at run-time. Namespace: Shared.Interfaces.Model Assembly: Model.dll Syntax public interface IAssetFactory Remarks IAssetFactory is intended for use in the Data Access Layer. Methods | Edit this page View Source GetAsset(string) Builds instances of Types registered in a ITypeRegister<T>, from data provided by a IDataProvider. Declaration object? GetAsset(string typeName) Parameters Type Name Description string typeName The name of the registered Type. Returns Type Description object An instance or collection of instances of the Type registered under typeName, as determined by its registered ConvertedDataType."
  },
  "api/Shared.Interfaces.Model.IAssetFetcher.html": {
    "href": "api/Shared.Interfaces.Model.IAssetFetcher.html",
    "title": "Interface IAssetFetcher | Hazard!_Docs",
    "summary": "Interface IAssetFetcher Exposes the Data Access 'Layer' to the Model, providing bespoke methods for retrieving Game Assets at run-time. Namespace: Shared.Interfaces.Model Assembly: Model.dll Syntax public interface IAssetFetcher Remarks Expansion of the DAL to cover other Types requires extension of this interface. Methods | Edit this page View Source FetchCardSets() Begins the process of data reading, conversion, and object initialization for ICards. Declaration List<ICardSet> FetchCardSets() Returns Type Description List<ICardSet> A list of card sets whose Cards. | Edit this page View Source FetchGeography() Begins the process of data reading, conversion, and object initialization for BoardGeography. Declaration GeographyInitializer FetchGeography() Returns Type Description GeographyInitializer An initializer object to be used with Initialize(GeographyInitializer)."
  },
  "api/Shared.Interfaces.Model.IBinarySerializable.html": {
    "href": "api/Shared.Interfaces.Model.IBinarySerializable.html",
    "title": "Interface IBinarySerializable | Hazard!_Docs",
    "summary": "Interface IBinarySerializable Stipulates an object is serializable using BinarySerializer. Namespace: Shared.Interfaces.Model Assembly: Model.dll Syntax public interface IBinarySerializable Methods | Edit this page View Source GetBinarySerials() Asynchronously serializes the IBinarySerializable. Declaration Task<SerializedData[]> GetBinarySerials() Returns Type Description Task<SerializedData[]> A task whose result contains serialized object data. | Edit this page View Source LoadFromBinary(BinaryReader) Loads the IBinarySerializable with binary values read from a file. Declaration bool LoadFromBinary(BinaryReader reader) Parameters Type Name Description BinaryReader reader A reader whose BaseStream was previously written to using BinarySerializer and GetBinarySerials(). Returns Type Description bool true if the load succeeded without exceptions; otherwise, false."
  },
  "api/Shared.Interfaces.Model.IBoard.html": {
    "href": "api/Shared.Interfaces.Model.IBoard.html",
    "title": "Interface IBoard | Hazard!_Docs",
    "summary": "Interface IBoard Encapsulates Data and Actions that directly affect the armies, territories, and continents on the game board. Inherited Members IBinarySerializable.LoadFromBinary(BinaryReader) IBinarySerializable.GetBinarySerials() Namespace: Shared.Interfaces.Model Assembly: Model.dll Syntax public interface IBoard : IBinarySerializable Properties | Edit this page View Source Armies Contains the number of armies in each territory. Declaration Dictionary<TerrID, int> Armies { get; init; } Property Value Type Description Dictionary<TerrID, int> | Edit this page View Source ContinentOwner Contains the player number of the owner of each continent. Declaration Dictionary<ContID, int> ContinentOwner { get; init; } Property Value Type Description Dictionary<ContID, int> | Edit this page View Source this[int, string] Gets a list of territories or of continents on the board owned by a specfied player. Declaration List<object> this[int playerNumber, string enumName] { get; } Parameters Type Name Description int playerNumber The number of the specified player. string enumName The name of either TerrID or ContID, for territories owner or continents owned, respectively. Property Value Type Description List<object> A list of all territories OR a list of all continents owned by player playerNumber. | Edit this page View Source TerritoryOwner Contains the player number of the owner of each territory. Declaration Dictionary<TerrID, int> TerritoryOwner { get; init; } Property Value Type Description Dictionary<TerrID, int> Methods | Edit this page View Source CheckContinentFlip(TerrID, int) Determines whether a continent has changed ownership after a change in territory ownership. Declaration void CheckContinentFlip(TerrID changed, int previousOwner) Parameters Type Name Description TerrID changed The territory that changed hands. int previousOwner The Number of the territory's owner before the change. Remarks The new owner is not needed here so long as TerritoryOwner is changed properly before this method is called. | Edit this page View Source Claims(int, TerrID) Updates the board state when a player claims a territory for the first time. Declaration void Claims(int newPlayer, TerrID territory) Parameters Type Name Description int newPlayer The number of the player that takes the territory.newPlayer TerrID territory The ID of the territory taken control of by newPlayer. Remarks This change should also fire TerritoryChanged and subsequent events. | Edit this page View Source Claims(int, TerrID, int) Declaration void Claims(int newPlayer, TerrID territory, int armies) Parameters Type Name Description int newPlayer TerrID territory int armies The number of armies the new owner controls in the territory. Remarks This is a variation on Claims(int, TerrID) meant to enable overriding the default one army per claim. | Edit this page View Source Conquer(TerrID, TerrID, int) Changes ownership of a territory after a successful attack. Declaration void Conquer(TerrID source, TerrID target, int newOwner) Parameters Type Name Description TerrID source The territory from which the attack originated. TerrID target The territory that was attacked and is being conquered. int newOwner The Number of the owner after the attack is completed. | Edit this page View Source Reinforce(TerrID) Increments the armies present within a territory. Declaration void Reinforce(TerrID territory) Parameters Type Name Description TerrID territory The ID of the territory in Armies to increment. | Edit this page View Source Reinforce(TerrID, int) Increases the armies present within a territory by a specified amount. Declaration void Reinforce(TerrID territory, int armies) Parameters Type Name Description TerrID territory The ID of the territory in Armies to increase. int armies The value of the increase of armies in the territory. Events | Edit this page View Source ContinentOwnerChanged Notifies IMainVM that a continent's owner has changed. Declaration event EventHandler<IContinentOwnerChangedEventArgs>? ContinentOwnerChanged Event Type Type Description EventHandler<IContinentOwnerChangedEventArgs> Remarks Should be invoked manually when affecting changes on ContinentOwner. | Edit this page View Source TerritoryChanged Notifies IMainVM that a territory's owner or armies have changed. Declaration event EventHandler<ITerritoryChangedEventArgs> TerritoryChanged Event Type Type Description EventHandler<ITerritoryChangedEventArgs> Remarks Should be invoked manually when affecting changes on Armies or TerritoryOwner."
  },
  "api/Shared.Interfaces.Model.ICard.html": {
    "href": "api/Shared.Interfaces.Model.ICard.html",
    "title": "Interface ICard | Hazard!_Docs",
    "summary": "Interface ICard Base interface for all cards. Provides default properties and methods allowing for run-time serialization. Inherited Members IBinarySerializable.LoadFromBinary(BinaryReader) IBinarySerializable.GetBinarySerials() Namespace: Shared.Interfaces.Model Assembly: Model.dll Syntax public interface ICard : IBinarySerializable Remarks Default serialization methods provided use reflection and should be overridden if there are performance concerns. Properties | Edit this page View Source CardSet Gets or sets a reference to a parent ICardSet containing this card. Declaration ICardSet? CardSet { get; set; } Property Value Type Description ICardSet The ICardSet containing this ICard, if both have been initialized and mapped. Otherwise, null. | Edit this page View Source IsTradeable Gets a flag indicating this card can be traded in for additional armies. Declaration bool IsTradeable { get; set; } Property Value Type Description bool true if this card can be traded in. Otherwise, false. | Edit this page View Source Logger Gets or sets the logger. Declaration ILogger Logger { get; set; } Property Value Type Description ILogger | Edit this page View Source ParentTypeName Gets the name of the parent type of this card. Declaration string ParentTypeName { get; } Property Value Type Description string Remarks Should be set by default to the nameof the type of the ICardSet implementation containing this card (its \"parent\"). | Edit this page View Source SerializablePropertyNames Contains the name of each property that should be serialized via GetBinarySerials(). Declaration HashSet<string> SerializablePropertyNames { get; } Property Value Type Description HashSet<string> Names should match 'nameof(Property)', and the property must be an IConvertible or IEnumberable{IConvertible} for work with BinarySerializer. | Edit this page View Source Target Gets or sets a list of this card's territory 'targets'. Declaration TerrID[] Target { get; set; } Property Value Type Description TerrID[] | Edit this page View Source TypeName The name of this card's type. Declaration string TypeName { get; set; } Property Value Type Description string Remarks Serves as a cached value that allows us to avoid multiple reflection method calls."
  },
  "api/Shared.Interfaces.Model.ICardSet.html": {
    "href": "api/Shared.Interfaces.Model.ICardSet.html",
    "title": "Interface ICardSet | Hazard!_Docs",
    "summary": "Interface ICardSet Data and methods for a collection of Cards. Namespace: Shared.Interfaces.Model Assembly: Model.dll Syntax public interface ICardSet Remarks ICardSet is initialized in two steps: (1) By ICardSetDataJConverter. See also ICardSetData and IDataProvider. (2) By BuildTroopCards(ICardSet). Properties | Edit this page View Source Cards Gets or sets a list of cards in this card set. Declaration List<ICard> Cards { get; set; } Property Value Type Description List<ICard> | Edit this page View Source ForcesTrade Gets a flag indicating if a trade should be forced when a matching set of ICards from this set are obtained. Declaration bool ForcesTrade { get; } Property Value Type Description bool true if obtaining matching cards (satisfying IsValidTrade(ICard[])) should force an IPlayer to trade (via TradeInCards(int, int[])). Otherwise, false. | Edit this page View Source JData Gets the '.json' data object for this card set. Declaration ICardSetData? JData { get; } Property Value Type Description ICardSetData A card set if it has been loaded by the DAL; otherwise, null. Remarks This is provided by the DAL in new games, but will remain null when loading from a save file. | Edit this page View Source MemberTypeName Gets the name of the type which is the intended member of this collection. E.g. \"TroopCard\", see TroopCard. Declaration string MemberTypeName { get; } Property Value Type Description string Remarks Relationships between ICards, ICardSet, and ICardSetData are established by ITypeRegister<T>, which gets initial values from RegistryInitializer. | Edit this page View Source TypeName Gets the name of this card set's type. Declaration string TypeName { get; } Property Value Type Description string Remarks A cached value to help avoid multiple reflection method calls (e.g.: .GetType()). Methods | Edit this page View Source FindTradeSets(ICard[]) Identifies any number of matching trade sets present in any ICards. Declaration ICard[][]? FindTradeSets(ICard[] cards) Parameters Type Name Description ICard[] cards An array of cards in which to search for matching trade-sets. Returns Type Description ICard[][] A staggered array of cards containing each valid trade-set found within cards. | Edit this page View Source IsParent(ICard) Validates a card as a member of this set. Declaration bool IsParent(ICard card) Parameters Type Name Description ICard card The card that may be a member of this card set. Returns Type Description bool true if card's relevant properties verify it belongs to this set; otherwise, false. | Edit this page View Source IsValidTrade(ICard[]) Determines whether a group of cards is a valid set for trade-in. Declaration bool IsValidTrade(ICard[] cards) Parameters Type Name Description ICard[] cards An array of cards to test. Returns Type Description bool true if the collection cards qualifies exactly as a valid trade-set. Otherwise, false."
  },
  "api/Shared.Interfaces.Model.ICardSetData.html": {
    "href": "api/Shared.Interfaces.Model.ICardSetData.html",
    "title": "Interface ICardSetData | Hazard!_Docs",
    "summary": "Interface ICardSetData A base interface for '.json' conversion classes for ICardSets. Namespace: Shared.Interfaces.Model Assembly: Model.dll Syntax public interface ICardSetData Remarks ICardSet intialization requires: (1) '.json' data from IDataProvider, and (2) ICards from IAssetFactory or CardFactory. ICardSetData implementations store the data from step (1). See JData. For an example, see: TroopCardSetData. Properties | Edit this page View Source Targets Gets or sets the values for each Target as read from the '.json' for their ICardSet. Declaration TerrID[][] Targets { get; set; } Property Value Type Description TerrID[][] A staggered array of territory targets; each Target will be set to one TerrID array."
  },
  "api/Shared.Interfaces.Model.IDataProvider.html": {
    "href": "api/Shared.Interfaces.Model.IDataProvider.html",
    "title": "Interface IDataProvider | Hazard!_Docs",
    "summary": "Interface IDataProvider Reads and converts data from data files. Namespace: Shared.Interfaces.Model Assembly: Model.dll Syntax public interface IDataProvider Remarks Provides data to IAssetFactory, enabling instance construction of Types registered by a TypeRegister. The TypeRegister must contain objects designated DataFileName, DataConverter, and possibly ConvertedDataType. Properties | Edit this page View Source DataFileMap Gets a map of the names and paths of data files needed for asset generation. Declaration ReadOnlyDictionary<string, string> DataFileMap { get; } Property Value Type Description ReadOnlyDictionary<string, string> The names of data files as listed by 'appsettings.json.' Remarks Retrieved during 'AppHost' building and injected via DI. Methods | Edit this page View Source GetData(string) Attempts to get data from source files needed to instantiate keyed Types in the TypeRegister. Declaration object? GetData(string typeName) Parameters Type Name Description string typeName The name object marked by Name for the Type to be constructed. Returns Type Description object An instance of the object marked ConvertedDataType for typeName in TypeRegister. If unsuccessful, null."
  },
  "api/Shared.Interfaces.Model.IGame.html": {
    "href": "api/Shared.Interfaces.Model.IGame.html",
    "title": "Interface IGame | Hazard!_Docs",
    "summary": "Interface IGame Encapsulates the current game for injection into IMainVM. Inherited Members IBinarySerializable.LoadFromBinary(BinaryReader) IBinarySerializable.GetBinarySerials() Namespace: Shared.Interfaces.Model Assembly: Model.dll Syntax public interface IGame : IBinarySerializable Properties | Edit this page View Source AssetFetcher Gets the facade of the DAL. Declaration IAssetFetcher AssetFetcher { get; } Property Value Type Description IAssetFetcher | Edit this page View Source Board Gets an instance describing the Game board; stores both data and relations between Board objects. Declaration IBoard Board { get; } Property Value Type Description IBoard | Edit this page View Source Cards Gets the \"card base\", containing all ICards, ICardSets, and Decks. Declaration CardBase Cards { get; } Property Value Type Description CardBase | Edit this page View Source DefaultCardMode Gets a flag indicating whether the game is set to default card mode. Declaration bool DefaultCardMode { get; } Property Value Type Description bool true if the IGame has been set to allow only the default cards. Otherwise, if others are added (e.g. Mission Cards), false. | Edit this page View Source ID Gets the unique ID of the game. Declaration Guid ID { get; } Property Value Type Description Guid | Edit this page View Source Players Gets the list of players in the game. Declaration List<IPlayer> Players { get; } Property Value Type Description List<IPlayer> After initialization and/or loading, should have a count of 2-6. | Edit this page View Source State Gets the game's state machine, which tracks player count and status, turns, etc. Declaration StateMachine State { get; } Property Value Type Description StateMachine | Edit this page View Source Values Gets a data object containing game-specific rules values, like continent bonuses or equations for bonus armies. Declaration IRuleValues Values { get; } Property Value Type Description IRuleValues Methods | Edit this page View Source Save(bool, string) Save to a file. Declaration Task Save(bool isNewFile, string fileName) Parameters Type Name Description bool isNewFile Indicates whether the save file is new. string fileName The name of the save file. Returns Type Description Task | Edit this page View Source UpdatePlayerNames(string[]) Updates player names. Declaration void UpdatePlayerNames(string[] names) Parameters Type Name Description string[] names Player names in ascending player number order. Remarks Useful after loading a game from a file. Events | Edit this page View Source PlayerLost Fires when a player loses, carrying their Number. Declaration event EventHandler<int>? PlayerLost Event Type Type Description EventHandler<int> | Edit this page View Source PlayerWon Fires when a player wins, carrying their Number. Declaration event EventHandler<int>? PlayerWon Event Type Type Description EventHandler<int>"
  },
  "api/Shared.Interfaces.Model.IPlayer.html": {
    "href": "api/Shared.Interfaces.Model.IPlayer.html",
    "title": "Interface IPlayer | Hazard!_Docs",
    "summary": "Interface IPlayer Represents a player in the game. Inherited Members IBinarySerializable.LoadFromBinary(BinaryReader) IBinarySerializable.GetBinarySerials() Namespace: Shared.Interfaces.Model Assembly: Model.dll Syntax public interface IPlayer : IBinarySerializable Properties | Edit this page View Source ArmyBonus Gets the bonus a player receives to their army pool each turn. Declaration int ArmyBonus { get; } Property Value Type Description int The default rules never allow this to fall below 3 (MinimumArmyBonus). It is calculated by CalculateArmyBonus(int, List<ContID>). Remarks Should be recalculated at the start of each turn (during Place) | Edit this page View Source ArmyPool Gets or sets the current number of armies a player has left to place. Declaration int ArmyPool { get; set; } Property Value Type Description int An integer with an initial value equal to ArmyBonus that is reduced when an IPlayer places an army during Place. | Edit this page View Source ContinentBonus Gets or sets the increase to ArmyBonus a player receives from controlling continents. Declaration int ContinentBonus { get; set; } Property Value Type Description int A natural number (0 or positive integer) determined by ContinentBonus and the extent of the player's ControlledTerritories. | Edit this page View Source ControlledTerritories Gets the territories controlled by the player. Declaration HashSet<TerrID> ControlledTerritories { get; } Property Value Type Description HashSet<TerrID> | Edit this page View Source Hand Gets a list of cards in the player's hand. Declaration List<ICard> Hand { get; } Property Value Type Description List<ICard> | Edit this page View Source HasCardSet Gets a flag indicating whether the player holds a valid trade set of cards. Declaration bool HasCardSet { get; set; } Property Value Type Description bool true if Hand contains cards that satisfy their set's IsValidTrade(ICard[]); otherwise false. | Edit this page View Source Name Gets or sets the name of the player. Declaration string Name { get; set; } Property Value Type Description string | Edit this page View Source Number Gets the number of the player. Declaration int Number { get; } Property Value Type Description int An integer from 0-5. Methods | Edit this page View Source AddCard(ICard) Adds a card to this player's Hand. Declaration void AddCard(ICard card) Parameters Type Name Description ICard card The card to add. | Edit this page View Source AddTerritory(TerrID) Adds a territory to this player's control. Declaration bool AddTerritory(TerrID territory) Parameters Type Name Description TerrID territory The territory to add. Returns Type Description bool true if successfully added; otherwise, false. | Edit this page View Source FindCardSet() Finds trade-in card sets in the player's hand. Declaration void FindCardSet() Remarks Determines whether the player holds a set of ICards that are a tradeable set according to FindTradeSets(ICard[]) and IsValidTrade(ICard[]). | Edit this page View Source GetControlledTargets(TerrID[]) Gets territories controlled by this player from among a given set. Declaration TerrID[] GetControlledTargets(TerrID[] targets) Parameters Type Name Description TerrID[] targets The territories to match. Returns Type Description TerrID[] Those territories from among targets controlled by this player. | Edit this page View Source GetsTradeBonus(int) Adds the trade-in bonus to ArmyPool when the player trades in cards. Declaration void GetsTradeBonus(int tradeInBonus) Parameters Type Name Description int tradeInBonus The bonus granted. | Edit this page View Source RemoveCard(int) Removes a card from this player's Hand. Declaration bool RemoveCard(int handIndex) Parameters Type Name Description int handIndex The index of Hand which holds the card to be removed. Returns Type Description bool true if successfully removed; otherwise, false. | Edit this page View Source RemoveTerritory(TerrID) Removes a territory from this player's control. Declaration bool RemoveTerritory(TerrID territory) Parameters Type Name Description TerrID territory The territory to remove. Returns Type Description bool true if successfully removed; otherwise, false. Remarks Also fires PlayerLost if the count of ControlledTerritories falls to 0. Events | Edit this page View Source PlayerChanged Should fire when this IPlayer's property values change. Declaration event EventHandler<IPlayerChangedEventArgs>? PlayerChanged Event Type Type Description EventHandler<IPlayerChangedEventArgs> | Edit this page View Source PlayerLost Fires when this IPlayer has lost the game (by default, when they control no territories). Declaration event EventHandler? PlayerLost Event Type Type Description EventHandler"
  },
  "api/Shared.Interfaces.Model.IPlayerChangedEventArgs.html": {
    "href": "api/Shared.Interfaces.Model.IPlayerChangedEventArgs.html",
    "title": "Interface IPlayerChangedEventArgs | Hazard!_Docs",
    "summary": "Interface IPlayerChangedEventArgs Contract for EventArgs used by PlayerChanged. Namespace: Shared.Interfaces.Model Assembly: Model.dll Syntax public interface IPlayerChangedEventArgs Remarks Consumed primarily by IPlayerData. Properties | Edit this page View Source HandIndex Gets or inits the index of the hand collection which changed. Declaration int? HandIndex { get; init; } Property Value Type Description int? An index, if the Hand changed; otherwise, null. | Edit this page View Source NewValue Gets or inits the new value after a change to a property on IPlayer. Declaration object? NewValue { get; init; } Property Value Type Description object The new value of the property, if any; otherwise, null. | Edit this page View Source OldValue Gets or inits the old value after a change to a property on IPlayer. Declaration object? OldValue { get; init; } Property Value Type Description object The old value of the property, if any; otherwise, null. | Edit this page View Source PropertyName Gets or inits the name of the property which changed. Declaration string PropertyName { get; init; } Property Value Type Description string"
  },
  "api/Shared.Interfaces.Model.IPromptTradeEventArgs.html": {
    "href": "api/Shared.Interfaces.Model.IPromptTradeEventArgs.html",
    "title": "Interface IPromptTradeEventArgs | Hazard!_Docs",
    "summary": "Interface IPromptTradeEventArgs A contract for EventArgs used by PromptTradeIn. Namespace: Shared.Interfaces.Model Assembly: Model.dll Syntax public interface IPromptTradeEventArgs Remarks Fires when a player must be prompted with the option to trade in cards. Properties | Edit this page View Source Force Gets a flag indicating whether the trade is forced. Declaration bool Force { get; } Property Value Type Description bool true if the player must make the trade before proceeding; otherwises, false. | Edit this page View Source Player Gets the number of the player prompted. Declaration int Player { get; } Property Value Type Description int A number matching the Number of the player to prompt."
  },
  "api/Shared.Interfaces.Model.IRegulator.html": {
    "href": "api/Shared.Interfaces.Model.IRegulator.html",
    "title": "Interface IRegulator | Hazard!_Docs",
    "summary": "Interface IRegulator Facade for the Model's user interactions. Inherited Members IBinarySerializable.LoadFromBinary(BinaryReader) IBinarySerializable.GetBinarySerials() Namespace: Shared.Interfaces.Model Assembly: Model.dll Syntax public interface IRegulator : IBinarySerializable Remarks Enforces the game rules -- \"regulates\" player actions; that is, after the ViewModel interprets player actions based on game state, this enforces game rule logic in response, updating the state and readying the model for the next input. Properties | Edit this page View Source CurrentActionsLimit Gets or sets the limit on player actions during this GamePhase. Declaration int CurrentActionsLimit { get; set; } Property Value Type Description int | Edit this page View Source PhaseActions Gets the number of player actions taken during this GamePhase. Declaration int PhaseActions { get; } Property Value Type Description int | Edit this page View Source Reward Gets or sets a card rewarded to a player for a successful attack. Declaration ICard? Reward { get; set; } Property Value Type Description ICard If the current player made a successful attack, an ICard. Otherwise, null. Methods | Edit this page View Source AwardTradeInBonus(TerrID) Executes game-rule logic for awarding bonus armies to a territory due to card trade-in. Declaration void AwardTradeInBonus(TerrID territory) Parameters Type Name Description TerrID territory The territory awarded the bonus armies. Remarks Used when a player controls one or more territories of the Targets upon trade-in. | Edit this page View Source Battle(TerrID, TerrID, (int AttackRoll, int DefenseRoll)[]) Executes game-rule logic when given the results of a battle between the armies of two territories. Declaration void Battle(TerrID source, TerrID target, (int AttackRoll, int DefenseRoll)[] diceRolls) Parameters Type Name Description TerrID source The source of the attack (attacker). TerrID target The target of the attack (defender). (int AttackRoll, int DefenseRoll)[] diceRolls Dice rolls paired together according to game rules. Remarks By default, rolls for attacker and defender should be put in descending order, then paired (unpaired remainders are ignored). | Edit this page View Source CanSelectTerritory(TerrID, TerrID) Determines whether a given territory is a valid selection according to rules and game state. Declaration bool CanSelectTerritory(TerrID newSelected, TerrID oldSelected) Parameters Type Name Description TerrID newSelected The territory being selected. TerrID oldSelected The territory already selected, if any. Returns Type Description bool true if the territory is a valid selection; otherwise, false. | Edit this page View Source CanTradeInCards(int, int[]) Determines whether a subset of a player's hand can be traded in. Declaration bool CanTradeInCards(int player, int[] handIndices) Parameters Type Name Description int player The number of the player whose hand contains the cards to be traded. int[] handIndices The indices of the ICards within Hand that are to be traded. Returns Type Description bool true if circumstances allow the trade; otherwise, false. Remarks Typically, relevant factors include the ICard values, their ICardSet trading functions, and the current GamePhase. | Edit this page View Source ClaimOrReinforce(TerrID) Updates game state in response to a territory being selected during Setup or Place phases (see GamePhase). Declaration void ClaimOrReinforce(TerrID territory) Parameters Type Name Description TerrID territory The territory selected. | Edit this page View Source DeliverCardReward() Delivers the ICard held in Reward, if any, to the appropriate IPlayer. Declaration void DeliverCardReward() | Edit this page View Source Initialize() Initializes this IRegulator. Declaration void Initialize() Remarks This post-construction initialization step is needed to accomodate loading from save files. | Edit this page View Source MoveArmies(TerrID, TerrID, int) Updates the game state in response to the 'Move' action, in which a player moves a number of armies from one controlled territory to another during Move. Declaration void MoveArmies(TerrID source, TerrID target, int armies) Parameters Type Name Description TerrID source The source of the moving armies. TerrID target The target of the move. int armies The number of armies to move. | Edit this page View Source SelectTerritory(TerrID, TerrID) Receives a territory ID selection as Player input and determines course of game logic. Declaration (TerrID Selection, bool RequestInput, int? MaxValue) SelectTerritory(TerrID selected, TerrID priorSelected) Parameters Type Name Description TerrID selected The Territory selected by the player. TerrID priorSelected The previous selection. Returns Type Description (TerrID Selection, bool RequestInput, int? MaxValue) A tuple containing the updated selection and a flag for requesting further player input (needed in Attack and Move phases). If MaxValue is not null, the request is for Move/Advance. | Edit this page View Source TradeInCards(int, int[]) Executes game-rule logic for trading in cards from a player. Declaration void TradeInCards(int player, int[] handIndices) Parameters Type Name Description int player The number of the player trading their cards. int[] handIndices An array representing the indices of Hand which were traded. Events | Edit this page View Source PromptBonusChoice Fires when a player must choose between two or more territories they control to receive a bonus upon card trade-in. Declaration event EventHandler<TerrID[]>? PromptBonusChoice Event Type Type Description EventHandler<TerrID[]> | Edit this page View Source PromptTradeIn Fires when a player should be prompted to trade in cards at the start of their turn; may or may not be forced. Declaration event EventHandler<IPromptTradeEventArgs>? PromptTradeIn Event Type Type Description EventHandler<IPromptTradeEventArgs>"
  },
  "api/Shared.Interfaces.Model.IRuleValues.html": {
    "href": "api/Shared.Interfaces.Model.IRuleValues.html",
    "title": "Interface IRuleValues | Hazard!_Docs",
    "summary": "Interface IRuleValues Provides constants and equations derived from game rules. Namespace: Shared.Interfaces.Model Assembly: Model.dll Syntax public interface IRuleValues Properties | Edit this page View Source AttackersLimit Gets the maximum number of dice allowed an attacking player. Declaration int AttackersLimit { get; } Property Value Type Description int | Edit this page View Source ContinentBonus Gets map of the number of bonus armies granted for controlling a given continent (see ContID). Declaration ReadOnlyDictionary<ContID, int> ContinentBonus { get; } Property Value Type Description ReadOnlyDictionary<ContID, int> | Edit this page View Source DefendersLimit Gets the maximum number of dice allowed a defending player. Declaration int DefendersLimit { get; } Property Value Type Description int | Edit this page View Source MinimumArmyBonus Gets the minimum number to add to a player's army count on their turn. Declaration int MinimumArmyBonus { get; } Property Value Type Description int | Edit this page View Source SetupActionsPerPlayers Gets a map of the number of actions allowed a player in the Setup phase given the total number of players. Declaration ReadOnlyDictionary<int, int> SetupActionsPerPlayers { get; } Property Value Type Description ReadOnlyDictionary<int, int> | Edit this page View Source SetupStartingPool Gets a map of the number of armies distributed to a player during setup given the total number of players. Declaration ReadOnlyDictionary<int, int> SetupStartingPool { get; } Property Value Type Description ReadOnlyDictionary<int, int> | Edit this page View Source TerritoryTradeInBonus Gets the number of armies to add to a player's army count if they trade in a set of cards. Declaration int TerritoryTradeInBonus { get; } Property Value Type Description int Methods | Edit this page View Source CalculateArmyBonus(int, List<ContID>) Calculates how many armies to grant a player at the beginning of their turn. Declaration int CalculateArmyBonus(int numTerritories, List<ContID> continents) Parameters Type Name Description int numTerritories The number of territories controlled by a player. List<ContID> continents A list of continents controlled by a player. Returns Type Description int The number of armies granted. | Edit this page View Source CalculateBaseTradeInBonus(int) Calculates how many additional armies to grant a player when they trade in set of cards on their turn. Declaration int CalculateBaseTradeInBonus(int numTrades) Parameters Type Name Description int numTrades The number of trades performed so far. Returns Type Description int The number of additional armies granted. | Edit this page View Source CalculateTerritoryBonus(int) Calculates how many additional armies to grant a player based upon the number of territories they control. Declaration int CalculateTerritoryBonus(int numTerritories) Parameters Type Name Description int numTerritories The number of territories under control of a player. Returns Type Description int The total number of armies granted."
  },
  "api/Shared.Interfaces.Model.ITerritoryChangedEventArgs.html": {
    "href": "api/Shared.Interfaces.Model.ITerritoryChangedEventArgs.html",
    "title": "Interface ITerritoryChangedEventArgs | Hazard!_Docs",
    "summary": "Interface ITerritoryChangedEventArgs A contract for EventArgs used by TerritoryChanged. Namespace: Shared.Interfaces.Model Assembly: Model.dll Syntax public interface ITerritoryChangedEventArgs Properties | Edit this page View Source Changed Gets or inits the ID of the territory that changed. Declaration TerrID Changed { get; init; } Property Value Type Description TerrID | Edit this page View Source Player Gets or inits the number of the player now associated with the changed territory. Declaration int? Player { get; init; } Property Value Type Description int? 0-5 if the change involved an see IPlayer (ie, if ownership changed); otherwise, null."
  },
  "api/Shared.Interfaces.Model.ITroopCard.html": {
    "href": "api/Shared.Interfaces.Model.ITroopCard.html",
    "title": "Interface ITroopCard | Hazard!_Docs",
    "summary": "Interface ITroopCard ICard extension for the default card type included in the base game. Inherited Members ICard.Logger ICard.SerializablePropertyNames ICard.TypeName ICard.ParentTypeName ICard.CardSet ICard.Target ICard.IsTradeable IBinarySerializable.LoadFromBinary(BinaryReader) IBinarySerializable.GetBinarySerials() Namespace: Shared.Interfaces.Model Assembly: Model.dll Syntax public interface ITroopCard : ICard, IBinarySerializable Remarks Default serialization methods provided use reflection and should be overridden if there are performance concerns. Properties | Edit this page View Source Insigne Gets or sets an insignia value for the card. Declaration Enum Insigne { get; set; } Property Value Type Description Enum"
  },
  "api/Shared.Interfaces.Model.html": {
    "href": "api/Shared.Interfaces.Model.html",
    "title": "Namespace Shared.Interfaces.Model | Hazard!_Docs",
    "summary": "Namespace Shared.Interfaces.Model Interfaces IAssetFactory Instantiates classes for registered types at run-time. IAssetFetcher Exposes the Data Access 'Layer' to the Model, providing bespoke methods for retrieving Game Assets at run-time. IBinarySerializable Stipulates an object is serializable using BinarySerializer. IBoard Encapsulates Data and Actions that directly affect the armies, territories, and continents on the game board. ICard Base interface for all cards. Provides default properties and methods allowing for run-time serialization. ICardSet Data and methods for a collection of Cards. ICardSetData A base interface for '.json' conversion classes for ICardSets. IDataProvider Reads and converts data from data files. IGame Encapsulates the current game for injection into IMainVM. IPlayer Represents a player in the game. IPlayerChangedEventArgs Contract for EventArgs used by PlayerChanged. IPromptTradeEventArgs A contract for EventArgs used by PromptTradeIn. IRegulator Facade for the Model's user interactions. IRuleValues Provides constants and equations derived from game rules. ITerritoryChangedEventArgs A contract for EventArgs used by TerritoryChanged. ITroopCard ICard extension for the default card type included in the base game."
  },
  "api/Shared.Interfaces.View.IBootStrapperService.html": {
    "href": "api/Shared.Interfaces.View.IBootStrapperService.html",
    "title": "Interface IBootStrapperService | Hazard!_Docs",
    "summary": "Interface IBootStrapperService Provides methods for booting up the application. Namespace: Shared.Interfaces.View Assembly: Model.dll Syntax public interface IBootStrapperService Properties | Edit this page View Source SaveFileName Gets or sets the name of the save file associated with the current IGame Declaration string SaveFileName { get; set; } Property Value Type Description string Methods | Edit this page View Source InitializeGame() A clean boot; occurs the first time the application is launched. Declaration void InitializeGame() | Edit this page View Source InitializeGame(string) Boots from a saved file. Declaration void InitializeGame(string fileName) Parameters Type Name Description string fileName The name of the file from which to load. | Edit this page View Source InitializeGame((string Name, string Color)[]) Boots from user provided data. Declaration void InitializeGame((string Name, string Color)[] namesAndColors) Parameters Type Name Description (string, string)[] namesAndColors The name and color pairs for each player. Remarks Typically, used when a \"New Game\" is launched with an IGame instance already running."
  },
  "api/Shared.Interfaces.View.IDialogState.html": {
    "href": "api/Shared.Interfaces.View.IDialogState.html",
    "title": "Interface IDialogState | Hazard!_Docs",
    "summary": "Interface IDialogState Lets the ViewModel know if a dialog window is open. Namespace: Shared.Interfaces.View Assembly: Model.dll Syntax public interface IDialogState Remarks Certain commands may be enabled or disabled based on whether dialogs are open (since they await Player input). Properties | Edit this page View Source IsDialogOpen Gets a flag indicating whether a dialog window is open. Declaration bool IsDialogOpen { get; } Property Value Type Description bool true if a dialog window is open at the View level; otherwise, false."
  },
  "api/Shared.Interfaces.View.IDispatcherTimer.html": {
    "href": "api/Shared.Interfaces.View.IDispatcherTimer.html",
    "title": "Interface IDispatcherTimer | Hazard!_Docs",
    "summary": "Interface IDispatcherTimer A service porting/exposing a Timer from the View/WPF level to the ViewModel. Namespace: Shared.Interfaces.View Assembly: Model.dll Syntax public interface IDispatcherTimer Remarks Currently, attacks are limited by a command disable with a WPF timer. This feels like a kludge, but it may or may not be worth changing in the future. Properties | Edit this page View Source Interval Gets or sets the interval that the timer will run. Declaration TimeSpan Interval { get; set; } Property Value Type Description TimeSpan | Edit this page View Source IsEnabled Gets or sets a flag indicating whether the timer is enabled. Declaration bool IsEnabled { get; set; } Property Value Type Description bool true if the timer is enabled; otherwise, false. Methods | Edit this page View Source Start() Starts the timer. Declaration void Start() | Edit this page View Source Stop() Stops the timer. Declaration void Stop() Events | Edit this page View Source Tick Fires when the timing interval has completed. Declaration event EventHandler Tick Event Type Type Description EventHandler"
  },
  "api/Shared.Interfaces.View.html": {
    "href": "api/Shared.Interfaces.View.html",
    "title": "Namespace Shared.Interfaces.View | Hazard!_Docs",
    "summary": "Namespace Shared.Interfaces.View Interfaces IBootStrapperService Provides methods for booting up the application. IDialogState Lets the ViewModel know if a dialog window is open. IDispatcherTimer A service porting/exposing a Timer from the View/WPF level to the ViewModel."
  },
  "api/Shared.Interfaces.ViewModel.ICardInfo.html": {
    "href": "api/Shared.Interfaces.ViewModel.ICardInfo.html",
    "title": "Interface ICardInfo | Hazard!_Docs",
    "summary": "Interface ICardInfo Defines public data for ViewModel structs representing ICards. Namespace: Shared.Interfaces.ViewModel Assembly: Model.dll Syntax public interface ICardInfo Properties | Edit this page View Source Owner Gets the owner of the card. Declaration int? Owner { get; } Property Value Type Description int? The Number who owns the card. If it doesn't have one, or a dependent object is uninitialized, null. | Edit this page View Source OwnerHandIndex Gets the index of the card's place in its owner's Hand. Declaration int? OwnerHandIndex { get; } Property Value Type Description int? The index of Hand containing the card. If there isn't one, or a dependent object is uninitialized, null. | Edit this page View Source TargetContinent Gets the continents targeted by the card. Declaration ContID[] TargetContinent { get; } Property Value Type Description ContID[] | Edit this page View Source TargetTerritory Gets the territories targeted by the card. Declaration TerrID[] TargetTerritory { get; } Property Value Type Description TerrID[]"
  },
  "api/Shared.Interfaces.ViewModel.IDiceThrownEventArgs.html": {
    "href": "api/Shared.Interfaces.ViewModel.IDiceThrownEventArgs.html",
    "title": "Interface IDiceThrownEventArgs | Hazard!_Docs",
    "summary": "Interface IDiceThrownEventArgs Contract for EventArgs used by DiceThrown. Namespace: Shared.Interfaces.ViewModel Assembly: Model.dll Syntax public interface IDiceThrownEventArgs Properties | Edit this page View Source AttackResults Gets or inits the numerical results of the attacker's \"dice rolls.\" Declaration int[] AttackResults { get; init; } Property Value Type Description int[] | Edit this page View Source DefenseResults Gets or inits the numerical results of the defender's \"dice rolls.\" Declaration int[] DefenseResults { get; init; } Property Value Type Description int[]"
  },
  "api/Shared.Interfaces.ViewModel.IGameService.html": {
    "href": "api/Shared.Interfaces.ViewModel.IGameService.html",
    "title": "Interface IGameService | Hazard!_Docs",
    "summary": "Interface IGameService A service for injecting necessary Model objects into the ViewModel. Namespace: Shared.Interfaces.ViewModel Assembly: Model.dll Syntax public interface IGameService Methods | Edit this page View Source CreateGameWithRegulator(int) Initializes a Game with its Regulator. Declaration (IGame Game, IRegulator Regulator) CreateGameWithRegulator(int numPlayers) Parameters Type Name Description int numPlayers The number of players in the Game. Returns Type Description (IGame Game, IRegulator Regulator) An initialized Game paired with its initialized Regulator."
  },
  "api/Shared.Interfaces.ViewModel.IMainVM.html": {
    "href": "api/Shared.Interfaces.ViewModel.IMainVM.html",
    "title": "Interface IMainVM | Hazard!_Docs",
    "summary": "Interface IMainVM Defines public exposures of the main ViewModel. Enables decoupled DI injection into the primary View. Inherited Members IBinarySerializable.LoadFromBinary(BinaryReader) IBinarySerializable.GetBinarySerials() Namespace: Shared.Interfaces.ViewModel Assembly: Model.dll Syntax public interface IMainVM : IBinarySerializable Properties | Edit this page View Source Advance_Command Gets the troop advance command. Declaration ICommand Advance_Command { get; } Property Value Type Description ICommand | Edit this page View Source AppPath Gets or sets the Path to the directory of the Application. Declaration string AppPath { get; set; } Property Value Type Description string Remarks Provided by the Dependency Injection system via Microsoft.Extensions.Options. | Edit this page View Source AttackEnabled Gets or sets a flag indicating whether the attack command should be enabled. Declaration bool AttackEnabled { get; set; } Property Value Type Description bool true if the application is ready to accept another attack input; otherwise, false. | Edit this page View Source ChooseTerritoryBonus_Command Gets the choose territory bonus command. Declaration ICommand ChooseTerritoryBonus_Command { get; } Property Value Type Description ICommand | Edit this page View Source ContNameMap Gets a map of ContID to their names. Declaration ReadOnlyDictionary<ContID, string> ContNameMap { get; } Property Value Type Description ReadOnlyDictionary<ContID, string> Remarks A cache that helps avoid multiple Enum method calls. | Edit this page View Source CurrentGame Gets or sets the current Game. Declaration IGame? CurrentGame { get; set; } Property Value Type Description IGame The current IGame instance if both it and the IMainVM have been initialized; otherwise null. | Edit this page View Source CurrentPhase Gets or sets the current game phase. Declaration GamePhase CurrentPhase { get; set; } Property Value Type Description GamePhase | Edit this page View Source DeliverAttackReward_Command Gets the deliver reward command. Declaration ICommand DeliverAttackReward_Command { get; } Property Value Type Description ICommand | Edit this page View Source LoadGame_Command Gets the load game command. Declaration ICommand LoadGame_Command { get; } Property Value Type Description ICommand | Edit this page View Source NewGame_Command Gets the new game command. Declaration ICommand NewGame_Command { get; } Property Value Type Description ICommand | Edit this page View Source NextTradeBonus Gets the number of bonus armies that will be awarded on the next card trade-in. Declaration int NextTradeBonus { get; } Property Value Type Description int | Edit this page View Source PlayerDetails Gets or sets a collection of player information for display. Declaration ObservableCollection<IPlayerData> PlayerDetails { get; set; } Property Value Type Description ObservableCollection<IPlayerData> | Edit this page View Source PlayerTurn Gets or sets a value indicating whose turn it is. Declaration int PlayerTurn { get; set; } Property Value Type Description int The Number whose turn it is. | Edit this page View Source SaveGame_Command Gets the save game command. Declaration ICommand SaveGame_Command { get; } Property Value Type Description ICommand | Edit this page View Source Territories Gets or sets a collection of territory information for display. Declaration ObservableCollection<ITerritoryInfo> Territories { get; set; } Property Value Type Description ObservableCollection<ITerritoryInfo> | Edit this page View Source TerritorySelect_Command Gets the territory select command. Declaration ICommand TerritorySelect_Command { get; } Property Value Type Description ICommand | Edit this page View Source TerritorySelected Gets or sets the currently selected territory. Declaration TerrID TerritorySelected { get; set; } Property Value Type Description TerrID | Edit this page View Source TradeIn_Command Gets the trade-in command. Declaration ICommand TradeIn_Command { get; } Property Value Type Description ICommand | Edit this page View Source UndoConfirmInput_Command Gets the undo confirm input command. Declaration ICommand UndoConfirmInput_Command { get; } Property Value Type Description ICommand Methods | Edit this page View Source ChooseTerritoryBonus(int) Executes logic of the ChooseTerritoryBonus_Command. Declaration void ChooseTerritoryBonus(int target) Parameters Type Name Description int target The underlying value of the target territory's TerrID. | Edit this page View Source Initialize(string[], string[], string?) Initializes the MainViewModel using either newly input values or the name of a save file. Declaration void Initialize(string[] players, string[] colors, string? fileName) Parameters Type Name Description string[] players The players in the new game. string[] colors The color names for the players in the new game. string fileName The name of the save file to use, if any; otherwise, null. | Edit this page View Source LoadGame(string) Executes logic of the LoadGame_Command. Declaration void LoadGame(string fileName) Parameters Type Name Description string fileName The name of the file from which to load. | Edit this page View Source MakeDisplayName(string) Makes names suitable for display in the UI. Declaration string MakeDisplayName(string name) Parameters Type Name Description string name The name to be amended. Returns Type Description string The name, edited for display. | Edit this page View Source NewGame((string, string)[]) Executes logic of the NewGame_Command. Declaration void NewGame((string, string)[] namesAndColors) Parameters Type Name Description (string, string)[] namesAndColors The names and colors of the new players. | Edit this page View Source SaveGame((string FileName, bool NewFile)) Executes logic of the SaveGame_Command. Declaration Task SaveGame((string FileName, bool NewFile) saveParams) Parameters Type Name Description (string FileName, bool NewFile) saveParams The file name to save to, and a flag indicating whether it is a new file. Returns Type Description Task | Edit this page View Source SumArmies(int) Sums the total number of armies owned by a player. Declaration int SumArmies(int player) Parameters Type Name Description int player The Number of the player whose armies will be summed. Returns Type Description int A positive int. | Edit this page View Source SumTerritories(int) Sums the total number of territories controlled by a player. Declaration int SumTerritories(int player) Parameters Type Name Description int player The Number of the player whose territories will be counted. Returns Type Description int A positive int. | Edit this page View Source TerritorySelect(int) Executes logic of the TerritorySelect_Command. Declaration void TerritorySelect(int territory) Parameters Type Name Description int territory The ID of the territory selected. Events | Edit this page View Source AdvanceRequest Fires when user input is needed to determine how many armies will move after a successful attack. Declaration event EventHandler<ITroopsAdvanceEventArgs>? AdvanceRequest Event Type Type Description EventHandler<ITroopsAdvanceEventArgs> | Edit this page View Source AttackRequest Fires when the Model layer asks for an attack to be performed. Declaration event EventHandler<TerrID>? AttackRequest Event Type Type Description EventHandler<TerrID> Remarks Currently, due to the way dice rolling, results, and animations are tied together, the actual result of random number generation is given in the ViewModel, which then passes those results on to the Model for it to execute logic with them. This might need to be changed in the future, but would require rethinking how to give a player a \"real\" view of the \"roll.\" | Edit this page View Source DiceThrown Fires when the \"dice rolling\" process has concluded. Declaration event EventHandler<IDiceThrownEventArgs>? DiceThrown Event Type Type Description EventHandler<IDiceThrownEventArgs> | Edit this page View Source ForceTradeIn Fires when the application should force a player to turn in a matching set of cards before continuing. Declaration event EventHandler<int>? ForceTradeIn Event Type Type Description EventHandler<int> | Edit this page View Source PlayerLost Fires when a player is defeated. Declaration event EventHandler<int>? PlayerLost Event Type Type Description EventHandler<int> | Edit this page View Source PlayerTurnChanging Fires if the turn is changing control between players. Declaration event EventHandler<int>? PlayerTurnChanging Event Type Type Description EventHandler<int> Remarks Warns the View that the Player Turn will soon change; this is needed in a single-seat multiplayer game so that players can keep information hidden. | Edit this page View Source PlayerWon Fires when a player wins. Declaration event EventHandler<int>? PlayerWon Event Type Type Description EventHandler<int> | Edit this page View Source RequestTradeIn Fires when the application should deliver a prompt allowing a player to trade in their cards. Declaration event EventHandler<int>? RequestTradeIn Event Type Type Description EventHandler<int> | Edit this page View Source TerritoryChoiceRequest Fires when a player input is needed to choose between territories. Declaration event EventHandler<(int, string)[]> TerritoryChoiceRequest Event Type Type Description EventHandler<(int, string)[]> Remarks See PromptBonusChoice."
  },
  "api/Shared.Interfaces.ViewModel.IPlayerData.html": {
    "href": "api/Shared.Interfaces.ViewModel.IPlayerData.html",
    "title": "Interface IPlayerData | Hazard!_Docs",
    "summary": "Interface IPlayerData Defines public data for ViewModels that present IPlayer data. Namespace: Shared.Interfaces.ViewModel Assembly: Model.dll Syntax public interface IPlayerData Properties | Edit this page View Source ArmyBonus Gets or sets the number of bonus armies for the player. Declaration int ArmyBonus { get; set; } Property Value Type Description int | Edit this page View Source ArmyPool Gets or sets the number of armies in the pool for the player. Declaration int ArmyPool { get; set; } Property Value Type Description int | Edit this page View Source ColorName Gets or sets the name of the player's color. Declaration string ColorName { get; set; } Property Value Type Description string The color code for the player (from the View). | Edit this page View Source ContinentNames Gets or sets the names of the continents controlled by the player. Declaration ObservableCollection<string> ContinentNames { get; set; } Property Value Type Description ObservableCollection<string> | Edit this page View Source Continents Gets or sets the continents controlled by the player. Declaration ObservableCollection<ContID> Continents { get; set; } Property Value Type Description ObservableCollection<ContID> | Edit this page View Source Hand Gets or sets the cards held by the player. Declaration ObservableCollection<ICardInfo> Hand { get; set; } Property Value Type Description ObservableCollection<ICardInfo> | Edit this page View Source Name Gets or sets the player's name. Declaration string Name { get; set; } Property Value Type Description string | Edit this page View Source NumArmies Gets or sets the number of armies owned by the player. Declaration int NumArmies { get; set; } Property Value Type Description int | Edit this page View Source NumTerritories Gets or sets the number of territories controlled by the player. Declaration int NumTerritories { get; set; } Property Value Type Description int | Edit this page View Source Number Gets or sets the number of the player. Declaration int Number { get; set; } Property Value Type Description int | Edit this page View Source Realm Gets or sets the territories controlled by the player. Declaration ObservableCollection<TerrID> Realm { get; set; } Property Value Type Description ObservableCollection<TerrID>"
  },
  "api/Shared.Interfaces.ViewModel.ITerritoryInfo.html": {
    "href": "api/Shared.Interfaces.ViewModel.ITerritoryInfo.html",
    "title": "Interface ITerritoryInfo | Hazard!_Docs",
    "summary": "Interface ITerritoryInfo Encapsulates data that should be public and updated for ViewModel/View bindings. Inherited Members INotifyPropertyChanged.PropertyChanged INotifyPropertyChanging.PropertyChanging Namespace: Shared.Interfaces.ViewModel Assembly: Model.dll Syntax public interface ITerritoryInfo : INotifyPropertyChanged, INotifyPropertyChanging Remarks Extending INotifyPropertyChanged and INotifyPropertyChanging to Territory data allows the use of MVVM Toolkit's ObservableProperty and ObservableObject attributes. Properties | Edit this page View Source Armies Gets or sets the number of armies currently located within this territory. Declaration int Armies { get; set; } Property Value Type Description int | Edit this page View Source DisplayName Gets or sets the name of the Territory that should be displayed to the user. Declaration string DisplayName { get; set; } Property Value Type Description string | Edit this page View Source IsSelected Gets or sets a flag indicating that this territory is currently selected by the user. Declaration bool IsSelected { get; set; } Property Value Type Description bool true if it is currently selected; otherwise, false. | Edit this page View Source Name Gets or sets the internal name of the Territory. Declaration string Name { get; set; } Property Value Type Description string | Edit this page View Source PlayerOwner Gets or sets the number of the player who currently owns the territory. Declaration int PlayerOwner { get; set; } Property Value Type Description int 0-5."
  },
  "api/Shared.Interfaces.ViewModel.ITroopsAdvanceEventArgs.html": {
    "href": "api/Shared.Interfaces.ViewModel.ITroopsAdvanceEventArgs.html",
    "title": "Interface ITroopsAdvanceEventArgs | Hazard!_Docs",
    "summary": "Interface ITroopsAdvanceEventArgs Contract for EventArgs used by AdvanceRequest. Namespace: Shared.Interfaces.ViewModel Assembly: Model.dll Syntax public interface ITroopsAdvanceEventArgs Properties | Edit this page View Source Conquered Get or inits a flag indicating if the target of the advance was conquered in attack. Declaration bool Conquered { get; init; } Property Value Type Description bool true if the advance is ocurring after a successful attack; false if the advance is a move during Move. | Edit this page View Source Max Gets or inits the maximum number of armies that may be advanced. Declaration int Max { get; init; } Property Value Type Description int A number >= the number of dice used by the attacker. | Edit this page View Source Min Gets or inits the minimum number of armies that may be advanced. Declaration int Min { get; init; } Property Value Type Description int A number >= the number of dice used by the attacker. | Edit this page View Source Source Gets or inits the source territory's Enum ID. Declaration TerrID Source { get; init; } Property Value Type Description TerrID | Edit this page View Source Target Gets or inits the target territory's Enum ID. Declaration TerrID Target { get; init; } Property Value Type Description TerrID"
  },
  "api/Shared.Interfaces.ViewModel.html": {
    "href": "api/Shared.Interfaces.ViewModel.html",
    "title": "Namespace Shared.Interfaces.ViewModel | Hazard!_Docs",
    "summary": "Namespace Shared.Interfaces.ViewModel Interfaces ICardInfo Defines public data for ViewModel structs representing ICards. IDiceThrownEventArgs Contract for EventArgs used by DiceThrown. IGameService A service for injecting necessary Model objects into the ViewModel. IMainVM Defines public exposures of the main ViewModel. Enables decoupled DI injection into the primary View. IPlayerData Defines public data for ViewModels that present IPlayer data. ITerritoryInfo Encapsulates data that should be public and updated for ViewModel/View bindings. ITroopsAdvanceEventArgs Contract for EventArgs used by AdvanceRequest."
  },
  "api/Shared.Interfaces.html": {
    "href": "api/Shared.Interfaces.html",
    "title": "Namespace Shared.Interfaces | Hazard!_Docs",
    "summary": "Namespace Shared.Interfaces Interfaces IContinentOwnerChangedEventArgs EventArgs contract as used by ContinentOwnerChanged. ITroopCardInfo Defines public data for ViewModel structs representing ITroopCards."
  },
  "api/Shared.Services.Helpers.DataFileFinder.html": {
    "href": "api/Shared.Services.Helpers.DataFileFinder.html",
    "title": "Class DataFileFinder | Hazard!_Docs",
    "summary": "Class DataFileFinder Static helper for bootstrap configuration of DAL. Inheritance object DataFileFinder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Shared.Services.Helpers Assembly: Model.dll Syntax public static class DataFileFinder Methods | Edit this page View Source FindFiles(string, string) Finds all files in the application's directory and sub-directories that contain a specified text. Declaration public static string[] FindFiles(string rootPath, string searchText) Parameters Type Name Description string rootPath The path of the application's root directory. string searchText The text to search for in the file names. Returns Type Description string[] An IEnumerable<T> of full paths for matching files. Remarks The search is case sensitive on searchText."
  },
  "api/Shared.Services.Helpers.html": {
    "href": "api/Shared.Services.Helpers.html",
    "title": "Namespace Shared.Services.Helpers | Hazard!_Docs",
    "summary": "Namespace Shared.Services.Helpers Classes DataFileFinder Static helper for bootstrap configuration of DAL."
  },
  "api/Shared.Services.Options.AppConfig.html": {
    "href": "api/Shared.Services.Options.AppConfig.html",
    "title": "Class AppConfig | Hazard!_Docs",
    "summary": "Class AppConfig Contains values needed for run-time Options to be set and configured by the DI system. Inheritance object AppConfig Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Shared.Services.Options Assembly: Model.dll Syntax public class AppConfig Properties | Edit this page View Source AppPath Gets or sets the path of the current running Application's root folder. Declaration public string AppPath { get; set; } Property Value Type Description string Remarks In developer mode, it should be set by GetDirectoryName(string) of GetExecutingAssembly(); in production, to the MSIX package installation path (since containerized). | Edit this page View Source CardDataSearchString Gets or sets the string used to search for CardSet datafiles at startup.. Declaration public string CardDataSearchString { get; set; } Property Value Type Description string Remarks See FetchCardSets() | Edit this page View Source DataFileMap Gets or sets a map of data file paths keyed by their filenames (with extension). Declaration public Dictionary<string, string> DataFileMap { get; set; } Property Value Type Description Dictionary<string, string> Each key should be a data file name with extension, read from the 'DataFileNames' property of 'appsettings.json.' Their values are the full, absolute paths to these files, determined at runtime. | Edit this page View Source SoundFileMap Gets or sets a map of sound file paths keyed by their filenames (with extension). Declaration public Dictionary<string, string> SoundFileMap { get; set; } Property Value Type Description Dictionary<string, string> Each key should be a sound file name with extension, read from the 'SoundFileNames' property of 'appsettings.json.' Their values are the full, absolute paths to these files, determined at runtime."
  },
  "api/Shared.Services.Options.html": {
    "href": "api/Shared.Services.Options.html",
    "title": "Namespace Shared.Services.Options | Hazard!_Docs",
    "summary": "Namespace Shared.Services.Options Classes AppConfig Contains values needed for run-time Options to be set and configured by the DI system."
  },
  "api/Shared.Services.Registry.IRegistryInitializer.html": {
    "href": "api/Shared.Services.Registry.IRegistryInitializer.html",
    "title": "Interface IRegistryInitializer | Hazard!_Docs",
    "summary": "Interface IRegistryInitializer Provides default values to ITypeRegister<T>. Namespace: Shared.Services.Registry Assembly: Model.dll Syntax public interface IRegistryInitializer Methods | Edit this page View Source PopulateRegistry(ITypeRegister<ITypeRelations>) Populate a ITypeRegister<T> using custom logic. Declaration void PopulateRegistry(ITypeRegister<ITypeRelations> registry) Parameters Type Name Description ITypeRegister<ITypeRelations> registry The registry to initialize."
  },
  "api/Shared.Services.Registry.ITypeRegister-1.html": {
    "href": "api/Shared.Services.Registry.ITypeRegister-1.html",
    "title": "Interface ITypeRegister<T> | Hazard!_Docs",
    "summary": "Interface ITypeRegister<T> Registers Types with objects by RegistryRelation, enabling look-up at runtime. E.g. the Type : typeof(TroopCard), if registered with \"TroopCard\", can be retreived by: Type troopCardType = Registry[\"TroopCard\"]; where Registry is an instance of TypeRegister. Namespace: Shared.Services.Registry Assembly: Model.dll Syntax public interface ITypeRegister<T> where T : ITypeRelations Type Parameters Name Description T Encapsulates related values for a registry entry. Properties | Edit this page View Source this[RegistryRelation] Get all objects registered under a specific RegistryRelation. Declaration (Type KeyType, object RelatedObject)[]? this[RegistryRelation relation] { get; } Parameters Type Name Description RegistryRelation relation The target RegistryRelation. Property Value Type Description (Type KeyType, object RelatedObject)[] Each Key/Object related by relation; or, if none are found, null. | Edit this page View Source this[string] Type look-up by name. Declaration Type? this[string registeredName] { get; } Parameters Type Name Description string registeredName The name registered under Name Property Value Type Description Type The type registered under registeredName; if none, null. | Edit this page View Source this[Type] Registry entry look-up or set-up by Type. Declaration T? this[Type type] { get; set; } Parameters Type Name Description Type type The registered Type. Property Value Type Description T Related objects, or null if type is unregistered. Exceptions Type Condition ArgumentNullException Thrown when setting an entry with a null value. ArgumentException Thrown when setting an entry with a value that does not implement ITypeRelations. Methods | Edit this page View Source AddRelation(Type, (object, RegistryRelation)) Add an object relation to a pre-existing registry entry. Declaration void AddRelation(Type type, (object, RegistryRelation) newRelation) Parameters Type Name Description Type type The registered type. (object, RegistryRelation) newRelation The related object paired with its relation type. | Edit this page View Source Clear() Empties the registry. Declaration void Clear() | Edit this page View Source DeRegister(Type) Removes a registry entry. Declaration void DeRegister(Type type) Parameters Type Name Description Type type The type to be deregistered. | Edit this page View Source Register(Type) Register a Type. Declaration void Register(Type type) Parameters Type Name Description Type type The type to register. Remarks This assumes a default registry entry, e.g.: FullName or nameof(Type) for Name. | Edit this page View Source Register(Type, T) Register a Type with a given set of relations to objects. Declaration void Register(Type type, T typeRelations) Parameters Type Name Description Type type The type to register. T typeRelations The relations to register to type. | Edit this page View Source RemoveRelation(Type, RegistryRelation) Removes an object relation from a pre-existing registry entry. Declaration void RemoveRelation(Type type, RegistryRelation targetRelation) Parameters Type Name Description Type type The registered type. RegistryRelation targetRelation The relation to remove. | Edit this page View Source TryGetParentType(Type, out Type?) Checks whether a registered type has a registered parent, and returns it if so. Declaration bool TryGetParentType(Type registeredType, out Type? parentType) Parameters Type Name Description Type registeredType The type already registered. Type parentType The type registered as parent of registeredType. Returns Type Description bool true if registeredType has a registered parent type in the registry; otherwise, false."
  },
  "api/Shared.Services.Registry.ITypeRelations.html": {
    "href": "api/Shared.Services.Registry.ITypeRelations.html",
    "title": "Interface ITypeRelations | Hazard!_Docs",
    "summary": "Interface ITypeRelations Encapsulates objects under specific relations as values for a TypeRegister entry. Namespace: Shared.Services.Registry Assembly: Model.dll Syntax public interface ITypeRelations Properties | Edit this page View Source IsEmpty Indicates whether the instance is internally empty. Declaration bool IsEmpty { get; } Property Value Type Description bool True if the set of object-relation values is empty; otherwise, false. | Edit this page View Source this[RegistryRelation] Retrieves the object in a TypeRegister entry given its relation type. Declaration object? this[RegistryRelation relation] { get; } Parameters Type Name Description RegistryRelation relation The relation under which the object was registered. Property Value Type Description object The related object or, if none, null. Methods | Edit this page View Source Add(object, RegistryRelation) Adds an object under a specific relation. Declaration void Add(object obj, RegistryRelation relation) Parameters Type Name Description object obj The object to be registered as related. RegistryRelation relation The relation type. | Edit this page View Source Remove(RegistryRelation) Removes an object/relation pair. Declaration void Remove(RegistryRelation relation) Parameters Type Name Description RegistryRelation relation The relation with which the value was registered."
  },
  "api/Shared.Services.Registry.RegistryInitializer.html": {
    "href": "api/Shared.Services.Registry.RegistryInitializer.html",
    "title": "Class RegistryInitializer | Hazard!_Docs",
    "summary": "Class RegistryInitializer Provides default values to ITypeRegister<T>. Inheritance object RegistryInitializer Implements IRegistryInitializer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Shared.Services.Registry Assembly: Model.dll Syntax public class RegistryInitializer : IRegistryInitializer Constructors | Edit this page View Source RegistryInitializer(IOptions<AppConfig>) Provides default values to ITypeRegister<T>. Declaration public RegistryInitializer(IOptions<AppConfig> options) Parameters Type Name Description IOptions<AppConfig> options Methods | Edit this page View Source PopulateRegistry(ITypeRegister<ITypeRelations>) Provides default values to ITypeRegister<T>. Declaration public void PopulateRegistry(ITypeRegister<ITypeRelations> registry) Parameters Type Name Description ITypeRegister<ITypeRelations> registry Implements IRegistryInitializer"
  },
  "api/Shared.Services.Registry.RegistryRelation.html": {
    "href": "api/Shared.Services.Registry.RegistryRelation.html",
    "title": "Enum RegistryRelation | Hazard!_Docs",
    "summary": "Enum RegistryRelation Qualifies the relation between an object and a keyed Type in a ITypeRegister<T> registry. Namespace: Shared.Services.Registry Assembly: Model.dll Syntax public enum RegistryRelation Fields Name Description CollectionName Marks an object as the name of a CollectionType associated with a keyed Type in a TypeRegister. CollectionType Marks an object as a collection Type for the keyed Type in a TypeRegister. ConvertedDataType Marks an object as the target conversion Type of a data converter for a keyed Type in a TypeRegister. DataConverter Marks an object as a data converter for a keyed Type in a TypeRegister. DataFileName Marks an object as the name of a data file for a keyed Type in a TypeRegister. ElementType Marks an object as an element Type contained within a collection (CollectionName and CollectionType) which is registered in a TypeRegister. Name Marks an object as a name for a keyed Type in a TypeRegister."
  },
  "api/Shared.Services.Registry.TypeRegister.html": {
    "href": "api/Shared.Services.Registry.TypeRegister.html",
    "title": "Class TypeRegister | Hazard!_Docs",
    "summary": "Class TypeRegister Registers Types with objects by RegistryRelation, enabling look-up at runtime. E.g. the Type : typeof(TroopCard), if registered with \"TroopCard\", can be retreived by: Type troopCardType = Registry[\"TroopCard\"]; where Registry is an instance of TypeRegister. Inheritance object TypeRegister Implements ITypeRegister<ITypeRelations> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Shared.Services.Registry Assembly: Model.dll Syntax public class TypeRegister : ITypeRegister<ITypeRelations> Constructors | Edit this page View Source TypeRegister(IRegistryInitializer) Constructs the registry and populates it with default entries. Declaration public TypeRegister(IRegistryInitializer initializer) Parameters Type Name Description IRegistryInitializer initializer Provides default values for initial Registry entries. Properties | Edit this page View Source this[RegistryRelation] Get all objects registered under a specific RegistryRelation. Declaration public (Type KeyType, object RelatedObject)[]? this[RegistryRelation relation] { get; } Parameters Type Name Description RegistryRelation relation The target RegistryRelation. Property Value Type Description (Type KeyType, object RelatedObject)[] Each Key/Object related by relation; or, if none are found, null. | Edit this page View Source this[string] Type look-up by name. Declaration public Type? this[string lookupName] { get; } Parameters Type Name Description string lookupName Property Value Type Description Type The type registered under registeredName; if none, null. Remarks Assumes unique Type name entries and will return the first found. | Edit this page View Source this[Type] Registry entry look-up or set-up by Type. Declaration public ITypeRelations? this[Type type] { get; set; } Parameters Type Name Description Type type The registered Type. Property Value Type Description ITypeRelations Related objects, or null if type is unregistered. Exceptions Type Condition ArgumentNullException Thrown when setting an entry with a null value. ArgumentException Thrown when setting an entry with a value that does not implement ITypeRelations. Methods | Edit this page View Source AddRelation(Type, (object, RegistryRelation)) Declaration public void AddRelation(Type type, (object, RegistryRelation) newRelation) Parameters Type Name Description Type type (object, RegistryRelation) newRelation Exceptions Type Condition ArgumentNullException The registered type. ArgumentException Thrown if type is already registered. | Edit this page View Source Clear() If the registry has entries, delete them. Declaration public void Clear() | Edit this page View Source DeRegister(Type) Remove a Type's entry, including any contained object relations. Declaration public void DeRegister(Type type) Parameters Type Name Description Type type The type to remove. Exceptions Type Condition ArgumentNullException Thrown if type is null. ArgumentException Thrown if type is not found in the registry. | Edit this page View Source Register(Type) Register a Type. Declaration public void Register(Type type) Parameters Type Name Description Type type The type to register. Remarks This assumes a default registry entry, e.g.: FullName or nameof(Type) for Name. Exceptions Type Condition ArgumentNullException Thrown if type is null. ArgumentException Thrown if type is already registered. | Edit this page View Source Register(Type, ITypeRelations) Register a Type with a given set of relations to objects. Declaration public void Register(Type type, ITypeRelations typeRelations) Parameters Type Name Description Type type The type to register. ITypeRelations typeRelations The relations to register to type. Exceptions Type Condition ArgumentNullException Thrown if either parameter, type or typeRelations, is null. ArgumentException Thrown if type is already registered. | Edit this page View Source RemoveRelation(Type, RegistryRelation) Remove an object relation from a pre-existing registry entry. If the resulting entry has an empty set of object relations, it is entirely removed via DeRegister(Type). Declaration public void RemoveRelation(Type type, RegistryRelation targetRelation) Parameters Type Name Description Type type The registered type. RegistryRelation targetRelation The relation to remove, along with its paired object. Exceptions Type Condition KeyNotFoundException Thrown if type is not found in the registry. ArgumentException Thrown if targetRelation is not registered to type. | Edit this page View Source TryGetParentType(Type, out Type?) Checks whether a registered type has a registered parent, and returns it if so. Declaration public bool TryGetParentType(Type registeredType, out Type? parentType) Parameters Type Name Description Type registeredType The type already registered. Type parentType The type registered as parent of registeredType. Returns Type Description bool true if registeredType has a registered parent type in the registry; otherwise, false. Implements ITypeRegister<T>"
  },
  "api/Shared.Services.Registry.TypeRelations.html": {
    "href": "api/Shared.Services.Registry.TypeRelations.html",
    "title": "Class TypeRelations | Hazard!_Docs",
    "summary": "Class TypeRelations Encapsulates objects under specific relations as values for a TypeRegister entry. Inheritance object TypeRelations Implements ITypeRelations Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Shared.Services.Registry Assembly: Model.dll Syntax public class TypeRelations : ITypeRelations Constructors | Edit this page View Source TypeRelations() Constructs an empty TypeRelations. Declaration public TypeRelations() | Edit this page View Source TypeRelations((object, RegistryRelation)[]) Constructs a TypeRelations from a collection of objects under specific relations. Declaration public TypeRelations((object, RegistryRelation)[] relations) Parameters Type Name Description (object, RegistryRelation)[] relations The related objects, each with a RegistryRelation categorizing their relation to a keyed Type in a TypeRegister. Properties | Edit this page View Source IsEmpty Indicates whether the instance is internally empty. Declaration public bool IsEmpty { get; } Property Value Type Description bool True if the set of object-relation values is empty; otherwise, false. | Edit this page View Source this[RegistryRelation] Retrieves the object in a TypeRegister entry given its relation type. Declaration public object? this[RegistryRelation relation] { get; } Parameters Type Name Description RegistryRelation relation The relation under which the object was registered. Property Value Type Description object The related object or, if none, null. Methods | Edit this page View Source Add(object, RegistryRelation) Adds an object under a specific relation. Declaration public void Add(object obj, RegistryRelation relation) Parameters Type Name Description object obj The object to be registered as related. RegistryRelation relation The relation type. Exceptions Type Condition ArgumentException Thrown if there is already an object associated with the given relation, or if the type of obj is incompatible with the given relation. | Edit this page View Source Remove(RegistryRelation) Removes an object/relation pair. Declaration public void Remove(RegistryRelation relation) Parameters Type Name Description RegistryRelation relation The relation with which the value was registered. Exceptions Type Condition KeyNotFoundException Thrown if relation was not found. Implements ITypeRelations"
  },
  "api/Shared.Services.Registry.html": {
    "href": "api/Shared.Services.Registry.html",
    "title": "Namespace Shared.Services.Registry | Hazard!_Docs",
    "summary": "Namespace Shared.Services.Registry Classes RegistryInitializer Provides default values to ITypeRegister<T>. TypeRegister Registers Types with objects by RegistryRelation, enabling look-up at runtime. E.g. the Type : typeof(TroopCard), if registered with \"TroopCard\", can be retreived by: Type troopCardType = Registry[\"TroopCard\"]; where Registry is an instance of TypeRegister. TypeRelations Encapsulates objects under specific relations as values for a TypeRegister entry. Interfaces IRegistryInitializer Provides default values to ITypeRegister<T>. ITypeRegister<T> Registers Types with objects by RegistryRelation, enabling look-up at runtime. E.g. the Type : typeof(TroopCard), if registered with \"TroopCard\", can be retreived by: Type troopCardType = Registry[\"TroopCard\"]; where Registry is an instance of TypeRegister. ITypeRelations Encapsulates objects under specific relations as values for a TypeRegister entry. Enums RegistryRelation Qualifies the relation between an object and a keyed Type in a ITypeRegister<T> registry."
  },
  "api/Shared.Services.Serializer.BinarySerializer.html": {
    "href": "api/Shared.Services.Serializer.BinarySerializer.html",
    "title": "Class BinarySerializer | Hazard!_Docs",
    "summary": "Class BinarySerializer A binary serializer for IBinarySerializable objects. Inheritance object BinarySerializer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Shared.Services.Serializer Assembly: Model.dll Syntax public static class BinarySerializer Remarks BinarySerializer and IBinarySerializable work with SerializedData, which requires IConvertible values. It encodes IConvertible values with optional un-encoded tags. To read back tagged values, (assuming BinaryReader reader): var readTag = reader.readString(); var readValue = (T)BinarySerializer.ReadConvertible(reader, typeof(T)); While reading back untagged values requires only: var readValue = (T)BinarySerializer.ReadConvertible(reader, typeof(T)); Methods | Edit this page View Source InitializeLogger(ILogger) Initializes the logger. Declaration public static void InitializeLogger(ILogger logger) Parameters Type Name Description ILogger logger The logger. | Edit this page View Source InitializeLogger(ILoggerFactory) Initializes the logger using a factory. Declaration public static void InitializeLogger(ILoggerFactory loggerFactory) Parameters Type Name Description ILoggerFactory loggerFactory A logger factory configured to create the appropriate ILogger. | Edit this page View Source IsIConvertibleCollection(Type, out Type?) Determines whether a Type is a collection type of IConvertibles. Declaration public static bool IsIConvertibleCollection(Type type, out Type? memberType) Parameters Type Name Description Type type The type to test. Type memberType If type is a collection of IConvertibles, the type of its members; otherwise, null. Returns Type Description bool true if the collection is a collection of IConvertibles; otherwise, false. | Edit this page View Source IsSerializable(Type) Determines whether objects of a given Type are serializable. Declaration public static bool IsSerializable(Type type) Parameters Type Name Description Type type The type to test. Returns Type Description bool true if objects of type type are serializable by BinarySerializer. | Edit this page View Source Load(IBinarySerializable[], string) Loads IBinarySerializable objects with deserialized values previously written by BinarySerializer. Declaration public static bool Load(IBinarySerializable[] serializableObjects, string fileName) Parameters Type Name Description IBinarySerializable[] serializableObjects The objects to load. string fileName The name of the file to read. Returns Type Description bool true if deserialization and loading completed without exceptions; otherwise, false. | Edit this page View Source Load(IBinarySerializable[], string, long, out long) Declaration public static bool Load(IBinarySerializable[] serializableObjects, string fileName, long startStreamPosition, out long endStreamPosition) Parameters Type Name Description IBinarySerializable[] serializableObjects string fileName long startStreamPosition The position of the FileStream at which to begin reading the file. long endStreamPosition The position of the FileStream after loading is complete. Returns Type Description bool | Edit this page View Source ReadConvertible(BinaryReader, Type) Reads a value previously written as an IConvertible using BinarySerializer. Declaration public static IConvertible ReadConvertible(BinaryReader reader, Type type) Parameters Type Name Description BinaryReader reader A reader whose BaseStream was previously written to. Type type The final type expected. Must implement IConvertible. Returns Type Description IConvertible An IConvertible of type type. | Edit this page View Source ReadConvertibles(BinaryReader, Type, int) Reads an array of values previously written as IConvertibles using BinarySerializer. Declaration public static Array ReadConvertibles(BinaryReader reader, Type type, int numValues) Parameters Type Name Description BinaryReader reader A reader whose BaseStream was previously written to. Type type The underlying type of the expected array. Must implement IConvertible, excluding string and Enum. int numValues The number of values expected. Returns Type Description Array IConvertibles of type type, excluding string and Enum. Remarks Arrays of type string and Enum require ReadStrings(BinaryReader, int) and ReadEnums(BinaryReader, Type, int), respectively. Exceptions Type Condition ArgumentException . | Edit this page View Source ReadEnums(BinaryReader, Type, int) Reads an array of Enum values which were previously written using BinarySerializer. Declaration public static Array ReadEnums(BinaryReader reader, Type type, int numValues) Parameters Type Name Description BinaryReader reader A reader whose BaseStream was previously written to. Type type The type of Enum to be read. Should be the same as was previously written. int numValues The number of values in the array (ie: length). Returns Type Description Array An Array of Enum. Exceptions Type Condition ArgumentException Thrown if type is not an Enum. | Edit this page View Source ReadStrings(BinaryReader, int) Reads an array of string values previously written using BinarySerializer. Declaration public static Array ReadStrings(BinaryReader reader, int numValues) Parameters Type Name Description BinaryReader reader A reader whose BaseStream was previously written to. int numValues The number of values in the array (ie: length). Returns Type Description Array An Array of string. | Edit this page View Source Save(IBinarySerializable[], string, bool) Serializes IBinarySerializable objects and writes them to a file. Declaration public static Task Save(IBinarySerializable[] serializableObjects, string fileName, bool newFile) Parameters Type Name Description IBinarySerializable[] serializableObjects The objects to serialize and save. string fileName The name of the save file. bool newFile A flag indicating whether the file is a new file. Returns Type Description Task A Task. Remarks See WriteSerializableObject(IBinarySerializable, BinaryWriter) and GetBinarySerials(). | Edit this page View Source ToIConvertibleCollection(IEnumerable) Casts a collection into a collection of IConvertibles. Declaration public static IConvertible[] ToIConvertibleCollection(IEnumerable collection) Parameters Type Name Description IEnumerable collection The collection to cast. Returns Type Description IConvertible[] The cast IConvertibles; if an element could not be successfully cast, it is skipped."
  },
  "api/Shared.Services.Serializer.SerializedData.html": {
    "href": "api/Shared.Services.Serializer.SerializedData.html",
    "title": "Struct SerializedData | Hazard!_Docs",
    "summary": "Struct SerializedData A collection of serialized data and metadata gathered from an IBinarySerializable. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Shared.Services.Serializer Assembly: Model.dll Syntax public readonly struct SerializedData Remarks Used by BinarySerializer via GetBinarySerials(). Constructors | Edit this page View Source SerializedData(Type, IConvertible) Constructs SerializedData for a single, untagged value. Declaration public SerializedData(Type serialType, IConvertible value) Parameters Type Name Description Type serialType The type of the value in value. IConvertible value The serializable value. | Edit this page View Source SerializedData(Type, IConvertible, string) Constructs SerializedData for a single, tagged value. Declaration public SerializedData(Type serialType, IConvertible value, string tag) Parameters Type Name Description Type serialType The type of the value in value. IConvertible value The serializable value. string tag A tag (will precede the type and value when written via BinarySerializer). | Edit this page View Source SerializedData(Type, IConvertible[]) Constructs SerializedData for a set of IConvertible values when they may be part of an IConvertible collection. Declaration public SerializedData(Type serialType, IConvertible[] serialValues) Parameters Type Name Description Type serialType The type of the values which are now stored in serialValues. IConvertible[] serialValues IConvertibles storing (potentially converted) values for type serialType. | Edit this page View Source SerializedData(Type, IConvertible[], string) Constructs SerializedData for a set of IConvertiblevalues with a tag when they may be part of an IConvertible collection. Declaration public SerializedData(Type serialType, IConvertible[] serialValues, string tag) Parameters Type Name Description Type serialType The type of the values which are now stored in serialValues. IConvertible[] serialValues IConvertibles storing (potentially converted) values for type serialType. string tag A metadata tag for the values. Properties | Edit this page View Source MemberType Gets or inits the Type of the members of SerialType, if any. Declaration public Type? MemberType { get; init; } Property Value Type Description Type If SerialType is a serializable collection type, the type of its members; otherwise, null. | Edit this page View Source SerialType Gets or inits the type associated with the SerialValues. Declaration public Type SerialType { get; init; } Property Value Type Description Type To be compatible with BinarySerializer, this should be a type of byte or IConvertible, or an IEnumerable of them. | Edit this page View Source SerialValues Gets or inits the values to be serialized. Declaration public IConvertible[] SerialValues { get; init; } Property Value Type Description IConvertible[] An array of IConvertible values provided by an IBinarySerializable object and cast (or converted) to IConvertible. Remarks Will be encoded and written by BinarySerializer. | Edit this page View Source Tag Gets or inits a metadata tag. Declaration public string? Tag { get; init; } Property Value Type Description string A tag to precede SerialValues when written to a file with BinarySerializer; otherwise, null. Remarks To properly read tagged data with BinarySerializer, ReadString() must be called before the requisite ReadConvertible(BinaryReader, Type) or ReadConvertibles(BinaryReader, Type, int). WriteTaggedConvertible(BinaryWriter, Type, IConvertible, string)."
  },
  "api/Shared.Services.Serializer.html": {
    "href": "api/Shared.Services.Serializer.html",
    "title": "Namespace Shared.Services.Serializer | Hazard!_Docs",
    "summary": "Namespace Shared.Services.Serializer Classes BinarySerializer A binary serializer for IBinarySerializable objects. Structs SerializedData A collection of serialized data and metadata gathered from an IBinarySerializable."
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "API Documentation | Hazard!_Docs",
    "summary": "API Documentation This is the API documentation for the Hazard! project. Use the navigation menu to explore the available classes and methods."
  },
  "index.html": {
    "href": "index.html",
    "title": "Hazard! Documentation | Hazard!_Docs",
    "summary": "Hazard! Documentation This is the documentation for the Hazard! project. API Documentation The API documentation can be found here."
  }
}