trigger:
- main

pool:
  vmImage: 'windows-latest'

variables:
  buildConfiguration: 'Release_SelfContained'
  publishPath: '$(Build.ArtifactStagingDirectory)\publish'
  storageAccount: 'jm84storage'
  containerName: 'hazard'
  blobPath: 'self-contained'
  applicationVersion: '1.0.0'
  msbuildArgs: '/t:Publish /p:RuntimeIdentifier=win-x64 /p:SelfContained=true /p:PublishDir=$(publishPath) /p:PublishReadyToRun=true /p:PublishSingleFile=true /p:PublishProtocol=ClickOnce /p:GenerateManifests=true /p:InstallUrl=https://$(storageAccount).blob.core.windows.net/$(containerName)/$(blobPath)/ /p:BootstrapperEnabled=true /p:CreateWebPageOnPublish=true /p:WebPageFileName=Publish.html /p:Install=true /p:InstallFrom=Web /p:UpdateEnabled=true /p:UpdateMode=Foreground /p:MapFileExtensions=true /p:IsWebBootstrapper=true'
steps:
- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '8.0.x'
    includePreviewVersions: false

- script: dotnet nuget locals all --clear
  displayName: 'Clear NuGet Cache'
- task: DotNetCoreCLI@2
  displayName: 'Restore NuGet packages'
  inputs:
    command: 'restore'
    projects: |
      $(Build.SourcesDirectory)/Model/Model.csproj
      $(Build.SourcesDirectory)/ViewModel/ViewModel.csproj
      $(Build.SourcesDirectory)/View/View.csproj
    feedsToUse: 'select'
    arguments: '--runtime win-x64 --self-contained'

- task: MSBuild@1
  displayName: 'Publish Model'
  inputs:
    solution: '$(Build.SourcesDirectory)/Model/Model.csproj'
    configuration: '$(buildConfiguration)'
    platform: 'Any CPU'
    msbuildArguments: '$(msbuildArgs)'

- task: MSBuild@1
  displayName: 'Publish ViewModel'
  inputs:
    solution: '$(Build.SourcesDirectory)/ViewModel/ViewModel.csproj'
    configuration: '$(buildConfiguration)'
    platform: 'Any CPU'
    msbuildArguments: '$(msbuildArgs)'

- task: MSBuild@1
  displayName: 'Publish View'
  inputs:
    solution: '$(Build.SourcesDirectory)/View/View.csproj'
    configuration: '$(buildConfiguration)'
    platform: 'Any CPU'
    msbuildArguments: '$(msbuildArgs) /p:AssemblyName=Hazard'

- task: AzureCLI@2
  displayName: 'Azure CLI'
  inputs:
    azureSubscription: 'JoshMcKnight Azure TopLevel'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      echo "##vso[task.setvariable variable=ARM_CLIENT_ID;issecret=true]$servicePrincipalId" 
      echo "##vso[task.setvariable variable=ARM_ID_TOKEN;issecret=true]$idToken"
      echo "##vso[task.setvariable variable=ARM_TENANT_ID;issecret=true]$tenantId"
    addSpnToEnvironment: true

- bash: |
    az login --service-principal -u $(ARM_CLIENT_ID) --tenant $(ARM_TENANT_ID) --allow-no-subscriptions --federated-token $(ARM_ID_TOKEN)
  displayName: 'Azure Login'

- task: TrustedSigning@0
  displayName: 'Sign with Trusted Signing'
  inputs:
    Endpoint: 'https://eus.codesigning.azure.net/'
    TrustedSigningAccountName: 'joshmcknightsigning'
    CertificateProfileName: 'JoshuaMcKnight'
    FilesFolder: '$(publishPath)'
    FilesFolderFilter: 'application,exe'
    ExcludeEnvironmentCredential: true
    ExcludeWorkloadIdentityCredential: true
    ExcludeManagedIdentityCredential: true
    ExcludeSharedTokenCacheCredential: true
    ExcludeVisualStudioCredential: true
    ExcludeVisualStudioCodeCredential: true
    ExcludeAzureCliCredential: false
    ExcludeAzurePowershellCredential: true
    ExcludeAzureDeveloperCliCredential: true
    ExcludeInteractiveBrowserCredential: true

- task: AzureFileCopy@5
  displayName: 'Copy to Azure Blob Storage'
  inputs:
    SourcePath: '$(publishPath)'
    azureSubscription: 'JoshMcKnight Azure TopLevel'
    Destination: 'AzureBlob'
    storage: 'jm84storage'
    ContainerName: 'hazard'
    BlobPrefix: 'self-contained'