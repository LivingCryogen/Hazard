trigger: none

variables:
  solution: '**/Hazard.sln'
  buildPlatform: 'x64'
  buildConfiguration: 'Release'
  storageAccount: 'jm84storage'
  containerName: 'hazard'
  blobPath: '.'
  publishPath: '$(Build.ArtifactStagingDirectory)\publish\'
  msixOutputPath: '$(Build.ArtifactStagingDirectory)\msix\'

jobs:
  - job: Build
    pool:
      vmImage: 'windows-latest'
    steps:
    # Set up .NET SDK (skipped if cache is available)
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '8.0.x'
        includePreviewVersions: false

    # Install wasm-tools workload - this mysteriously helps with runtime packs
    - task: DotNetCoreCLI@2
      displayName: 'Install wasm-tools Workload'
      inputs:
        command: 'custom'
        custom: 'workload'
        arguments: 'install wasm-tools'
        
    # Global restore with runtime identifier - with proper path handling
    - task: PowerShell@2
      displayName: 'Global Runtime Pack Restore'
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "Performing global restore with runtime identifier..."
          # Find solution files and restore them with runtime
          Get-ChildItem -Path "$(Build.SourcesDirectory)" -Filter "*.sln" -Recurse | ForEach-Object {
            Write-Host "Restoring solution: $($_.FullName)"
            dotnet restore "$($_.FullName)" --runtime win-x64 -v normal
          }
    
    # NuGet installation and restore
    - task: NuGetToolInstaller@1
      displayName: 'Install NuGet'

    - task: NuGetCommand@2
      displayName: 'Restore NuGet Packages'
      inputs:
        command: 'restore'
        restoreSolution: '$(solution)'

    # Standard restore
    - task: DotNetCoreCLI@2
      displayName: 'Restore Solution'
      inputs:
        command: 'restore'
        projects: '$(solution)'
        arguments: '--runtime win-x64'

    # Build with explicit framework references and dependencies
    - task: VSBuild@1
      displayName: 'Build Self-Contained MSIX'
      inputs:
        solution: '$(solution)'
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'
        msbuildArgs: '/p:RuntimeIdentifier=win-x64 /p:AppxPackageDir="$(msixOutputPath)\\" /p:UapAppxPackageBuildMode=SideloadOnly /p:AppxBundlePlatforms="$(buildPlatform)" /p:AppxBundle=Always /p:GenerateAppInstallerFile=False /p:AppxPackageSigningEnabled=False /p:SelfContained=true /p:AppxPackageIncludePrivateApis=false /p:BuildForStore=false /p:IncludeAllResourceLanguages=false /p:AppxAutoIncrementPackageRevision=True /p:GenerateTestArtifacts=True /p:AppxPackageTestDir="$(msixOutputPath)\\"'

    - task: CopyFiles@2
      displayName: 'Copy MSIX package to publish directory'
      inputs:
        SourceFolder: '$(msixOutputPath)'
        Contents: |
          **/*.msix*
          **/*.appinstaller
        TargetFolder: '$(publishPath)'
        CleanTargetFolder: false
        OverWrite: true

    # Azure CLI setup
    - task: AzureCLI@2
      displayName: 'Azure CLI'
      inputs:
        azureSubscription: 'JoshMcKnight Azure TopLevel'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "##vso[task.setvariable variable=ARM_CLIENT_ID;issecret=true]$servicePrincipalId" 
          echo "##vso[task.setvariable variable=ARM_ID_TOKEN;issecret=true]$idToken"
          echo "##vso[task.setvariable variable=ARM_TENANT_ID;issecret=true]$tenantId"
        addSpnToEnvironment: true

    # Azure login
    - bash: |
        az login --service-principal -u $(ARM_CLIENT_ID) --tenant $(ARM_TENANT_ID) --allow-no-subscriptions --federated-token $(ARM_ID_TOKEN)
      displayName: 'Azure Login'

    # Sign the package
    - task: TrustedSigning@0
      displayName: 'Sign with Trusted Signing'
      inputs:
        Endpoint: 'https://eus.codesigning.azure.net/'
        TrustedSigningAccountName: 'joshmcknightsigning'
        CertificateProfileName: 'JoshuaMcKnight'
        FilesFolder: '$(publishPath)'
        FilesFolderRecurse: true
        FilesFolderFilter: '*.msixbundle'
        ExcludeEnvironmentCredential: true
        ExcludeWorkloadIdentityCredential: true
        ExcludeManagedIdentityCredential: true
        ExcludeSharedTokenCacheCredential: true
        ExcludeVisualStudioCredential: true
        ExcludeVisualStudioCodeCredential: true
        ExcludeAzureCliCredential: false
        ExcludeAzurePowershellCredential: true
        ExcludeAzureDeveloperCliCredential: true
        ExcludeInteractiveBrowserCredential: true

    - task: AzureCLI@2
      displayName: 'Copy to Blob Storage and Set Content Types'
      inputs:
        azureSubscription: 'JoshMcKnight Azure TopLevel'
        scriptType: 'pscore'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # Upload using the service principal auth with overwrite
          az storage blob upload-batch `
            --source "$(publishPath)" `
            --destination "$(containerName)" `
            --destination-path "$(blobPath)" `
            --account-name "$(storageAccount)" `
            --auth-mode login `
            --overwrite $true
          # Get uploaded files to verify names
          $uploadedFiles = az storage blob list --container-name "$(containerName)" --prefix "$(blobPath)" --account-name "$(storageAccount)" --auth-mode login --query "[].name" -o tsv
          Write-Host "Uploaded files:"
          $uploadedFiles | ForEach-Object { Write-Host "  $_" }
          # Find the msix/msixbundle file
          $msixFile = $uploadedFiles | Where-Object { $_ -like "*.msix*" } | Select-Object -First 1
          
          if ($msixFile) {
            Write-Host "Setting content type for: $msixFile"
            # Set content type for MSIX package
            az storage blob update `
              --container-name "$(containerName)" `
              --name "$msixFile" `
              --content-type "application/vnd.ms-appx" `
              --account-name "$(storageAccount)" `
              --auth-mode login
          } else {
            Write-Host "##vso[task.logissue type=warning]No MSIX files found to update content type"
          }