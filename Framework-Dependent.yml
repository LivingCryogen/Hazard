# .NET Desktop MSIX packaging pipeline with separate stages for build types
trigger: none

variables:
  solution: '**/*.sln'
  buildPlatform: 'x64'
  buildConfiguration: 'Release'
  storageAccount: 'jm84storage'
  containerName: 'hazard'

stages:
# Framework-Dependent Build and Deployment
- stage: FrameworkDependent
  displayName: 'Framework-Dependent Build'
  variables:
    publishPath: '$(Build.ArtifactStagingDirectory)\publish\framework-dependent'
    msixOutputPath: '$(Build.ArtifactStagingDirectory)\msix\framework-dependent'
    blobPath: 'framework-dependent'
  jobs:
  - job: Build
    pool:
      vmImage: 'windows-latest'
    steps:
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '8.0.x'
        includePreviewVersions: false

    # Standard restore command
    - task: DotNetCoreCLI@2
      inputs:
        command: 'restore'
        projects: '$(solution)'
        feedsToUse: 'select'

# Explicitly install runtime packs
    - task: PowerShell@2
      displayName: 'Install Runtime Packs'
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "Installing runtime packs for win-x64..."
          # Install Windows desktop runtime workload
          dotnet workload install ManagedDesktop
          dotnet workload install UniversalBuildTools

          # Manual restore with runtime identifier
          dotnet restore "$(Build.SourcesDirectory)\Bootstrap\Bootstrap.csproj" --runtime win-x64
          # Check if the runtime packs were installed
          dotnet list "$(Build.SourcesDirectory)\Bootstrap\Bootstrap.csproj" package
    # Cache NuGet packages
    - task: Cache@2
      displayName: 'Cache NuGet packages'
      inputs:
        key: 'nuget | "$(Agent.OS)" | **/*.csproj'
        restoreKeys: |
          nuget | "$(Agent.OS)"
        path: $(Pipeline.Workspace)/.nuget/packages
        cacheHitVar: 'CACHE_RESTORED'
    - task: VSBuild@1
      displayName: 'Build Framework-Dependent MSIX'
      inputs:
        solution: '$(solution)'
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'
        msbuildArgs: '/p:AppxPackageDir="$(msixOutputPath)\\" /p:UapAppxPackageBuildMode=SideloadOnly /p:AppxBundlePlatforms="$(buildPlatform)" /p:AppxBundle=Always /p:GenerateAppInstaller=True /p:AppxPackageSigningEnabled=False /p:SelfContained=false'

    - task: CopyFiles@2
      displayName: 'Copy MSIX package to publish directory'
      inputs:
        SourceFolder: '$(msixOutputPath)'
        Contents: '**/*.msix*'
        TargetFolder: '$(publishPath)'
        CleanTargetFolder: false
        OverWrite: true

    - task: AzureCLI@2
      displayName: 'Azure CLI'
      inputs:
        azureSubscription: 'JoshMcKnight Azure TopLevel'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "##vso[task.setvariable variable=ARM_CLIENT_ID;issecret=true]$servicePrincipalId" 
          echo "##vso[task.setvariable variable=ARM_ID_TOKEN;issecret=true]$idToken"
          echo "##vso[task.setvariable variable=ARM_TENANT_ID;issecret=true]$tenantId"
        addSpnToEnvironment: true

    - bash: |
        az login --service-principal -u $(ARM_CLIENT_ID) --tenant $(ARM_TENANT_ID) --allow-no-subscriptions --federated-token $(ARM_ID_TOKEN)
      displayName: 'Azure Login'

    - task: TrustedSigning@0
      displayName: 'Sign with Trusted Signing'
      inputs:
        Endpoint: 'https://eus.codesigning.azure.net/'
        TrustedSigningAccountName: 'joshmcknightsigning'
        CertificateProfileName: 'JoshuaMcKnight'
        FilesFolder: '$(publishPath)'
        ExcludeEnvironmentCredential: true
        ExcludeWorkloadIdentityCredential: true
        ExcludeManagedIdentityCredential: true
        ExcludeSharedTokenCacheCredential: true
        ExcludeVisualStudioCredential: true
        ExcludeVisualStudioCodeCredential: true
        ExcludeAzureCliCredential: false
        ExcludeAzurePowershellCredential: true
        ExcludeAzureDeveloperCliCredential: true
        ExcludeInteractiveBrowserCredential: true

    - task: AzureCLI@2
      displayName: 'Copy to Blob Storage and Set Content Types'
      inputs:
        azureSubscription: 'JoshMcKnight Azure TopLevel'
        scriptType: 'pscore'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # Upload using the service principal auth with overwrite
          az storage blob upload-batch `
            --source "$(publishPath)" `
            --destination "$(containerName)" `
            --destination-path "$(blobPath)" `
            --account-name "$(storageAccount)" `
            --auth-mode login `
            --overwrite $true

          # Set content type for MSIX package
          az storage blob update `
            --container-name "$(containerName)" `
            --name "$(blobPath)/Hazard.msix" `
            --content-type "application/vnd.ms-appx" `
            --account-name "$(storageAccount)" `
            --auth-mode login

# Self-Contained Build and Deployment
- stage: SelfContained
  displayName: 'Self-Contained Build'
  variables:
    publishPath: '$(Build.ArtifactStagingDirectory)\publish\self-contained'
    msixOutputPath: '$(Build.ArtifactStagingDirectory)\msix\self-contained'
    blobPath: 'self-contained'
  jobs:
  - job: Build
    pool:
      vmImage: 'windows-latest'
    steps:
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '8.0.x'
        includePreviewVersions: false

    # Cache NuGet packages
    # Standard restore command
    - task: DotNetCoreCLI@2
      inputs:
        command: 'restore'
        projects: '$(solution)'
        feedsToUse: 'select'

    - task: PowerShell@2
      displayName: 'Install Runtime Packs'
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "Installing runtime packs for win-x64..."
          # Install Windows desktop runtime workload
          dotnet workload install ManagedDesktop
          dotnet workload install UniversalBuildTools

          # Manual restore with runtime identifier
          dotnet restore "$(Build.SourcesDirectory)\Bootstrap\Bootstrap.csproj" --runtime win-x64
          # Check if the runtime packs were installed
          dotnet list "$(Build.SourcesDirectory)\Bootstrap\Bootstrap.csproj" package

    - task: Cache@2
      displayName: 'Cache NuGet packages'
      inputs:
        key: 'nuget | "$(Agent.OS)" | **/*.csproj'
        restoreKeys: |
          nuget | "$(Agent.OS)"
        path: $(Pipeline.Workspace)/.nuget/packages
        cacheHitVar: 'CACHE_RESTORED'

    - task: VSBuild@1
      displayName: 'Build Self-Contained MSIX'
      inputs:
        solution: '$(solution)'
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'
        msbuildArgs: '/p:AppxPackageDir="$(msixOutputPath)\\" /p:UapAppxPackageBuildMode=SideloadOnly /p:AppxBundlePlatforms="$(buildPlatform)" /p:AppxBundle=Always /p:GenerateAppInstaller=True /p:AppxPackageSigningEnabled=False /p:SelfContained=true'

    - task: CopyFiles@2
      displayName: 'Copy MSIX package to publish directory'
      inputs:
        SourceFolder: '$(msixOutputPath)'
        Contents: '**/*.msix*'
        TargetFolder: '$(publishPath)'
        CleanTargetFolder: false
        OverWrite: true

    - task: AzureCLI@2
      displayName: 'Azure CLI'
      inputs:
        azureSubscription: 'JoshMcKnight Azure TopLevel'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "##vso[task.setvariable variable=ARM_CLIENT_ID;issecret=true]$servicePrincipalId" 
          echo "##vso[task.setvariable variable=ARM_ID_TOKEN;issecret=true]$idToken"
          echo "##vso[task.setvariable variable=ARM_TENANT_ID;issecret=true]$tenantId"
        addSpnToEnvironment: true

    - bash: |
        az login --service-principal -u $(ARM_CLIENT_ID) --tenant $(ARM_TENANT_ID) --allow-no-subscriptions --federated-token $(ARM_ID_TOKEN)
      displayName: 'Azure Login'
    - task: TrustedSigning@0
      displayName: 'Sign with Trusted Signing'
      inputs:
        Endpoint: 'https://eus.codesigning.azure.net/'
        TrustedSigningAccountName: 'joshmcknightsigning'
        CertificateProfileName: 'JoshuaMcKnight'
        FilesFolder: '$(publishPath)'
        ExcludeEnvironmentCredential: true
        ExcludeWorkloadIdentityCredential: true
        ExcludeManagedIdentityCredential: true
        ExcludeSharedTokenCacheCredential: true
        ExcludeVisualStudioCredential: true
        ExcludeVisualStudioCodeCredential: true
        ExcludeAzureCliCredential: false
        ExcludeAzurePowershellCredential: true
        ExcludeAzureDeveloperCliCredential: true
        ExcludeInteractiveBrowserCredential: true

    - task: AzureCLI@2
      displayName: 'Copy to Blob Storage and Set Content Types'
      inputs:
        azureSubscription: 'JoshMcKnight Azure TopLevel'
        scriptType: 'pscore'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # Upload using the service principal auth with overwrite
          az storage blob upload-batch `
            --source "$(publishPath)" `
            --destination "$(containerName)" `
            --destination-path "$(blobPath)" `
            --account-name "$(storageAccount)" `
            --auth-mode login `
            --overwrite $true

          # Set content type for MSIX package
          az storage blob update `
            --container-name "$(containerName)" `
            --name "$(blobPath)/Hazard.msix" `
            --content-type "application/vnd.ms-appx" `
            --account-name "$(storageAccount)" `
            --auth-mode login