trigger: none

variables:
  solution: '**/Hazard.sln'
  buildPlatform: 'x64'
  buildConfiguration: 'Release'
  storageAccount: 'jm84storage'
  containerName: 'hazard'
  ghPagesBaseUrl: 'https://livingcryogen.github.io/Hazard'

stages:
- stage: FrameworkDependent
  displayName: 'Framework-Dependent Build'
  variables:
    publishPath: '$(Build.ArtifactStagingDirectory)\publish\framework-dependent'
    msixOutputPath: '$(Build.ArtifactStagingDirectory)\msix\framework-dependent'
    blobPath: 'framework-dependent'
  jobs:
  - job: Build
    pool:
      vmImage: 'windows-latest'
    steps:

    # Set up .NET SDK (skipped if cache is available)
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '8.0.x'
        includePreviewVersions: false
      condition: ne(variables.DOTNET_CACHE_RESTORED, 'true')

    # Install wasm-tools workload - this mysteriously helps with runtime packs
    - task: DotNetCoreCLI@2
      displayName: 'Install wasm-tools Workload'
      inputs:
        command: 'custom'
        custom: 'workload'
        arguments: 'install wasm-tools'
        
    # Global restore with runtime identifier - with proper path handling
    - task: PowerShell@2
      displayName: 'Global Runtime Pack Restore'
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "Performing global restore with runtime identifier..."
          # Find solution files and restore them with runtime
          Get-ChildItem -Path "$(Build.SourcesDirectory)" -Filter "*.sln" -Recurse | ForEach-Object {
            Write-Host "Restoring solution: $($_.FullName)"
            dotnet restore "$($_.FullName)" --runtime win-x64 -v normal
          }
    
    # NuGet installation and restore
    - task: NuGetToolInstaller@1
      displayName: 'Install NuGet'

    - task: NuGetCommand@2
      displayName: 'Restore NuGet Packages'
      inputs:
        command: 'restore'
        restoreSolution: '$(solution)'

    # Standard restore
    - task: DotNetCoreCLI@2
      displayName: 'Restore Solution'
      inputs:
        command: 'restore'
        projects: '$(solution)'
        arguments: '--runtime win-x64'

    # Build with explicit framework references and dependencies
    - task: VSBuild@1
      displayName: 'Build Framework-Dependent MSIX'
      inputs:
        solution: '$(solution)'
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'
        msbuildArgs: '/p:RuntimeIdentifier=win-x64 /p:AppxPackageDir="$(msixOutputPath)\\" /p:UapAppxPackageBuildMode=SideloadOnly /p:AppxBundlePlatforms="$(buildPlatform)" /p:AppxBundle=Always /p:GenerateAppInstaller=True /p:AppInstallerUri="$(ghPagesBaseUrl)/packages/framework-dependent" /p:AppInstallerCheckForUpdateFrequency=OnApplicationRun /p:AppInstallerUpdateFrequency=1 /bl:$(Build.ArtifactStagingDirectory)\msbuild.binlog /v:detailed /p:AppxPackageSigningEnabled=False /p:SelfContained=false /p:AppxPackageIncludePrivateApis=false /p:BuildForStore=false /p:IncludeAllResourceLanguages=false'

    - task: PowerShell@2
      displayName: 'Debug AppInstaller Generation'
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "==== MSIX BUILD OUTPUT DIRECTORY CONTENTS ===="
          Get-ChildItem -Path "$(msixOutputPath)" -Recurse | ForEach-Object { Write-Host $_.FullName }
          
          Write-Host "==== SEARCHING FOR APPINSTALLER FILES ===="
          $installerFiles = Get-ChildItem -Path "$(msixOutputPath)" -Filter "*.appinstaller" -Recurse
          if ($installerFiles.Count -eq 0) {
            Write-Host "No .appinstaller files found in output directory!"
          } else {
            Write-Host "Found $($installerFiles.Count) .appinstaller files:"
            $installerFiles | ForEach-Object { Write-Host $_.FullName }
          }
          
          # Check for build logs that might reveal why appinstaller wasn't generated
          Write-Host "==== SEARCHING FOR BUILD LOGS WITH APPINSTALLER INFO ===="
          $buildLogs = Get-ChildItem -Path "$(Build.ArtifactStagingDirectory)" -Filter "*.binlog" -Recurse
          if ($buildLogs.Count -gt 0) {
            Write-Host "Build logs found, but would need to be analyzed separately"
          } else {
            Write-Host "No build logs found"
          }
          
          # Check if the MSIX is configured for store deployment, which would prevent appinstaller
          Write-Host "==== CHECKING PROJECT FILES FOR STORE SETTINGS ===="
          $projFiles = Get-ChildItem -Path "$(Build.SourcesDirectory)" -Filter "*.wapproj" -Recurse
          foreach($projFile in $projFiles) {
            Write-Host "Examining $($projFile.FullName)"
            $content = Get-Content $projFile.FullName
            if ($content -match "BuildForStore") {
              Write-Host "BuildForStore setting found in project file"
            }
          }
    # Copy MSIX to publish directory
    - task: CopyFiles@2
      displayName: 'Copy MSIX package to publish directory'
      inputs:
        SourceFolder: '$(msixOutputPath)'
        Contents: '**/*.msix*'
        TargetFolder: '$(publishPath)'
        CleanTargetFolder: false
        OverWrite: true

# Copy appinstaller files
    - task: CopyFiles@2
      displayName: 'Copy AppInstaller files'
      inputs:
        SourceFolder: '$(msixOutputPath)'
        Contents: '**/*.appinstaller'
        TargetFolder: '$(publishPath)'
        CleanTargetFolder: false
        OverWrite: true

    # Azure CLI setup
    - task: AzureCLI@2
      displayName: 'Azure CLI'
      inputs:
        azureSubscription: 'JoshMcKnight Azure TopLevel'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "##vso[task.setvariable variable=ARM_CLIENT_ID;issecret=true]$servicePrincipalId" 
          echo "##vso[task.setvariable variable=ARM_ID_TOKEN;issecret=true]$idToken"
          echo "##vso[task.setvariable variable=ARM_TENANT_ID;issecret=true]$tenantId"
        addSpnToEnvironment: true

    # Azure login
    - bash: |
        az login --service-principal -u $(ARM_CLIENT_ID) --tenant $(ARM_TENANT_ID) --allow-no-subscriptions --federated-token $(ARM_ID_TOKEN)
      displayName: 'Azure Login'

    # Sign the package
    - task: TrustedSigning@0
      displayName: 'Sign with Trusted Signing'
      inputs:
        Endpoint: 'https://eus.codesigning.azure.net/'
        TrustedSigningAccountName: 'joshmcknightsigning'
        CertificateProfileName: 'JoshuaMcKnight'
        FilesFolder: '$(publishPath)'
        FilesFolderRecurse: true
        FilesFolderFilter: '*.msixbundle'
        ExcludeEnvironmentCredential: true
        ExcludeWorkloadIdentityCredential: true
        ExcludeManagedIdentityCredential: true
        ExcludeSharedTokenCacheCredential: true
        ExcludeVisualStudioCredential: true
        ExcludeVisualStudioCodeCredential: true
        ExcludeAzureCliCredential: false
        ExcludeAzurePowershellCredential: true
        ExcludeAzureDeveloperCliCredential: true
        ExcludeInteractiveBrowserCredential: true

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Build to DevOps'
      inputs:
       PathtoPublish: '$(publishPath)'
       ArtifactName: 'msix-package'
       publishLocation: Container

- stage: SelfContained
  displayName: 'Self-Contained Build'
  variables:
    publishPath: '$(Build.ArtifactStagingDirectory)\publish\self-contained'
    msixOutputPath: '$(Build.ArtifactStagingDirectory)\msix\self-contained'
    blobPath: 'self-contained'
  jobs:
  - job: Build
    pool:
      vmImage: 'windows-latest'
    steps:

    # Set up .NET SDK (skipped if cache is available)
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '8.0.x'
        includePreviewVersions: false
      condition: ne(variables.DOTNET_CACHE_RESTORED, 'true')

    # Install wasm-tools workload - this mysteriously helps with runtime packs
    - task: DotNetCoreCLI@2
      displayName: 'Install wasm-tools Workload'
      inputs:
        command: 'custom'
        custom: 'workload'
        arguments: 'install wasm-tools'
        
    # Global restore with runtime identifier - with proper path handling
    - task: PowerShell@2
      displayName: 'Global Runtime Pack Restore'
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "Performing global restore with runtime identifier..."
          # Find solution files and restore them with runtime
          Get-ChildItem -Path "$(Build.SourcesDirectory)" -Filter "*.sln" -Recurse | ForEach-Object {
            Write-Host "Restoring solution: $($_.FullName)"
            dotnet restore "$($_.FullName)" --runtime win-x64 -v normal
          }
    
    # NuGet installation and restore
    - task: NuGetToolInstaller@1
      displayName: 'Install NuGet'

    - task: NuGetCommand@2
      displayName: 'Restore NuGet Packages'
      inputs:
        command: 'restore'
        restoreSolution: '$(solution)'

    # Standard restore
    - task: DotNetCoreCLI@2
      displayName: 'Restore Solution'
      inputs:
        command: 'restore'
        projects: '$(solution)'
        arguments: '--runtime win-x64'

    # Build with explicit framework references and dependencies
    - task: VSBuild@1
      displayName: 'Build Self-Contained MSIX'
      inputs:
        solution: '$(solution)'
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'
        msbuildArgs: '/p:RuntimeIdentifier=win-x64 /p:AppxPackageDir="$(msixOutputPath)\\" /p:UapAppxPackageBuildMode=SideloadOnly /p:AppxBundlePlatforms="$(buildPlatform)" /p:AppxBundle=Always /p:GenerateAppInstaller=True /p:AppxPackageSigningEnabled=False /p:SelfContained=true /p:AppxPackageIncludePrivateApis=false /p:BuildForStore=false /p:IncludeAllResourceLanguages=false'

    # Copy MSIX to publish directory
    - task: CopyFiles@2
      displayName: 'Copy MSIX package to publish directory'
      inputs:
        SourceFolder: '$(msixOutputPath)'
        Contents: '**/*.msix*'
        TargetFolder: '$(publishPath)'
        CleanTargetFolder: false
        OverWrite: true

# Copy appinstaller files
    - task: CopyFiles@2
      displayName: 'Copy AppInstaller files'
      inputs:
        SourceFolder: '$(msixOutputPath)'
        Contents: '**/*.appinstaller'
        TargetFolder: '$(publishPath)'
        CleanTargetFolder: false
        OverWrite: true

    # Azure CLI setup
    - task: AzureCLI@2
      displayName: 'Azure CLI'
      inputs:
        azureSubscription: 'JoshMcKnight Azure TopLevel'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "##vso[task.setvariable variable=ARM_CLIENT_ID;issecret=true]$servicePrincipalId" 
          echo "##vso[task.setvariable variable=ARM_ID_TOKEN;issecret=true]$idToken"
          echo "##vso[task.setvariable variable=ARM_TENANT_ID;issecret=true]$tenantId"
        addSpnToEnvironment: true

    # Azure login
    - bash: |
        az login --service-principal -u $(ARM_CLIENT_ID) --tenant $(ARM_TENANT_ID) --allow-no-subscriptions --federated-token $(ARM_ID_TOKEN)
      displayName: 'Azure Login'

    # Sign the package
    - task: TrustedSigning@0
      displayName: 'Sign with Trusted Signing'
      inputs:
        Endpoint: 'https://eus.codesigning.azure.net/'
        TrustedSigningAccountName: 'joshmcknightsigning'
        CertificateProfileName: 'JoshuaMcKnight'
        FilesFolder: '$(publishPath)'
        FilesFolderRecurse: true
        FilesFolderFilter: '*.msixbundle'
        ExcludeEnvironmentCredential: true
        ExcludeWorkloadIdentityCredential: true
        ExcludeManagedIdentityCredential: true
        ExcludeSharedTokenCacheCredential: true
        ExcludeVisualStudioCredential: true
        ExcludeVisualStudioCodeCredential: true
        ExcludeAzureCliCredential: false
        ExcludeAzurePowershellCredential: true
        ExcludeAzureDeveloperCliCredential: true
        ExcludeInteractiveBrowserCredential: true

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Build to DevOps'
      inputs:
       PathtoPublish: '$(publishPath)'
       ArtifactName: 'msix-package-self-contained'
       publishLocation: Container

- stage: DeployFDBtoGHPages
  displayName: 'Deploy FrameworkDependent Build to GHPages'
  dependsOn: FrameworkDependent
  jobs:
    - job: Deploy
      pool:
        vmImage: 'windows-latest'
      steps:
        - task: DownloadBuildArtifacts@0
          displayName: 'Download Built Artifacts'
          inputs:
            buildType: current
            downloadType: 'single'
            artifactName: 'msix-package'
            downloadPath: '$(System.ArtifactsDirectory)'
            
        - checkout: self
          persistCredentials: true
          
        # Configure commit authorship info
        - task: PowerShell@2
          displayName: 'Setup Git Configuration'
          inputs:
            targetType: 'inline'
            script: |
              git config --global user.email "joshua.a.mcknight@gmail.com"
              git config --global user.name "Joshua McKnight via Azure Pipelines"
          
        # Deploy to /docs
        - task: PowerShell@2
          displayName: 'Deploy to GitHub /docs'
          inputs:
            targetType: inline
            script: |
              # check current Branch
              $currentBranch = git rev-parse --abbrev-ref HEAD
              Write-Host "Current branch: $currentBranch"
              
              # ensure we get changes
              git pull origin $currentBranch
              
              # ensure /docs exists
              $docsDirectory = "$(Build.SourcesDirectory)/docs"
              if (-not (Test-Path $docsDirectory)) {
                Write-Host "Creating /docs..."
                New-Item -Path $docsDirectory -ItemType Directory -Force | Out-Null
                "" | Out-File -FilePath "$docsDirectory/.nojekyll" -NoNewline
              }
              
              # create /packages if needed
              $packagesDirectory = "$docsDirectory/packages"
              if (-not (Test-Path $packagesDirectory)) {
                New-Item -Path $packagesDirectory -ItemType Directory -Force | Out-Null
              }
              
              # create /framework-dependent if needed
              $FWDDirectory = "$packagesDirectory/framework-dependent"
              if (-not (Test-Path $FWDDirectory)) {
                New-Item -Path $FWDDirectory -ItemType Directory -Force | Out-Null
              }
              
              # Copy files from artifacts to docs directory
              Copy-Item -Path "$(System.ArtifactsDirectory)/msix-package/*" -Destination $FWDDirectory -Recurse -Force -Verbose
              
              # Add changes to git
              git add -f $docsDirectory
              
              # Check if there are changes to commit
              $status = git status --porcelain
              if ($status) {
                Write-Host "Changes detected, committing and pushing..."
                git commit -m "Update GitHub Pages from Azure DevOps build $(Build.BuildNumber)"
                git push origin HEAD:main
              } else {
                Write-Host "No changes detected, skipping commit and push."
              }

- stage: DeploySCtoGHPages
  displayName: 'Deploy SelfContained Build to GHPages'
  dependsOn: SelfContained
  jobs:
    - job: Deploy
      pool:
        vmImage: 'windows-latest'
      steps:
        - task: DownloadBuildArtifacts@0
          displayName: 'Download Built Artifacts'
          inputs:
            buildType: current
            downloadType: 'single'
            artifactName: 'msix-package-self-contained'
            downloadPath: '$(System.ArtifactsDirectory)'
            
        - checkout: self
          persistCredentials: true
          
        # Configure commit authorship info
        - task: PowerShell@2
          displayName: 'Setup Git Configuration'
          inputs:
            targetType: 'inline'
            script: |
              git config --global user.email "joshua.a.mcknight@gmail.com"
              git config --global user.name "Joshua McKnight via Azure Pipelines"
          
        # Deploy to /docs
        - task: PowerShell@2
          displayName: 'Deploy to GitHub /docs'
          inputs:
            targetType: inline
            script: |
              # check current Branch
              $currentBranch = git rev-parse --abbrev-ref HEAD
              Write-Host "Current branch: $currentBranch"
              
              # ensure we get changes
              git pull origin $currentBranch
              
              # ensure /docs exists
              $docsDirectory = "$(Build.SourcesDirectory)/docs"
              if (-not (Test-Path $docsDirectory)) {
                Write-Host "Creating /docs..."
                New-Item -Path $docsDirectory -ItemType Directory -Force | Out-Null
                "" | Out-File -FilePath "$docsDirectory/.nojekyll" -NoNewline
              }
              
              # create /packages if needed
              $packagesDirectory = "$docsDirectory/packages"
              if (-not (Test-Path $packagesDirectory)) {
                New-Item -Path $packagesDirectory -ItemType Directory -Force | Out-Null
              }
              
              # create /self-contained if needed
              $SCDirectory = "$packagesDirectory/self-contained"
              if (-not (Test-Path $SCDirectory)) {
                New-Item -Path $SCDirectory -ItemType Directory -Force | Out-Null
              }
              
              # Copy files from artifacts to docs directory
              Copy-Item -Path "$(System.ArtifactsDirectory)/msix-package-self-contained/*" -Destination $SCDirectory -Recurse -Force -Verbose
              
              # Add changes to git
              git add -f $docsDirectory
              
              # Check if there are changes to commit
              $status = git status --porcelain
              if ($status) {
                Write-Host "Changes detected, committing and pushing..."
                git commit -m "Update GitHub Pages from Azure DevOps build $(Build.BuildNumber)"
                git push origin HEAD:main
              } else {
                Write-Host "No changes detected, skipping commit and push."
              }