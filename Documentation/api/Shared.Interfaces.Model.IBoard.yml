### YamlMime:ManagedReference
items:
- uid: Shared.Interfaces.Model.IBoard
  commentId: T:Shared.Interfaces.Model.IBoard
  id: IBoard
  parent: Shared.Interfaces.Model
  children:
  - Shared.Interfaces.Model.IBoard.Armies
  - Shared.Interfaces.Model.IBoard.CheckContinentFlip(Shared.Geography.Enums.TerrID,System.Int32)
  - Shared.Interfaces.Model.IBoard.Claims(System.Int32,Shared.Geography.Enums.TerrID)
  - Shared.Interfaces.Model.IBoard.Claims(System.Int32,Shared.Geography.Enums.TerrID,System.Int32)
  - Shared.Interfaces.Model.IBoard.Conquer(Shared.Geography.Enums.TerrID,Shared.Geography.Enums.TerrID,System.Int32)
  - Shared.Interfaces.Model.IBoard.ContinentOwner
  - Shared.Interfaces.Model.IBoard.ContinentOwnerChanged
  - Shared.Interfaces.Model.IBoard.Item(System.Int32,System.String)
  - Shared.Interfaces.Model.IBoard.Reinforce(Shared.Geography.Enums.TerrID)
  - Shared.Interfaces.Model.IBoard.Reinforce(Shared.Geography.Enums.TerrID,System.Int32)
  - Shared.Interfaces.Model.IBoard.TerritoryChanged
  - Shared.Interfaces.Model.IBoard.TerritoryOwner
  langs:
  - csharp
  - vb
  name: IBoard
  nameWithType: IBoard
  fullName: Shared.Interfaces.Model.IBoard
  type: Interface
  source:
    remote:
      path: Shared/Interfaces/Model/IBoard.cs
      branch: main
      repo: https://github.com/LivingCryogen/Hazard.git
    id: IBoard
    path: ../Shared/Interfaces/Model/IBoard.cs
    startLine: 7
  assemblies:
  - Model
  namespace: Shared.Interfaces.Model
  summary: Encapsulates Data and Actions that directly affect the armies, territories, and continents on the game board.
  example: []
  syntax:
    content: 'public interface IBoard : IBinarySerializable'
    content.vb: Public Interface IBoard Inherits IBinarySerializable
  inheritedMembers:
  - Shared.Interfaces.Model.IBinarySerializable.LoadFromBinary(System.IO.BinaryReader)
  - Shared.Interfaces.Model.IBinarySerializable.GetBinarySerials
- uid: Shared.Interfaces.Model.IBoard.TerritoryChanged
  commentId: E:Shared.Interfaces.Model.IBoard.TerritoryChanged
  id: TerritoryChanged
  parent: Shared.Interfaces.Model.IBoard
  langs:
  - csharp
  - vb
  name: TerritoryChanged
  nameWithType: IBoard.TerritoryChanged
  fullName: Shared.Interfaces.Model.IBoard.TerritoryChanged
  type: Event
  source:
    remote:
      path: Shared/Interfaces/Model/IBoard.cs
      branch: main
      repo: https://github.com/LivingCryogen/Hazard.git
    id: TerritoryChanged
    path: ../Shared/Interfaces/Model/IBoard.cs
    startLine: 15
  assemblies:
  - Model
  namespace: Shared.Interfaces.Model
  summary: Notifies <xref href="Shared.Interfaces.ViewModel.IMainVM" data-throw-if-not-resolved="false"></xref> that a territory's owner or armies have changed.
  remarks: Should be invoked manually when affecting changes on <xref href="Shared.Interfaces.Model.IBoard.Armies" data-throw-if-not-resolved="false"></xref> or <xref href="Shared.Interfaces.Model.IBoard.TerritoryOwner" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: event EventHandler<ITerritoryChangedEventArgs> TerritoryChanged
    return:
      type: System.EventHandler{Shared.Interfaces.Model.ITerritoryChangedEventArgs}
    content.vb: Event TerritoryChanged As EventHandler(Of ITerritoryChangedEventArgs)
- uid: Shared.Interfaces.Model.IBoard.ContinentOwnerChanged
  commentId: E:Shared.Interfaces.Model.IBoard.ContinentOwnerChanged
  id: ContinentOwnerChanged
  parent: Shared.Interfaces.Model.IBoard
  langs:
  - csharp
  - vb
  name: ContinentOwnerChanged
  nameWithType: IBoard.ContinentOwnerChanged
  fullName: Shared.Interfaces.Model.IBoard.ContinentOwnerChanged
  type: Event
  source:
    remote:
      path: Shared/Interfaces/Model/IBoard.cs
      branch: main
      repo: https://github.com/LivingCryogen/Hazard.git
    id: ContinentOwnerChanged
    path: ../Shared/Interfaces/Model/IBoard.cs
    startLine: 22
  assemblies:
  - Model
  namespace: Shared.Interfaces.Model
  summary: Notifies <xref href="Shared.Interfaces.ViewModel.IMainVM" data-throw-if-not-resolved="false"></xref> that a continent's owner has changed.
  remarks: Should be invoked manually when affecting changes on <xref href="Shared.Interfaces.Model.IBoard.ContinentOwner" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: event EventHandler<IContinentOwnerChangedEventArgs>? ContinentOwnerChanged
    return:
      type: System.EventHandler{Shared.Interfaces.IContinentOwnerChangedEventArgs}
    content.vb: Event ContinentOwnerChanged As EventHandler(Of IContinentOwnerChangedEventArgs)
- uid: Shared.Interfaces.Model.IBoard.Armies
  commentId: P:Shared.Interfaces.Model.IBoard.Armies
  id: Armies
  parent: Shared.Interfaces.Model.IBoard
  langs:
  - csharp
  - vb
  name: Armies
  nameWithType: IBoard.Armies
  fullName: Shared.Interfaces.Model.IBoard.Armies
  type: Property
  source:
    remote:
      path: Shared/Interfaces/Model/IBoard.cs
      branch: main
      repo: https://github.com/LivingCryogen/Hazard.git
    id: Armies
    path: ../Shared/Interfaces/Model/IBoard.cs
    startLine: 27
  assemblies:
  - Model
  namespace: Shared.Interfaces.Model
  summary: Contains the number of armies in each territory.
  example: []
  syntax:
    content: Dictionary<TerrID, int> Armies { get; init; }
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{Shared.Geography.Enums.TerrID,System.Int32}
    content.vb: Property Armies As Dictionary(Of TerrID, Integer)
  overload: Shared.Interfaces.Model.IBoard.Armies*
- uid: Shared.Interfaces.Model.IBoard.TerritoryOwner
  commentId: P:Shared.Interfaces.Model.IBoard.TerritoryOwner
  id: TerritoryOwner
  parent: Shared.Interfaces.Model.IBoard
  langs:
  - csharp
  - vb
  name: TerritoryOwner
  nameWithType: IBoard.TerritoryOwner
  fullName: Shared.Interfaces.Model.IBoard.TerritoryOwner
  type: Property
  source:
    remote:
      path: Shared/Interfaces/Model/IBoard.cs
      branch: main
      repo: https://github.com/LivingCryogen/Hazard.git
    id: TerritoryOwner
    path: ../Shared/Interfaces/Model/IBoard.cs
    startLine: 31
  assemblies:
  - Model
  namespace: Shared.Interfaces.Model
  summary: Contains the player number of the owner of each territory.
  example: []
  syntax:
    content: Dictionary<TerrID, int> TerritoryOwner { get; init; }
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{Shared.Geography.Enums.TerrID,System.Int32}
    content.vb: Property TerritoryOwner As Dictionary(Of TerrID, Integer)
  overload: Shared.Interfaces.Model.IBoard.TerritoryOwner*
- uid: Shared.Interfaces.Model.IBoard.ContinentOwner
  commentId: P:Shared.Interfaces.Model.IBoard.ContinentOwner
  id: ContinentOwner
  parent: Shared.Interfaces.Model.IBoard
  langs:
  - csharp
  - vb
  name: ContinentOwner
  nameWithType: IBoard.ContinentOwner
  fullName: Shared.Interfaces.Model.IBoard.ContinentOwner
  type: Property
  source:
    remote:
      path: Shared/Interfaces/Model/IBoard.cs
      branch: main
      repo: https://github.com/LivingCryogen/Hazard.git
    id: ContinentOwner
    path: ../Shared/Interfaces/Model/IBoard.cs
    startLine: 35
  assemblies:
  - Model
  namespace: Shared.Interfaces.Model
  summary: Contains the player number of the owner of each continent.
  example: []
  syntax:
    content: Dictionary<ContID, int> ContinentOwner { get; init; }
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{Shared.Geography.Enums.ContID,System.Int32}
    content.vb: Property ContinentOwner As Dictionary(Of ContID, Integer)
  overload: Shared.Interfaces.Model.IBoard.ContinentOwner*
- uid: Shared.Interfaces.Model.IBoard.Item(System.Int32,System.String)
  commentId: P:Shared.Interfaces.Model.IBoard.Item(System.Int32,System.String)
  id: Item(System.Int32,System.String)
  parent: Shared.Interfaces.Model.IBoard
  langs:
  - csharp
  - vb
  name: this[int, string]
  nameWithType: IBoard.this[int, string]
  fullName: Shared.Interfaces.Model.IBoard.this[int, string]
  type: Property
  source:
    remote:
      path: Shared/Interfaces/Model/IBoard.cs
      branch: main
      repo: https://github.com/LivingCryogen/Hazard.git
    id: this[]
    path: ../Shared/Interfaces/Model/IBoard.cs
    startLine: 42
  assemblies:
  - Model
  namespace: Shared.Interfaces.Model
  summary: Gets a list of territories or of continents on the board owned by a specfied player.
  example: []
  syntax:
    content: List<object> this[int playerNumber, string enumName] { get; }
    parameters:
    - id: playerNumber
      type: System.Int32
      description: The number of the specified player.
    - id: enumName
      type: System.String
      description: The name of either <xref href="Shared.Geography.Enums.TerrID" data-throw-if-not-resolved="false"></xref> or <xref href="Shared.Geography.Enums.ContID" data-throw-if-not-resolved="false"></xref>, for territories owner or continents owned, respectively.
    return:
      type: System.Collections.Generic.List{System.Object}
      description: A list of all territories OR a list of all continents owned by player <code class="paramref">playerNumber</code>.
    content.vb: ReadOnly Default Property this[](playerNumber As Integer, enumName As String) As List(Of Object)
  overload: Shared.Interfaces.Model.IBoard.Item*
  nameWithType.vb: IBoard.this[](Integer, String)
  fullName.vb: Shared.Interfaces.Model.IBoard.this[](Integer, String)
  name.vb: this[](Integer, String)
- uid: Shared.Interfaces.Model.IBoard.Claims(System.Int32,Shared.Geography.Enums.TerrID)
  commentId: M:Shared.Interfaces.Model.IBoard.Claims(System.Int32,Shared.Geography.Enums.TerrID)
  id: Claims(System.Int32,Shared.Geography.Enums.TerrID)
  parent: Shared.Interfaces.Model.IBoard
  langs:
  - csharp
  - vb
  name: Claims(int, TerrID)
  nameWithType: IBoard.Claims(int, TerrID)
  fullName: Shared.Interfaces.Model.IBoard.Claims(int, Shared.Geography.Enums.TerrID)
  type: Method
  source:
    remote:
      path: Shared/Interfaces/Model/IBoard.cs
      branch: main
      repo: https://github.com/LivingCryogen/Hazard.git
    id: Claims
    path: ../Shared/Interfaces/Model/IBoard.cs
    startLine: 51
  assemblies:
  - Model
  namespace: Shared.Interfaces.Model
  summary: Updates the board state when a player claims a territory for the first time.
  remarks: This change should also fire <xref href="Shared.Interfaces.Model.IBoard.TerritoryChanged" data-throw-if-not-resolved="false"></xref> and subsequent events.
  example: []
  syntax:
    content: void Claims(int newPlayer, TerrID territory)
    parameters:
    - id: newPlayer
      type: System.Int32
      description: The number of the player that takes the territory.<code class="paramref">newPlayer</code>
    - id: territory
      type: Shared.Geography.Enums.TerrID
      description: The ID of the territory taken control of by <code class="paramref">newPlayer</code>.
    content.vb: Sub Claims(newPlayer As Integer, territory As TerrID)
  overload: Shared.Interfaces.Model.IBoard.Claims*
  nameWithType.vb: IBoard.Claims(Integer, TerrID)
  fullName.vb: Shared.Interfaces.Model.IBoard.Claims(Integer, Shared.Geography.Enums.TerrID)
  name.vb: Claims(Integer, TerrID)
- uid: Shared.Interfaces.Model.IBoard.Claims(System.Int32,Shared.Geography.Enums.TerrID,System.Int32)
  commentId: M:Shared.Interfaces.Model.IBoard.Claims(System.Int32,Shared.Geography.Enums.TerrID,System.Int32)
  id: Claims(System.Int32,Shared.Geography.Enums.TerrID,System.Int32)
  parent: Shared.Interfaces.Model.IBoard
  langs:
  - csharp
  - vb
  name: Claims(int, TerrID, int)
  nameWithType: IBoard.Claims(int, TerrID, int)
  fullName: Shared.Interfaces.Model.IBoard.Claims(int, Shared.Geography.Enums.TerrID, int)
  type: Method
  source:
    remote:
      path: Shared/Interfaces/Model/IBoard.cs
      branch: main
      repo: https://github.com/LivingCryogen/Hazard.git
    id: Claims
    path: ../Shared/Interfaces/Model/IBoard.cs
    startLine: 57
  assemblies:
  - Model
  namespace: Shared.Interfaces.Model
  summary: Updates the board state when a player claims a territory for the first time.
  remarks: This is a variation on <xref href="Shared.Interfaces.Model.IBoard.Claims(System.Int32%2cShared.Geography.Enums.TerrID)" data-throw-if-not-resolved="false"></xref> meant to enable overriding the default one army per claim.
  example: []
  syntax:
    content: void Claims(int newPlayer, TerrID territory, int armies)
    parameters:
    - id: newPlayer
      type: System.Int32
      description: The number of the player that takes the territory.<code class="paramref">newPlayer</code>
    - id: territory
      type: Shared.Geography.Enums.TerrID
      description: The ID of the territory taken control of by <code class="paramref">newPlayer</code>.
    - id: armies
      type: System.Int32
      description: The number of armies the new owner controls in the territory.
    content.vb: Sub Claims(newPlayer As Integer, territory As TerrID, armies As Integer)
  overload: Shared.Interfaces.Model.IBoard.Claims*
  nameWithType.vb: IBoard.Claims(Integer, TerrID, Integer)
  fullName.vb: Shared.Interfaces.Model.IBoard.Claims(Integer, Shared.Geography.Enums.TerrID, Integer)
  name.vb: Claims(Integer, TerrID, Integer)
- uid: Shared.Interfaces.Model.IBoard.Reinforce(Shared.Geography.Enums.TerrID)
  commentId: M:Shared.Interfaces.Model.IBoard.Reinforce(Shared.Geography.Enums.TerrID)
  id: Reinforce(Shared.Geography.Enums.TerrID)
  parent: Shared.Interfaces.Model.IBoard
  langs:
  - csharp
  - vb
  name: Reinforce(TerrID)
  nameWithType: IBoard.Reinforce(TerrID)
  fullName: Shared.Interfaces.Model.IBoard.Reinforce(Shared.Geography.Enums.TerrID)
  type: Method
  source:
    remote:
      path: Shared/Interfaces/Model/IBoard.cs
      branch: main
      repo: https://github.com/LivingCryogen/Hazard.git
    id: Reinforce
    path: ../Shared/Interfaces/Model/IBoard.cs
    startLine: 62
  assemblies:
  - Model
  namespace: Shared.Interfaces.Model
  summary: Increments the armies present within a territory.
  example: []
  syntax:
    content: void Reinforce(TerrID territory)
    parameters:
    - id: territory
      type: Shared.Geography.Enums.TerrID
      description: The ID of the territory in <xref href="Shared.Interfaces.Model.IBoard.Armies" data-throw-if-not-resolved="false"></xref> to increment.
    content.vb: Sub Reinforce(territory As TerrID)
  overload: Shared.Interfaces.Model.IBoard.Reinforce*
- uid: Shared.Interfaces.Model.IBoard.Reinforce(Shared.Geography.Enums.TerrID,System.Int32)
  commentId: M:Shared.Interfaces.Model.IBoard.Reinforce(Shared.Geography.Enums.TerrID,System.Int32)
  id: Reinforce(Shared.Geography.Enums.TerrID,System.Int32)
  parent: Shared.Interfaces.Model.IBoard
  langs:
  - csharp
  - vb
  name: Reinforce(TerrID, int)
  nameWithType: IBoard.Reinforce(TerrID, int)
  fullName: Shared.Interfaces.Model.IBoard.Reinforce(Shared.Geography.Enums.TerrID, int)
  type: Method
  source:
    remote:
      path: Shared/Interfaces/Model/IBoard.cs
      branch: main
      repo: https://github.com/LivingCryogen/Hazard.git
    id: Reinforce
    path: ../Shared/Interfaces/Model/IBoard.cs
    startLine: 68
  assemblies:
  - Model
  namespace: Shared.Interfaces.Model
  summary: Increases the armies present within a territory by a specified amount.
  example: []
  syntax:
    content: void Reinforce(TerrID territory, int armies)
    parameters:
    - id: territory
      type: Shared.Geography.Enums.TerrID
      description: The ID of the territory in <xref href="Shared.Interfaces.Model.IBoard.Armies" data-throw-if-not-resolved="false"></xref> to increase.
    - id: armies
      type: System.Int32
      description: The value of the increase of armies in the <code class="paramref">territory</code>.
    content.vb: Sub Reinforce(territory As TerrID, armies As Integer)
  overload: Shared.Interfaces.Model.IBoard.Reinforce*
  nameWithType.vb: IBoard.Reinforce(TerrID, Integer)
  fullName.vb: Shared.Interfaces.Model.IBoard.Reinforce(Shared.Geography.Enums.TerrID, Integer)
  name.vb: Reinforce(TerrID, Integer)
- uid: Shared.Interfaces.Model.IBoard.Conquer(Shared.Geography.Enums.TerrID,Shared.Geography.Enums.TerrID,System.Int32)
  commentId: M:Shared.Interfaces.Model.IBoard.Conquer(Shared.Geography.Enums.TerrID,Shared.Geography.Enums.TerrID,System.Int32)
  id: Conquer(Shared.Geography.Enums.TerrID,Shared.Geography.Enums.TerrID,System.Int32)
  parent: Shared.Interfaces.Model.IBoard
  langs:
  - csharp
  - vb
  name: Conquer(TerrID, TerrID, int)
  nameWithType: IBoard.Conquer(TerrID, TerrID, int)
  fullName: Shared.Interfaces.Model.IBoard.Conquer(Shared.Geography.Enums.TerrID, Shared.Geography.Enums.TerrID, int)
  type: Method
  source:
    remote:
      path: Shared/Interfaces/Model/IBoard.cs
      branch: main
      repo: https://github.com/LivingCryogen/Hazard.git
    id: Conquer
    path: ../Shared/Interfaces/Model/IBoard.cs
    startLine: 75
  assemblies:
  - Model
  namespace: Shared.Interfaces.Model
  summary: Changes ownership of a territory after a successful attack.
  example: []
  syntax:
    content: void Conquer(TerrID source, TerrID target, int newOwner)
    parameters:
    - id: source
      type: Shared.Geography.Enums.TerrID
      description: The territory from which the attack originated.
    - id: target
      type: Shared.Geography.Enums.TerrID
      description: The territory that was attacked and is being conquered.
    - id: newOwner
      type: System.Int32
      description: The <xref href="Shared.Interfaces.Model.IPlayer.Number" data-throw-if-not-resolved="false"></xref> of the owner after the attack is completed.
    content.vb: Sub Conquer(source As TerrID, target As TerrID, newOwner As Integer)
  overload: Shared.Interfaces.Model.IBoard.Conquer*
  nameWithType.vb: IBoard.Conquer(TerrID, TerrID, Integer)
  fullName.vb: Shared.Interfaces.Model.IBoard.Conquer(Shared.Geography.Enums.TerrID, Shared.Geography.Enums.TerrID, Integer)
  name.vb: Conquer(TerrID, TerrID, Integer)
- uid: Shared.Interfaces.Model.IBoard.CheckContinentFlip(Shared.Geography.Enums.TerrID,System.Int32)
  commentId: M:Shared.Interfaces.Model.IBoard.CheckContinentFlip(Shared.Geography.Enums.TerrID,System.Int32)
  id: CheckContinentFlip(Shared.Geography.Enums.TerrID,System.Int32)
  parent: Shared.Interfaces.Model.IBoard
  langs:
  - csharp
  - vb
  name: CheckContinentFlip(TerrID, int)
  nameWithType: IBoard.CheckContinentFlip(TerrID, int)
  fullName: Shared.Interfaces.Model.IBoard.CheckContinentFlip(Shared.Geography.Enums.TerrID, int)
  type: Method
  source:
    remote:
      path: Shared/Interfaces/Model/IBoard.cs
      branch: main
      repo: https://github.com/LivingCryogen/Hazard.git
    id: CheckContinentFlip
    path: ../Shared/Interfaces/Model/IBoard.cs
    startLine: 82
  assemblies:
  - Model
  namespace: Shared.Interfaces.Model
  summary: Determines whether a continent has changed ownership after a change in territory ownership.
  remarks: The new owner is not needed here so long as <xref href="Shared.Interfaces.Model.IBoard.TerritoryOwner" data-throw-if-not-resolved="false"></xref> is changed properly before this method is called.
  example: []
  syntax:
    content: void CheckContinentFlip(TerrID changed, int previousOwner)
    parameters:
    - id: changed
      type: Shared.Geography.Enums.TerrID
      description: The territory that changed hands.
    - id: previousOwner
      type: System.Int32
      description: The <xref href="Shared.Interfaces.Model.IPlayer.Number" data-throw-if-not-resolved="false"></xref> of the territory's owner before the change.
    content.vb: Sub CheckContinentFlip(changed As TerrID, previousOwner As Integer)
  overload: Shared.Interfaces.Model.IBoard.CheckContinentFlip*
  nameWithType.vb: IBoard.CheckContinentFlip(TerrID, Integer)
  fullName.vb: Shared.Interfaces.Model.IBoard.CheckContinentFlip(Shared.Geography.Enums.TerrID, Integer)
  name.vb: CheckContinentFlip(TerrID, Integer)
references:
- uid: Shared.Interfaces.Model
  commentId: N:Shared.Interfaces.Model
  href: Shared.html
  name: Shared.Interfaces.Model
  nameWithType: Shared.Interfaces.Model
  fullName: Shared.Interfaces.Model
  spec.csharp:
  - uid: Shared
    name: Shared
    href: Shared.html
  - name: .
  - uid: Shared.Interfaces
    name: Interfaces
    href: Shared.Interfaces.html
  - name: .
  - uid: Shared.Interfaces.Model
    name: Model
    href: Shared.Interfaces.Model.html
  spec.vb:
  - uid: Shared
    name: Shared
    href: Shared.html
  - name: .
  - uid: Shared.Interfaces
    name: Interfaces
    href: Shared.Interfaces.html
  - name: .
  - uid: Shared.Interfaces.Model
    name: Model
    href: Shared.Interfaces.Model.html
- uid: Shared.Interfaces.Model.IBinarySerializable.LoadFromBinary(System.IO.BinaryReader)
  commentId: M:Shared.Interfaces.Model.IBinarySerializable.LoadFromBinary(System.IO.BinaryReader)
  parent: Shared.Interfaces.Model.IBinarySerializable
  isExternal: true
  href: Shared.Interfaces.Model.IBinarySerializable.html#Shared_Interfaces_Model_IBinarySerializable_LoadFromBinary_System_IO_BinaryReader_
  name: LoadFromBinary(BinaryReader)
  nameWithType: IBinarySerializable.LoadFromBinary(BinaryReader)
  fullName: Shared.Interfaces.Model.IBinarySerializable.LoadFromBinary(System.IO.BinaryReader)
  spec.csharp:
  - uid: Shared.Interfaces.Model.IBinarySerializable.LoadFromBinary(System.IO.BinaryReader)
    name: LoadFromBinary
    href: Shared.Interfaces.Model.IBinarySerializable.html#Shared_Interfaces_Model_IBinarySerializable_LoadFromBinary_System_IO_BinaryReader_
  - name: (
  - uid: System.IO.BinaryReader
    name: BinaryReader
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.io.binaryreader
  - name: )
  spec.vb:
  - uid: Shared.Interfaces.Model.IBinarySerializable.LoadFromBinary(System.IO.BinaryReader)
    name: LoadFromBinary
    href: Shared.Interfaces.Model.IBinarySerializable.html#Shared_Interfaces_Model_IBinarySerializable_LoadFromBinary_System_IO_BinaryReader_
  - name: (
  - uid: System.IO.BinaryReader
    name: BinaryReader
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.io.binaryreader
  - name: )
- uid: Shared.Interfaces.Model.IBinarySerializable.GetBinarySerials
  commentId: M:Shared.Interfaces.Model.IBinarySerializable.GetBinarySerials
  parent: Shared.Interfaces.Model.IBinarySerializable
  href: Shared.Interfaces.Model.IBinarySerializable.html#Shared_Interfaces_Model_IBinarySerializable_GetBinarySerials
  name: GetBinarySerials()
  nameWithType: IBinarySerializable.GetBinarySerials()
  fullName: Shared.Interfaces.Model.IBinarySerializable.GetBinarySerials()
  spec.csharp:
  - uid: Shared.Interfaces.Model.IBinarySerializable.GetBinarySerials
    name: GetBinarySerials
    href: Shared.Interfaces.Model.IBinarySerializable.html#Shared_Interfaces_Model_IBinarySerializable_GetBinarySerials
  - name: (
  - name: )
  spec.vb:
  - uid: Shared.Interfaces.Model.IBinarySerializable.GetBinarySerials
    name: GetBinarySerials
    href: Shared.Interfaces.Model.IBinarySerializable.html#Shared_Interfaces_Model_IBinarySerializable_GetBinarySerials
  - name: (
  - name: )
- uid: Shared.Interfaces.Model.IBinarySerializable
  commentId: T:Shared.Interfaces.Model.IBinarySerializable
  parent: Shared.Interfaces.Model
  href: Shared.Interfaces.Model.IBinarySerializable.html
  name: IBinarySerializable
  nameWithType: IBinarySerializable
  fullName: Shared.Interfaces.Model.IBinarySerializable
- uid: Shared.Interfaces.ViewModel.IMainVM
  commentId: T:Shared.Interfaces.ViewModel.IMainVM
  href: Shared.Interfaces.ViewModel.IMainVM.html
  name: IMainVM
  nameWithType: IMainVM
  fullName: Shared.Interfaces.ViewModel.IMainVM
- uid: Shared.Interfaces.Model.IBoard.Armies
  commentId: P:Shared.Interfaces.Model.IBoard.Armies
  parent: Shared.Interfaces.Model.IBoard
  href: Shared.Interfaces.Model.IBoard.html#Shared_Interfaces_Model_IBoard_Armies
  name: Armies
  nameWithType: IBoard.Armies
  fullName: Shared.Interfaces.Model.IBoard.Armies
- uid: Shared.Interfaces.Model.IBoard.TerritoryOwner
  commentId: P:Shared.Interfaces.Model.IBoard.TerritoryOwner
  parent: Shared.Interfaces.Model.IBoard
  href: Shared.Interfaces.Model.IBoard.html#Shared_Interfaces_Model_IBoard_TerritoryOwner
  name: TerritoryOwner
  nameWithType: IBoard.TerritoryOwner
  fullName: Shared.Interfaces.Model.IBoard.TerritoryOwner
- uid: System.EventHandler{Shared.Interfaces.Model.ITerritoryChangedEventArgs}
  commentId: T:System.EventHandler{Shared.Interfaces.Model.ITerritoryChangedEventArgs}
  parent: System
  definition: System.EventHandler`1
  href: https://learn.microsoft.com/dotnet/api/system.eventhandler-1
  name: EventHandler<ITerritoryChangedEventArgs>
  nameWithType: EventHandler<ITerritoryChangedEventArgs>
  fullName: System.EventHandler<Shared.Interfaces.Model.ITerritoryChangedEventArgs>
  nameWithType.vb: EventHandler(Of ITerritoryChangedEventArgs)
  fullName.vb: System.EventHandler(Of Shared.Interfaces.Model.ITerritoryChangedEventArgs)
  name.vb: EventHandler(Of ITerritoryChangedEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.eventhandler-1
  - name: <
  - uid: Shared.Interfaces.Model.ITerritoryChangedEventArgs
    name: ITerritoryChangedEventArgs
    href: Shared.Interfaces.Model.ITerritoryChangedEventArgs.html
  - name: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.eventhandler-1
  - name: (
  - name: Of
  - name: " "
  - uid: Shared.Interfaces.Model.ITerritoryChangedEventArgs
    name: ITerritoryChangedEventArgs
    href: Shared.Interfaces.Model.ITerritoryChangedEventArgs.html
  - name: )
- uid: Shared.Interfaces.Model.IBoard
  commentId: T:Shared.Interfaces.Model.IBoard
  parent: Shared.Interfaces.Model
  href: Shared.Interfaces.Model.IBoard.html
  name: IBoard
  nameWithType: IBoard
  fullName: Shared.Interfaces.Model.IBoard
- uid: System.EventHandler`1
  commentId: T:System.EventHandler`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.eventhandler-1
  name: EventHandler<TEventArgs>
  nameWithType: EventHandler<TEventArgs>
  fullName: System.EventHandler<TEventArgs>
  nameWithType.vb: EventHandler(Of TEventArgs)
  fullName.vb: System.EventHandler(Of TEventArgs)
  name.vb: EventHandler(Of TEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.eventhandler-1
  - name: <
  - name: TEventArgs
  - name: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.eventhandler-1
  - name: (
  - name: Of
  - name: " "
  - name: TEventArgs
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Shared.Interfaces.Model.IBoard.ContinentOwner
  commentId: P:Shared.Interfaces.Model.IBoard.ContinentOwner
  parent: Shared.Interfaces.Model.IBoard
  href: Shared.Interfaces.Model.IBoard.html#Shared_Interfaces_Model_IBoard_ContinentOwner
  name: ContinentOwner
  nameWithType: IBoard.ContinentOwner
  fullName: Shared.Interfaces.Model.IBoard.ContinentOwner
- uid: System.EventHandler{Shared.Interfaces.IContinentOwnerChangedEventArgs}
  commentId: T:System.EventHandler{Shared.Interfaces.IContinentOwnerChangedEventArgs}
  parent: System
  definition: System.EventHandler`1
  href: https://learn.microsoft.com/dotnet/api/system.eventhandler-1
  name: EventHandler<IContinentOwnerChangedEventArgs>
  nameWithType: EventHandler<IContinentOwnerChangedEventArgs>
  fullName: System.EventHandler<Shared.Interfaces.IContinentOwnerChangedEventArgs>
  nameWithType.vb: EventHandler(Of IContinentOwnerChangedEventArgs)
  fullName.vb: System.EventHandler(Of Shared.Interfaces.IContinentOwnerChangedEventArgs)
  name.vb: EventHandler(Of IContinentOwnerChangedEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.eventhandler-1
  - name: <
  - uid: Shared.Interfaces.IContinentOwnerChangedEventArgs
    name: IContinentOwnerChangedEventArgs
    href: Shared.Interfaces.IContinentOwnerChangedEventArgs.html
  - name: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.eventhandler-1
  - name: (
  - name: Of
  - name: " "
  - uid: Shared.Interfaces.IContinentOwnerChangedEventArgs
    name: IContinentOwnerChangedEventArgs
    href: Shared.Interfaces.IContinentOwnerChangedEventArgs.html
  - name: )
- uid: Shared.Interfaces.Model.IBoard.Armies*
  commentId: Overload:Shared.Interfaces.Model.IBoard.Armies
  href: Shared.Interfaces.Model.IBoard.html#Shared_Interfaces_Model_IBoard_Armies
  name: Armies
  nameWithType: IBoard.Armies
  fullName: Shared.Interfaces.Model.IBoard.Armies
- uid: System.Collections.Generic.Dictionary{Shared.Geography.Enums.TerrID,System.Int32}
  commentId: T:System.Collections.Generic.Dictionary{Shared.Geography.Enums.TerrID,System.Int32}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<TerrID, int>
  nameWithType: Dictionary<TerrID, int>
  fullName: System.Collections.Generic.Dictionary<Shared.Geography.Enums.TerrID, int>
  nameWithType.vb: Dictionary(Of TerrID, Integer)
  fullName.vb: System.Collections.Generic.Dictionary(Of Shared.Geography.Enums.TerrID, Integer)
  name.vb: Dictionary(Of TerrID, Integer)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - uid: Shared.Geography.Enums.TerrID
    name: TerrID
    href: Shared.Geography.Enums.TerrID.html
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - uid: Shared.Geography.Enums.TerrID
    name: TerrID
    href: Shared.Geography.Enums.TerrID.html
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: Shared.Interfaces.Model.IBoard.TerritoryOwner*
  commentId: Overload:Shared.Interfaces.Model.IBoard.TerritoryOwner
  href: Shared.Interfaces.Model.IBoard.html#Shared_Interfaces_Model_IBoard_TerritoryOwner
  name: TerritoryOwner
  nameWithType: IBoard.TerritoryOwner
  fullName: Shared.Interfaces.Model.IBoard.TerritoryOwner
- uid: Shared.Interfaces.Model.IBoard.ContinentOwner*
  commentId: Overload:Shared.Interfaces.Model.IBoard.ContinentOwner
  href: Shared.Interfaces.Model.IBoard.html#Shared_Interfaces_Model_IBoard_ContinentOwner
  name: ContinentOwner
  nameWithType: IBoard.ContinentOwner
  fullName: Shared.Interfaces.Model.IBoard.ContinentOwner
- uid: System.Collections.Generic.Dictionary{Shared.Geography.Enums.ContID,System.Int32}
  commentId: T:System.Collections.Generic.Dictionary{Shared.Geography.Enums.ContID,System.Int32}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<ContID, int>
  nameWithType: Dictionary<ContID, int>
  fullName: System.Collections.Generic.Dictionary<Shared.Geography.Enums.ContID, int>
  nameWithType.vb: Dictionary(Of ContID, Integer)
  fullName.vb: System.Collections.Generic.Dictionary(Of Shared.Geography.Enums.ContID, Integer)
  name.vb: Dictionary(Of ContID, Integer)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - uid: Shared.Geography.Enums.ContID
    name: ContID
    href: Shared.Geography.Enums.ContID.html
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - uid: Shared.Geography.Enums.ContID
    name: ContID
    href: Shared.Geography.Enums.ContID.html
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: Shared.Geography.Enums.TerrID
  commentId: T:Shared.Geography.Enums.TerrID
  parent: Shared.Geography.Enums
  href: Shared.Geography.Enums.TerrID.html
  name: TerrID
  nameWithType: TerrID
  fullName: Shared.Geography.Enums.TerrID
- uid: Shared.Geography.Enums.ContID
  commentId: T:Shared.Geography.Enums.ContID
  parent: Shared.Geography.Enums
  href: Shared.Geography.Enums.ContID.html
  name: ContID
  nameWithType: ContID
  fullName: Shared.Geography.Enums.ContID
- uid: Shared.Interfaces.Model.IBoard.Item*
  commentId: Overload:Shared.Interfaces.Model.IBoard.Item
  href: Shared.Interfaces.Model.IBoard.html#Shared_Interfaces_Model_IBoard_Item_System_Int32_System_String_
  name: this
  nameWithType: IBoard.this
  fullName: Shared.Interfaces.Model.IBoard.this
  nameWithType.vb: IBoard.this[]
  fullName.vb: Shared.Interfaces.Model.IBoard.this[]
  name.vb: this[]
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.Collections.Generic.List{System.Object}
  commentId: T:System.Collections.Generic.List{System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<object>
  nameWithType: List<object>
  fullName: System.Collections.Generic.List<object>
  nameWithType.vb: List(Of Object)
  fullName.vb: System.Collections.Generic.List(Of Object)
  name.vb: List(Of Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: Shared.Geography.Enums
  commentId: N:Shared.Geography.Enums
  href: Shared.html
  name: Shared.Geography.Enums
  nameWithType: Shared.Geography.Enums
  fullName: Shared.Geography.Enums
  spec.csharp:
  - uid: Shared
    name: Shared
    href: Shared.html
  - name: .
  - uid: Shared.Geography
    name: Geography
    href: Shared.Geography.html
  - name: .
  - uid: Shared.Geography.Enums
    name: Enums
    href: Shared.Geography.Enums.html
  spec.vb:
  - uid: Shared
    name: Shared
    href: Shared.html
  - name: .
  - uid: Shared.Geography
    name: Geography
    href: Shared.Geography.html
  - name: .
  - uid: Shared.Geography.Enums
    name: Enums
    href: Shared.Geography.Enums.html
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Shared.Interfaces.Model.IBoard.TerritoryChanged
  commentId: E:Shared.Interfaces.Model.IBoard.TerritoryChanged
  parent: Shared.Interfaces.Model.IBoard
  href: Shared.Interfaces.Model.IBoard.html#Shared_Interfaces_Model_IBoard_TerritoryChanged
  name: TerritoryChanged
  nameWithType: IBoard.TerritoryChanged
  fullName: Shared.Interfaces.Model.IBoard.TerritoryChanged
- uid: Shared.Interfaces.Model.IBoard.Claims*
  commentId: Overload:Shared.Interfaces.Model.IBoard.Claims
  href: Shared.Interfaces.Model.IBoard.html#Shared_Interfaces_Model_IBoard_Claims_System_Int32_Shared_Geography_Enums_TerrID_
  name: Claims
  nameWithType: IBoard.Claims
  fullName: Shared.Interfaces.Model.IBoard.Claims
- uid: Shared.Interfaces.Model.IBoard.Claims(System.Int32,Shared.Geography.Enums.TerrID)
  commentId: M:Shared.Interfaces.Model.IBoard.Claims(System.Int32,Shared.Geography.Enums.TerrID)
  parent: Shared.Interfaces.Model.IBoard
  isExternal: true
  href: Shared.Interfaces.Model.IBoard.html#Shared_Interfaces_Model_IBoard_Claims_System_Int32_Shared_Geography_Enums_TerrID_
  name: Claims(int, TerrID)
  nameWithType: IBoard.Claims(int, TerrID)
  fullName: Shared.Interfaces.Model.IBoard.Claims(int, Shared.Geography.Enums.TerrID)
  nameWithType.vb: IBoard.Claims(Integer, TerrID)
  fullName.vb: Shared.Interfaces.Model.IBoard.Claims(Integer, Shared.Geography.Enums.TerrID)
  name.vb: Claims(Integer, TerrID)
  spec.csharp:
  - uid: Shared.Interfaces.Model.IBoard.Claims(System.Int32,Shared.Geography.Enums.TerrID)
    name: Claims
    href: Shared.Interfaces.Model.IBoard.html#Shared_Interfaces_Model_IBoard_Claims_System_Int32_Shared_Geography_Enums_TerrID_
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: Shared.Geography.Enums.TerrID
    name: TerrID
    href: Shared.Geography.Enums.TerrID.html
  - name: )
  spec.vb:
  - uid: Shared.Interfaces.Model.IBoard.Claims(System.Int32,Shared.Geography.Enums.TerrID)
    name: Claims
    href: Shared.Interfaces.Model.IBoard.html#Shared_Interfaces_Model_IBoard_Claims_System_Int32_Shared_Geography_Enums_TerrID_
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: Shared.Geography.Enums.TerrID
    name: TerrID
    href: Shared.Geography.Enums.TerrID.html
  - name: )
- uid: Shared.Interfaces.Model.IBoard.Reinforce*
  commentId: Overload:Shared.Interfaces.Model.IBoard.Reinforce
  href: Shared.Interfaces.Model.IBoard.html#Shared_Interfaces_Model_IBoard_Reinforce_Shared_Geography_Enums_TerrID_
  name: Reinforce
  nameWithType: IBoard.Reinforce
  fullName: Shared.Interfaces.Model.IBoard.Reinforce
- uid: Shared.Interfaces.Model.IPlayer.Number
  commentId: P:Shared.Interfaces.Model.IPlayer.Number
  parent: Shared.Interfaces.Model.IPlayer
  href: Shared.Interfaces.Model.IPlayer.html#Shared_Interfaces_Model_IPlayer_Number
  name: Number
  nameWithType: IPlayer.Number
  fullName: Shared.Interfaces.Model.IPlayer.Number
- uid: Shared.Interfaces.Model.IBoard.Conquer*
  commentId: Overload:Shared.Interfaces.Model.IBoard.Conquer
  href: Shared.Interfaces.Model.IBoard.html#Shared_Interfaces_Model_IBoard_Conquer_Shared_Geography_Enums_TerrID_Shared_Geography_Enums_TerrID_System_Int32_
  name: Conquer
  nameWithType: IBoard.Conquer
  fullName: Shared.Interfaces.Model.IBoard.Conquer
- uid: Shared.Interfaces.Model.IPlayer
  commentId: T:Shared.Interfaces.Model.IPlayer
  parent: Shared.Interfaces.Model
  href: Shared.Interfaces.Model.IPlayer.html
  name: IPlayer
  nameWithType: IPlayer
  fullName: Shared.Interfaces.Model.IPlayer
- uid: Shared.Interfaces.Model.IBoard.CheckContinentFlip*
  commentId: Overload:Shared.Interfaces.Model.IBoard.CheckContinentFlip
  href: Shared.Interfaces.Model.IBoard.html#Shared_Interfaces_Model_IBoard_CheckContinentFlip_Shared_Geography_Enums_TerrID_System_Int32_
  name: CheckContinentFlip
  nameWithType: IBoard.CheckContinentFlip
  fullName: Shared.Interfaces.Model.IBoard.CheckContinentFlip
