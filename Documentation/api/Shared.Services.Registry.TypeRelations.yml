### YamlMime:ManagedReference
items:
- uid: Shared.Services.Registry.TypeRelations
  commentId: T:Shared.Services.Registry.TypeRelations
  id: TypeRelations
  parent: Shared.Services.Registry
  children:
  - Shared.Services.Registry.TypeRelations.#ctor
  - Shared.Services.Registry.TypeRelations.#ctor(System.ValueTuple{System.Object,Shared.Services.Registry.RegistryRelation}[])
  - Shared.Services.Registry.TypeRelations.Add(System.Object,Shared.Services.Registry.RegistryRelation)
  - Shared.Services.Registry.TypeRelations.IsEmpty
  - Shared.Services.Registry.TypeRelations.Item(Shared.Services.Registry.RegistryRelation)
  - Shared.Services.Registry.TypeRelations.Remove(Shared.Services.Registry.RegistryRelation)
  langs:
  - csharp
  - vb
  name: TypeRelations
  nameWithType: TypeRelations
  fullName: Shared.Services.Registry.TypeRelations
  type: Class
  source:
    remote:
      path: Shared/Services/Registry/TypeRelations.cs
      branch: main
      repo: https://github.com/LivingCryogen/Hazard.git
    id: TypeRelations
    path: ../Shared/Services/Registry/TypeRelations.cs
    startLine: 5
  assemblies:
  - Model
  namespace: Shared.Services.Registry
  summary: Encapsulates objects under specific relations as values for a <xref href="Shared.Services.Registry.TypeRegister" data-throw-if-not-resolved="false"></xref> entry.
  example: []
  syntax:
    content: 'public class TypeRelations : ITypeRelations'
    content.vb: Public Class TypeRelations Implements ITypeRelations
  inheritance:
  - System.Object
  implements:
  - Shared.Services.Registry.ITypeRelations
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: Shared.Services.Registry.TypeRelations.#ctor
  commentId: M:Shared.Services.Registry.TypeRelations.#ctor
  id: '#ctor'
  parent: Shared.Services.Registry.TypeRelations
  langs:
  - csharp
  - vb
  name: TypeRelations()
  nameWithType: TypeRelations.TypeRelations()
  fullName: Shared.Services.Registry.TypeRelations.TypeRelations()
  type: Constructor
  source:
    remote:
      path: Shared/Services/Registry/TypeRelations.cs
      branch: main
      repo: https://github.com/LivingCryogen/Hazard.git
    id: .ctor
    path: ../Shared/Services/Registry/TypeRelations.cs
    startLine: 12
  assemblies:
  - Model
  namespace: Shared.Services.Registry
  summary: Constructs an empty TypeRelations.
  example: []
  syntax:
    content: public TypeRelations()
    content.vb: Public Sub New()
  overload: Shared.Services.Registry.TypeRelations.#ctor*
  nameWithType.vb: TypeRelations.New()
  fullName.vb: Shared.Services.Registry.TypeRelations.New()
  name.vb: New()
- uid: Shared.Services.Registry.TypeRelations.#ctor(System.ValueTuple{System.Object,Shared.Services.Registry.RegistryRelation}[])
  commentId: M:Shared.Services.Registry.TypeRelations.#ctor(System.ValueTuple{System.Object,Shared.Services.Registry.RegistryRelation}[])
  id: '#ctor(System.ValueTuple{System.Object,Shared.Services.Registry.RegistryRelation}[])'
  parent: Shared.Services.Registry.TypeRelations
  langs:
  - csharp
  - vb
  name: TypeRelations((object, RegistryRelation)[])
  nameWithType: TypeRelations.TypeRelations((object, RegistryRelation)[])
  fullName: Shared.Services.Registry.TypeRelations.TypeRelations((object, Shared.Services.Registry.RegistryRelation)[])
  type: Constructor
  source:
    remote:
      path: Shared/Services/Registry/TypeRelations.cs
      branch: main
      repo: https://github.com/LivingCryogen/Hazard.git
    id: .ctor
    path: ../Shared/Services/Registry/TypeRelations.cs
    startLine: 18
  assemblies:
  - Model
  namespace: Shared.Services.Registry
  summary: Constructs a TypeRelations from a collection of objects under specific relations.
  example: []
  syntax:
    content: public TypeRelations((object, RegistryRelation)[] relations)
    parameters:
    - id: relations
      type: System.ValueTuple{System.Object,Shared.Services.Registry.RegistryRelation}[]
      description: The related objects, each with a <xref href="Shared.Services.Registry.RegistryRelation" data-throw-if-not-resolved="false"></xref> categorizing their relation to a keyed Type in a <xref href="Shared.Services.Registry.TypeRegister" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Sub New(relations As (Object, RegistryRelation)())
  overload: Shared.Services.Registry.TypeRelations.#ctor*
  nameWithType.vb: TypeRelations.New((Object, RegistryRelation)())
  fullName.vb: Shared.Services.Registry.TypeRelations.New((Object, Shared.Services.Registry.RegistryRelation)())
  name.vb: New((Object, RegistryRelation)())
- uid: Shared.Services.Registry.TypeRelations.IsEmpty
  commentId: P:Shared.Services.Registry.TypeRelations.IsEmpty
  id: IsEmpty
  parent: Shared.Services.Registry.TypeRelations
  langs:
  - csharp
  - vb
  name: IsEmpty
  nameWithType: TypeRelations.IsEmpty
  fullName: Shared.Services.Registry.TypeRelations.IsEmpty
  type: Property
  source:
    remote:
      path: Shared/Services/Registry/TypeRelations.cs
      branch: main
      repo: https://github.com/LivingCryogen/Hazard.git
    id: IsEmpty
    path: ../Shared/Services/Registry/TypeRelations.cs
    startLine: 25
  assemblies:
  - Model
  namespace: Shared.Services.Registry
  summary: Indicates whether the instance is internally empty.
  example: []
  syntax:
    content: public bool IsEmpty { get; }
    parameters: []
    return:
      type: System.Boolean
      description: True if the set of object-relation values is empty; otherwise, false.
    content.vb: Public ReadOnly Property IsEmpty As Boolean
  overload: Shared.Services.Registry.TypeRelations.IsEmpty*
  implements:
  - Shared.Services.Registry.ITypeRelations.IsEmpty
- uid: Shared.Services.Registry.TypeRelations.Item(Shared.Services.Registry.RegistryRelation)
  commentId: P:Shared.Services.Registry.TypeRelations.Item(Shared.Services.Registry.RegistryRelation)
  id: Item(Shared.Services.Registry.RegistryRelation)
  parent: Shared.Services.Registry.TypeRelations
  langs:
  - csharp
  - vb
  name: this[RegistryRelation]
  nameWithType: TypeRelations.this[RegistryRelation]
  fullName: Shared.Services.Registry.TypeRelations.this[Shared.Services.Registry.RegistryRelation]
  type: Property
  source:
    remote:
      path: Shared/Services/Registry/TypeRelations.cs
      branch: main
      repo: https://github.com/LivingCryogen/Hazard.git
    id: this[]
    path: ../Shared/Services/Registry/TypeRelations.cs
    startLine: 27
  assemblies:
  - Model
  namespace: Shared.Services.Registry
  summary: Retrieves the <xref href="System.Object" data-throw-if-not-resolved="false"></xref> in a <xref href="Shared.Services.Registry.TypeRegister" data-throw-if-not-resolved="false"></xref> entry given its relation type.
  example: []
  syntax:
    content: public object? this[RegistryRelation relation] { get; }
    parameters:
    - id: relation
      type: Shared.Services.Registry.RegistryRelation
      description: The relation under which the <xref href="System.Object" data-throw-if-not-resolved="false"></xref> was registered.
    return:
      type: System.Object
      description: The related <xref href="System.Object" data-throw-if-not-resolved="false"></xref> or, if none, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
    content.vb: Public ReadOnly Default Property this[](relation As RegistryRelation) As Object
  overload: Shared.Services.Registry.TypeRelations.Item*
  implements:
  - Shared.Services.Registry.ITypeRelations.Item(Shared.Services.Registry.RegistryRelation)
  nameWithType.vb: TypeRelations.this[](RegistryRelation)
  fullName.vb: Shared.Services.Registry.TypeRelations.this[](Shared.Services.Registry.RegistryRelation)
  name.vb: this[](RegistryRelation)
- uid: Shared.Services.Registry.TypeRelations.Add(System.Object,Shared.Services.Registry.RegistryRelation)
  commentId: M:Shared.Services.Registry.TypeRelations.Add(System.Object,Shared.Services.Registry.RegistryRelation)
  id: Add(System.Object,Shared.Services.Registry.RegistryRelation)
  parent: Shared.Services.Registry.TypeRelations
  langs:
  - csharp
  - vb
  name: Add(object, RegistryRelation)
  nameWithType: TypeRelations.Add(object, RegistryRelation)
  fullName: Shared.Services.Registry.TypeRelations.Add(object, Shared.Services.Registry.RegistryRelation)
  type: Method
  source:
    remote:
      path: Shared/Services/Registry/TypeRelations.cs
      branch: main
      repo: https://github.com/LivingCryogen/Hazard.git
    id: Add
    path: ../Shared/Services/Registry/TypeRelations.cs
    startLine: 39
  assemblies:
  - Model
  namespace: Shared.Services.Registry
  summary: Adds an object under a specific relation.
  example: []
  syntax:
    content: public void Add(object obj, RegistryRelation relation)
    parameters:
    - id: obj
      type: System.Object
      description: The <xref href="System.Object" data-throw-if-not-resolved="false"></xref> to be registered as related.
    - id: relation
      type: Shared.Services.Registry.RegistryRelation
      description: The relation type.
    content.vb: Public Sub Add(obj As Object, relation As RegistryRelation)
  overload: Shared.Services.Registry.TypeRelations.Add*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown if there is already an <xref href="System.Object" data-throw-if-not-resolved="false"></xref> associated with the given <code class="paramref">relation</code>, or if the type of <code class="paramref">obj</code> is incompatible with the given <code class="paramref">relation</code>.
  implements:
  - Shared.Services.Registry.ITypeRelations.Add(System.Object,Shared.Services.Registry.RegistryRelation)
  nameWithType.vb: TypeRelations.Add(Object, RegistryRelation)
  fullName.vb: Shared.Services.Registry.TypeRelations.Add(Object, Shared.Services.Registry.RegistryRelation)
  name.vb: Add(Object, RegistryRelation)
- uid: Shared.Services.Registry.TypeRelations.Remove(Shared.Services.Registry.RegistryRelation)
  commentId: M:Shared.Services.Registry.TypeRelations.Remove(Shared.Services.Registry.RegistryRelation)
  id: Remove(Shared.Services.Registry.RegistryRelation)
  parent: Shared.Services.Registry.TypeRelations
  langs:
  - csharp
  - vb
  name: Remove(RegistryRelation)
  nameWithType: TypeRelations.Remove(RegistryRelation)
  fullName: Shared.Services.Registry.TypeRelations.Remove(Shared.Services.Registry.RegistryRelation)
  type: Method
  source:
    remote:
      path: Shared/Services/Registry/TypeRelations.cs
      branch: main
      repo: https://github.com/LivingCryogen/Hazard.git
    id: Remove
    path: ../Shared/Services/Registry/TypeRelations.cs
    startLine: 92
  assemblies:
  - Model
  namespace: Shared.Services.Registry
  summary: Removes an object/relation pair.
  example: []
  syntax:
    content: public void Remove(RegistryRelation relation)
    parameters:
    - id: relation
      type: Shared.Services.Registry.RegistryRelation
      description: The relation with which the value was registered.
    content.vb: Public Sub Remove(relation As RegistryRelation)
  overload: Shared.Services.Registry.TypeRelations.Remove*
  exceptions:
  - type: System.Collections.Generic.KeyNotFoundException
    commentId: T:System.Collections.Generic.KeyNotFoundException
    description: Thrown if <code class="paramref">relation</code> was not found.
  implements:
  - Shared.Services.Registry.ITypeRelations.Remove(Shared.Services.Registry.RegistryRelation)
references:
- uid: Shared.Services.Registry.TypeRegister
  commentId: T:Shared.Services.Registry.TypeRegister
  href: Shared.Services.Registry.TypeRegister.html
  name: TypeRegister
  nameWithType: TypeRegister
  fullName: Shared.Services.Registry.TypeRegister
- uid: Shared.Services.Registry.RegistryRelation
  commentId: T:Shared.Services.Registry.RegistryRelation
  parent: Shared.Services.Registry
  href: Shared.Services.Registry.RegistryRelation.html
  name: RegistryRelation
  nameWithType: RegistryRelation
  fullName: Shared.Services.Registry.RegistryRelation
- uid: Shared.Services.Registry
  commentId: N:Shared.Services.Registry
  href: Shared.html
  name: Shared.Services.Registry
  nameWithType: Shared.Services.Registry
  fullName: Shared.Services.Registry
  spec.csharp:
  - uid: Shared
    name: Shared
    href: Shared.html
  - name: .
  - uid: Shared.Services
    name: Services
    href: Shared.Services.html
  - name: .
  - uid: Shared.Services.Registry
    name: Registry
    href: Shared.Services.Registry.html
  spec.vb:
  - uid: Shared
    name: Shared
    href: Shared.html
  - name: .
  - uid: Shared.Services
    name: Services
    href: Shared.Services.html
  - name: .
  - uid: Shared.Services.Registry
    name: Registry
    href: Shared.Services.Registry.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: Shared.Services.Registry.ITypeRelations
  commentId: T:Shared.Services.Registry.ITypeRelations
  parent: Shared.Services.Registry
  href: Shared.Services.Registry.ITypeRelations.html
  name: ITypeRelations
  nameWithType: ITypeRelations
  fullName: Shared.Services.Registry.ITypeRelations
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Shared.Services.Registry.TypeRelations.#ctor*
  commentId: Overload:Shared.Services.Registry.TypeRelations.#ctor
  href: Shared.Services.Registry.TypeRelations.html#Shared_Services_Registry_TypeRelations__ctor
  name: TypeRelations
  nameWithType: TypeRelations.TypeRelations
  fullName: Shared.Services.Registry.TypeRelations.TypeRelations
  nameWithType.vb: TypeRelations.New
  fullName.vb: Shared.Services.Registry.TypeRelations.New
  name.vb: New
- uid: System.ValueTuple{System.Object,Shared.Services.Registry.RegistryRelation}[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: (object, RegistryRelation)[]
  nameWithType: (object, RegistryRelation)[]
  fullName: (object, Shared.Services.Registry.RegistryRelation)[]
  nameWithType.vb: (Object, RegistryRelation)()
  fullName.vb: (Object, Shared.Services.Registry.RegistryRelation)()
  name.vb: (Object, RegistryRelation)()
  spec.csharp:
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: Shared.Services.Registry.RegistryRelation
    name: RegistryRelation
    href: Shared.Services.Registry.RegistryRelation.html
  - name: )
  - name: '['
  - name: ']'
  spec.vb:
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: Shared.Services.Registry.RegistryRelation
    name: RegistryRelation
    href: Shared.Services.Registry.RegistryRelation.html
  - name: )
  - name: (
  - name: )
- uid: Shared.Services.Registry.TypeRelations.IsEmpty*
  commentId: Overload:Shared.Services.Registry.TypeRelations.IsEmpty
  href: Shared.Services.Registry.TypeRelations.html#Shared_Services_Registry_TypeRelations_IsEmpty
  name: IsEmpty
  nameWithType: TypeRelations.IsEmpty
  fullName: Shared.Services.Registry.TypeRelations.IsEmpty
- uid: Shared.Services.Registry.ITypeRelations.IsEmpty
  commentId: P:Shared.Services.Registry.ITypeRelations.IsEmpty
  parent: Shared.Services.Registry.ITypeRelations
  href: Shared.Services.Registry.ITypeRelations.html#Shared_Services_Registry_ITypeRelations_IsEmpty
  name: IsEmpty
  nameWithType: ITypeRelations.IsEmpty
  fullName: Shared.Services.Registry.ITypeRelations.IsEmpty
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: Shared.Services.Registry.TypeRelations.Item*
  commentId: Overload:Shared.Services.Registry.TypeRelations.Item
  href: Shared.Services.Registry.TypeRelations.html#Shared_Services_Registry_TypeRelations_Item_Shared_Services_Registry_RegistryRelation_
  name: this
  nameWithType: TypeRelations.this
  fullName: Shared.Services.Registry.TypeRelations.this
  nameWithType.vb: TypeRelations.this[]
  fullName.vb: Shared.Services.Registry.TypeRelations.this[]
  name.vb: this[]
- uid: Shared.Services.Registry.ITypeRelations.Item(Shared.Services.Registry.RegistryRelation)
  commentId: P:Shared.Services.Registry.ITypeRelations.Item(Shared.Services.Registry.RegistryRelation)
  parent: Shared.Services.Registry.ITypeRelations
  href: Shared.Services.Registry.RegistryRelation.html
  name: this[RegistryRelation]
  nameWithType: ITypeRelations.this[RegistryRelation]
  fullName: Shared.Services.Registry.ITypeRelations.this[Shared.Services.Registry.RegistryRelation]
  nameWithType.vb: ITypeRelations.this[](RegistryRelation)
  fullName.vb: Shared.Services.Registry.ITypeRelations.this[](Shared.Services.Registry.RegistryRelation)
  name.vb: this[](RegistryRelation)
  spec.csharp:
  - name: this
  - name: '['
  - uid: Shared.Services.Registry.RegistryRelation
    name: RegistryRelation
    href: Shared.Services.Registry.RegistryRelation.html
  - name: ']'
  spec.vb:
  - uid: Shared.Services.Registry.ITypeRelations.Item(Shared.Services.Registry.RegistryRelation)
    name: this[]
    href: Shared.Services.Registry.ITypeRelations.html#Shared_Services_Registry_ITypeRelations_Item_Shared_Services_Registry_RegistryRelation_
  - name: (
  - uid: Shared.Services.Registry.RegistryRelation
    name: RegistryRelation
    href: Shared.Services.Registry.RegistryRelation.html
  - name: )
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentexception
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: Shared.Services.Registry.TypeRelations.Add*
  commentId: Overload:Shared.Services.Registry.TypeRelations.Add
  href: Shared.Services.Registry.TypeRelations.html#Shared_Services_Registry_TypeRelations_Add_System_Object_Shared_Services_Registry_RegistryRelation_
  name: Add
  nameWithType: TypeRelations.Add
  fullName: Shared.Services.Registry.TypeRelations.Add
- uid: Shared.Services.Registry.ITypeRelations.Add(System.Object,Shared.Services.Registry.RegistryRelation)
  commentId: M:Shared.Services.Registry.ITypeRelations.Add(System.Object,Shared.Services.Registry.RegistryRelation)
  parent: Shared.Services.Registry.ITypeRelations
  isExternal: true
  href: Shared.Services.Registry.ITypeRelations.html#Shared_Services_Registry_ITypeRelations_Add_System_Object_Shared_Services_Registry_RegistryRelation_
  name: Add(object, RegistryRelation)
  nameWithType: ITypeRelations.Add(object, RegistryRelation)
  fullName: Shared.Services.Registry.ITypeRelations.Add(object, Shared.Services.Registry.RegistryRelation)
  nameWithType.vb: ITypeRelations.Add(Object, RegistryRelation)
  fullName.vb: Shared.Services.Registry.ITypeRelations.Add(Object, Shared.Services.Registry.RegistryRelation)
  name.vb: Add(Object, RegistryRelation)
  spec.csharp:
  - uid: Shared.Services.Registry.ITypeRelations.Add(System.Object,Shared.Services.Registry.RegistryRelation)
    name: Add
    href: Shared.Services.Registry.ITypeRelations.html#Shared_Services_Registry_ITypeRelations_Add_System_Object_Shared_Services_Registry_RegistryRelation_
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: Shared.Services.Registry.RegistryRelation
    name: RegistryRelation
    href: Shared.Services.Registry.RegistryRelation.html
  - name: )
  spec.vb:
  - uid: Shared.Services.Registry.ITypeRelations.Add(System.Object,Shared.Services.Registry.RegistryRelation)
    name: Add
    href: Shared.Services.Registry.ITypeRelations.html#Shared_Services_Registry_ITypeRelations_Add_System_Object_Shared_Services_Registry_RegistryRelation_
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: Shared.Services.Registry.RegistryRelation
    name: RegistryRelation
    href: Shared.Services.Registry.RegistryRelation.html
  - name: )
- uid: System.Collections.Generic.KeyNotFoundException
  commentId: T:System.Collections.Generic.KeyNotFoundException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keynotfoundexception
  name: KeyNotFoundException
  nameWithType: KeyNotFoundException
  fullName: System.Collections.Generic.KeyNotFoundException
- uid: Shared.Services.Registry.TypeRelations.Remove*
  commentId: Overload:Shared.Services.Registry.TypeRelations.Remove
  href: Shared.Services.Registry.TypeRelations.html#Shared_Services_Registry_TypeRelations_Remove_Shared_Services_Registry_RegistryRelation_
  name: Remove
  nameWithType: TypeRelations.Remove
  fullName: Shared.Services.Registry.TypeRelations.Remove
- uid: Shared.Services.Registry.ITypeRelations.Remove(Shared.Services.Registry.RegistryRelation)
  commentId: M:Shared.Services.Registry.ITypeRelations.Remove(Shared.Services.Registry.RegistryRelation)
  parent: Shared.Services.Registry.ITypeRelations
  href: Shared.Services.Registry.ITypeRelations.html#Shared_Services_Registry_ITypeRelations_Remove_Shared_Services_Registry_RegistryRelation_
  name: Remove(RegistryRelation)
  nameWithType: ITypeRelations.Remove(RegistryRelation)
  fullName: Shared.Services.Registry.ITypeRelations.Remove(Shared.Services.Registry.RegistryRelation)
  spec.csharp:
  - uid: Shared.Services.Registry.ITypeRelations.Remove(Shared.Services.Registry.RegistryRelation)
    name: Remove
    href: Shared.Services.Registry.ITypeRelations.html#Shared_Services_Registry_ITypeRelations_Remove_Shared_Services_Registry_RegistryRelation_
  - name: (
  - uid: Shared.Services.Registry.RegistryRelation
    name: RegistryRelation
    href: Shared.Services.Registry.RegistryRelation.html
  - name: )
  spec.vb:
  - uid: Shared.Services.Registry.ITypeRelations.Remove(Shared.Services.Registry.RegistryRelation)
    name: Remove
    href: Shared.Services.Registry.ITypeRelations.html#Shared_Services_Registry_ITypeRelations_Remove_Shared_Services_Registry_RegistryRelation_
  - name: (
  - uid: Shared.Services.Registry.RegistryRelation
    name: RegistryRelation
    href: Shared.Services.Registry.RegistryRelation.html
  - name: )
